
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 4.11.0
 * Query Engine version: 8fde8fef4033376662cad983758335009d522acb
 */
Prisma.prismaVersion = {
  client: "4.11.0",
  engine: "8fde8fef4033376662cad983758335009d522acb"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.NotFoundError = () => {
  throw new Error(`NotFoundError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = () => (val) => val


/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}

/**
 * Enums
 */
// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275
function makeEnum(x) { return x; }

exports.Prisma.AddressScalarFieldEnum = makeEnum({
  addressID: 'addressID',
  city: 'city',
  street: 'street',
  province: 'province',
  zipcode: 'zipcode',
  companyID: 'companyID'
});

exports.Prisma.CompanyScalarFieldEnum = makeEnum({
  companyID: 'companyID',
  companyName: 'companyName',
  userID: 'userID'
});

exports.Prisma.LogsScalarFieldEnum = makeEnum({
  logsID: 'logsID',
  log: 'log',
  createdAt: 'createdAt',
  userID: 'userID'
});

exports.Prisma.NotificationScalarFieldEnum = makeEnum({
  notificationID: 'notificationID',
  title: 'title',
  notificationStatus: 'notificationStatus',
  createdAt: 'createdAt',
  userID: 'userID'
});

exports.Prisma.OrderScalarFieldEnum = makeEnum({
  orderID: 'orderID',
  quantity: 'quantity',
  total: 'total',
  companyID: 'companyID',
  payment: 'payment',
  status: 'status',
  discount: 'discount',
  createdAt: 'createdAt',
  userID: 'userID'
});

exports.Prisma.OtpScalarFieldEnum = makeEnum({
  otID: 'otID',
  otp: 'otp',
  createdAt: 'createdAt',
  expiredAt: 'expiredAt'
});

exports.Prisma.ProductScalarFieldEnum = makeEnum({
  productID: 'productID',
  sku: 'sku',
  title: 'title',
  price: 'price',
  stock: 'stock',
  userID: 'userID',
  status: 'status',
  createdAt: 'createdAt',
  notificationID: 'notificationID'
});

exports.Prisma.ProfileScalarFieldEnum = makeEnum({
  profileID: 'profileID',
  firstname: 'firstname',
  lastname: 'lastname',
  birthday: 'birthday',
  phone: 'phone',
  userID: 'userID'
});

exports.Prisma.QueryMode = makeEnum({
  default: 'default',
  insensitive: 'insensitive'
});

exports.Prisma.RequestScalarFieldEnum = makeEnum({
  requestID: 'requestID',
  message: 'message',
  quantity: 'quantity',
  status: 'status',
  createdAt: 'createdAt',
  userID: 'userID',
  notificationID: 'notificationID'
});

exports.Prisma.SortOrder = makeEnum({
  asc: 'asc',
  desc: 'desc'
});

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserOrderByRelevanceFieldEnum = makeEnum({
  userID: 'userID',
  email: 'email',
  password: 'password'
});

exports.Prisma.UserScalarFieldEnum = makeEnum({
  userID: 'userID',
  email: 'email',
  password: 'password',
  role: 'role',
  createdAt: 'createdAt',
  locked: 'locked'
});

exports.Prisma.addressOrderByRelevanceFieldEnum = makeEnum({
  addressID: 'addressID',
  city: 'city',
  street: 'street',
  province: 'province',
  zipcode: 'zipcode',
  companyID: 'companyID'
});

exports.Prisma.companyOrderByRelevanceFieldEnum = makeEnum({
  companyID: 'companyID',
  companyName: 'companyName',
  userID: 'userID'
});

exports.Prisma.logsOrderByRelevanceFieldEnum = makeEnum({
  logsID: 'logsID',
  log: 'log',
  userID: 'userID'
});

exports.Prisma.notificationOrderByRelevanceFieldEnum = makeEnum({
  notificationID: 'notificationID',
  title: 'title',
  userID: 'userID'
});

exports.Prisma.orderOrderByRelevanceFieldEnum = makeEnum({
  orderID: 'orderID',
  companyID: 'companyID',
  payment: 'payment',
  userID: 'userID'
});

exports.Prisma.otpOrderByRelevanceFieldEnum = makeEnum({
  otID: 'otID',
  otp: 'otp'
});

exports.Prisma.productOrderByRelevanceFieldEnum = makeEnum({
  productID: 'productID',
  sku: 'sku',
  title: 'title',
  userID: 'userID',
  notificationID: 'notificationID'
});

exports.Prisma.profileOrderByRelevanceFieldEnum = makeEnum({
  profileID: 'profileID',
  firstname: 'firstname',
  lastname: 'lastname',
  phone: 'phone',
  userID: 'userID'
});

exports.Prisma.requestOrderByRelevanceFieldEnum = makeEnum({
  requestID: 'requestID',
  message: 'message',
  userID: 'userID',
  notificationID: 'notificationID'
});
exports.notificationStatus = makeEnum({
  read: 'read',
  unread: 'unread'
});

exports.orderStatus = makeEnum({
  refund: 'refund',
  approved: 'approved',
  declined: 'declined'
});

exports.productStatus = makeEnum({
  approved: 'approved',
  rejected: 'rejected',
  waiting: 'waiting'
});

exports.requestStatus = makeEnum({
  waiting: 'waiting',
  approved: 'approved',
  rejected: 'rejected'
});

exports.role = makeEnum({
  administrator: 'administrator',
  vendor: 'vendor'
});

exports.Prisma.ModelName = makeEnum({
  User: 'User',
  logs: 'logs',
  company: 'company',
  address: 'address',
  profile: 'profile',
  notification: 'notification',
  product: 'product',
  order: 'order',
  request: 'request',
  otp: 'otp'
});

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
