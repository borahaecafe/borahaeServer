
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends Prisma.PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model User
 * 
 */
export type User = {
  userID: string
  email: string
  password: string
  role: role
  createdAt: Date
  locked: boolean
}

/**
 * Model logs
 * 
 */
export type logs = {
  logsID: string
  log: string
  createdAt: Date
  userID: string | null
}

/**
 * Model company
 * 
 */
export type company = {
  companyID: string
  companyName: string
  userID: string
}

/**
 * Model address
 * 
 */
export type address = {
  addressID: string
  city: string
  street: string
  province: string
  zipcode: string
  companyID: string | null
}

/**
 * Model profile
 * 
 */
export type profile = {
  profileID: string
  firstname: string
  lastname: string
  birthday: Date
  phone: string
  userID: string | null
}

/**
 * Model notification
 * 
 */
export type notification = {
  notificationID: string
  title: string
  notificationStatus: notificationStatus
  createdAt: Date
  userID: string | null
}

/**
 * Model product
 * 
 */
export type product = {
  productID: string
  sku: string
  title: string
  price: number
  stock: number
  userID: string
  status: productStatus
  createdAt: Date
  notificationID: string | null
}

/**
 * Model order
 * 
 */
export type order = {
  orderID: string
  quantity: number
  total: number
  companyID: string
  payment: string
  status: orderStatus
  discount: number
  createdAt: Date
  userID: string
}

/**
 * Model request
 * 
 */
export type request = {
  requestID: string
  message: string
  quantity: number | null
  status: requestStatus
  createdAt: Date
  userID: string
  notificationID: string | null
}

/**
 * Model otp
 * 
 */
export type otp = {
  otID: string
  otp: string
  createdAt: Date
  expiredAt: Date
}


/**
 * Enums
 */

// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

export const notificationStatus: {
  read: 'read',
  unread: 'unread'
};

export type notificationStatus = (typeof notificationStatus)[keyof typeof notificationStatus]


export const orderStatus: {
  refund: 'refund',
  approved: 'approved',
  declined: 'declined'
};

export type orderStatus = (typeof orderStatus)[keyof typeof orderStatus]


export const productStatus: {
  approved: 'approved',
  rejected: 'rejected',
  waiting: 'waiting'
};

export type productStatus = (typeof productStatus)[keyof typeof productStatus]


export const requestStatus: {
  waiting: 'waiting',
  approved: 'approved',
  rejected: 'rejected'
};

export type requestStatus = (typeof requestStatus)[keyof typeof requestStatus]


export const role: {
  administrator: 'administrator',
  vendor: 'vendor'
};

export type role = (typeof role)[keyof typeof role]


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<this, "$connect" | "$disconnect" | "$on" | "$transaction" | "$use">) => Promise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<R>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<GlobalReject>;

  /**
   * `prisma.logs`: Exposes CRUD operations for the **logs** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Logs
    * const logs = await prisma.logs.findMany()
    * ```
    */
  get logs(): Prisma.logsDelegate<GlobalReject>;

  /**
   * `prisma.company`: Exposes CRUD operations for the **company** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Companies
    * const companies = await prisma.company.findMany()
    * ```
    */
  get company(): Prisma.companyDelegate<GlobalReject>;

  /**
   * `prisma.address`: Exposes CRUD operations for the **address** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Addresses
    * const addresses = await prisma.address.findMany()
    * ```
    */
  get address(): Prisma.addressDelegate<GlobalReject>;

  /**
   * `prisma.profile`: Exposes CRUD operations for the **profile** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Profiles
    * const profiles = await prisma.profile.findMany()
    * ```
    */
  get profile(): Prisma.profileDelegate<GlobalReject>;

  /**
   * `prisma.notification`: Exposes CRUD operations for the **notification** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Notifications
    * const notifications = await prisma.notification.findMany()
    * ```
    */
  get notification(): Prisma.notificationDelegate<GlobalReject>;

  /**
   * `prisma.product`: Exposes CRUD operations for the **product** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Products
    * const products = await prisma.product.findMany()
    * ```
    */
  get product(): Prisma.productDelegate<GlobalReject>;

  /**
   * `prisma.order`: Exposes CRUD operations for the **order** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Orders
    * const orders = await prisma.order.findMany()
    * ```
    */
  get order(): Prisma.orderDelegate<GlobalReject>;

  /**
   * `prisma.request`: Exposes CRUD operations for the **request** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Requests
    * const requests = await prisma.request.findMany()
    * ```
    */
  get request(): Prisma.requestDelegate<GlobalReject>;

  /**
   * `prisma.otp`: Exposes CRUD operations for the **otp** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Otps
    * const otps = await prisma.otp.findMany()
    * ```
    */
  get otp(): Prisma.otpDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket


  /**
   * Prisma Client JS version: 4.11.0
   * Query Engine version: 8fde8fef4033376662cad983758335009d522acb
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: runtime.Types.Utils.LegacyExact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    logs: 'logs',
    company: 'company',
    address: 'address',
    profile: 'profile',
    notification: 'notification',
    product: 'product',
    order: 'order',
    request: 'request',
    otp: 'otp'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type DefaultPrismaClient = PrismaClient
  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, '$connect' | '$disconnect' | '$on' | '$transaction' | '$use'>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */


  export type UserCountOutputType = {
    Products: number
    Order: number
    Profile: number
    Request: number
    Logs: number
    Notificaiton: number
    Company: number
  }

  export type UserCountOutputTypeSelect = {
    Products?: boolean
    Order?: boolean
    Profile?: boolean
    Request?: boolean
    Logs?: boolean
    Notificaiton?: boolean
    Company?: boolean
  }

  export type UserCountOutputTypeGetPayload<S extends boolean | null | undefined | UserCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? UserCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (UserCountOutputTypeArgs)
    ? UserCountOutputType 
    : S extends { select: any } & (UserCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof UserCountOutputType ? UserCountOutputType[P] : never
  } 
      : UserCountOutputType




  // Custom InputTypes

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect | null
  }



  /**
   * Count Type CompanyCountOutputType
   */


  export type CompanyCountOutputType = {
    Product: number
    companyAddress: number
    order: number
  }

  export type CompanyCountOutputTypeSelect = {
    Product?: boolean
    companyAddress?: boolean
    order?: boolean
  }

  export type CompanyCountOutputTypeGetPayload<S extends boolean | null | undefined | CompanyCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? CompanyCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (CompanyCountOutputTypeArgs)
    ? CompanyCountOutputType 
    : S extends { select: any } & (CompanyCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof CompanyCountOutputType ? CompanyCountOutputType[P] : never
  } 
      : CompanyCountOutputType




  // Custom InputTypes

  /**
   * CompanyCountOutputType without action
   */
  export type CompanyCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the CompanyCountOutputType
     */
    select?: CompanyCountOutputTypeSelect | null
  }



  /**
   * Count Type NotificationCountOutputType
   */


  export type NotificationCountOutputType = {
    Product: number
    Request: number
  }

  export type NotificationCountOutputTypeSelect = {
    Product?: boolean
    Request?: boolean
  }

  export type NotificationCountOutputTypeGetPayload<S extends boolean | null | undefined | NotificationCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? NotificationCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (NotificationCountOutputTypeArgs)
    ? NotificationCountOutputType 
    : S extends { select: any } & (NotificationCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof NotificationCountOutputType ? NotificationCountOutputType[P] : never
  } 
      : NotificationCountOutputType




  // Custom InputTypes

  /**
   * NotificationCountOutputType without action
   */
  export type NotificationCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the NotificationCountOutputType
     */
    select?: NotificationCountOutputTypeSelect | null
  }



  /**
   * Count Type ProductCountOutputType
   */


  export type ProductCountOutputType = {
    Company: number
    request: number
    order: number
  }

  export type ProductCountOutputTypeSelect = {
    Company?: boolean
    request?: boolean
    order?: boolean
  }

  export type ProductCountOutputTypeGetPayload<S extends boolean | null | undefined | ProductCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? ProductCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (ProductCountOutputTypeArgs)
    ? ProductCountOutputType 
    : S extends { select: any } & (ProductCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof ProductCountOutputType ? ProductCountOutputType[P] : never
  } 
      : ProductCountOutputType




  // Custom InputTypes

  /**
   * ProductCountOutputType without action
   */
  export type ProductCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the ProductCountOutputType
     */
    select?: ProductCountOutputTypeSelect | null
  }



  /**
   * Count Type OrderCountOutputType
   */


  export type OrderCountOutputType = {
    Product: number
  }

  export type OrderCountOutputTypeSelect = {
    Product?: boolean
  }

  export type OrderCountOutputTypeGetPayload<S extends boolean | null | undefined | OrderCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? OrderCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (OrderCountOutputTypeArgs)
    ? OrderCountOutputType 
    : S extends { select: any } & (OrderCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof OrderCountOutputType ? OrderCountOutputType[P] : never
  } 
      : OrderCountOutputType




  // Custom InputTypes

  /**
   * OrderCountOutputType without action
   */
  export type OrderCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the OrderCountOutputType
     */
    select?: OrderCountOutputTypeSelect | null
  }



  /**
   * Count Type RequestCountOutputType
   */


  export type RequestCountOutputType = {
    Product: number
  }

  export type RequestCountOutputTypeSelect = {
    Product?: boolean
  }

  export type RequestCountOutputTypeGetPayload<S extends boolean | null | undefined | RequestCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? RequestCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (RequestCountOutputTypeArgs)
    ? RequestCountOutputType 
    : S extends { select: any } & (RequestCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof RequestCountOutputType ? RequestCountOutputType[P] : never
  } 
      : RequestCountOutputType




  // Custom InputTypes

  /**
   * RequestCountOutputType without action
   */
  export type RequestCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the RequestCountOutputType
     */
    select?: RequestCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model User
   */


  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    userID: string | null
    email: string | null
    password: string | null
    role: role | null
    createdAt: Date | null
    locked: boolean | null
  }

  export type UserMaxAggregateOutputType = {
    userID: string | null
    email: string | null
    password: string | null
    role: role | null
    createdAt: Date | null
    locked: boolean | null
  }

  export type UserCountAggregateOutputType = {
    userID: number
    email: number
    password: number
    role: number
    createdAt: number
    locked: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    userID?: true
    email?: true
    password?: true
    role?: true
    createdAt?: true
    locked?: true
  }

  export type UserMaxAggregateInputType = {
    userID?: true
    email?: true
    password?: true
    role?: true
    createdAt?: true
    locked?: true
  }

  export type UserCountAggregateInputType = {
    userID?: true
    email?: true
    password?: true
    role?: true
    createdAt?: true
    locked?: true
    _all?: true
  }

  export type UserAggregateArgs = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs = {
    where?: UserWhereInput
    orderBy?: Enumerable<UserOrderByWithAggregationInput>
    by: UserScalarFieldEnum[]
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }


  export type UserGroupByOutputType = {
    userID: string
    email: string
    password: string
    role: role
    createdAt: Date
    locked: boolean
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect = {
    userID?: boolean
    email?: boolean
    password?: boolean
    role?: boolean
    createdAt?: boolean
    locked?: boolean
    Products?: boolean | User$ProductsArgs
    Order?: boolean | User$OrderArgs
    Profile?: boolean | User$ProfileArgs
    Request?: boolean | User$RequestArgs
    Logs?: boolean | User$LogsArgs
    Notificaiton?: boolean | User$NotificaitonArgs
    Company?: boolean | User$CompanyArgs
    _count?: boolean | UserCountOutputTypeArgs
  }


  export type UserInclude = {
    Products?: boolean | User$ProductsArgs
    Order?: boolean | User$OrderArgs
    Profile?: boolean | User$ProfileArgs
    Request?: boolean | User$RequestArgs
    Logs?: boolean | User$LogsArgs
    Notificaiton?: boolean | User$NotificaitonArgs
    Company?: boolean | User$CompanyArgs
    _count?: boolean | UserCountOutputTypeArgs
  }

  export type UserGetPayload<S extends boolean | null | undefined | UserArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? User :
    S extends undefined ? never :
    S extends { include: any } & (UserArgs | UserFindManyArgs)
    ? User  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'Products' ? Array < productGetPayload<S['include'][P]>>  :
        P extends 'Order' ? Array < orderGetPayload<S['include'][P]>>  :
        P extends 'Profile' ? Array < profileGetPayload<S['include'][P]>>  :
        P extends 'Request' ? Array < requestGetPayload<S['include'][P]>>  :
        P extends 'Logs' ? Array < logsGetPayload<S['include'][P]>>  :
        P extends 'Notificaiton' ? Array < notificationGetPayload<S['include'][P]>>  :
        P extends 'Company' ? Array < companyGetPayload<S['include'][P]>>  :
        P extends '_count' ? UserCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (UserArgs | UserFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'Products' ? Array < productGetPayload<S['select'][P]>>  :
        P extends 'Order' ? Array < orderGetPayload<S['select'][P]>>  :
        P extends 'Profile' ? Array < profileGetPayload<S['select'][P]>>  :
        P extends 'Request' ? Array < requestGetPayload<S['select'][P]>>  :
        P extends 'Logs' ? Array < logsGetPayload<S['select'][P]>>  :
        P extends 'Notificaiton' ? Array < notificationGetPayload<S['select'][P]>>  :
        P extends 'Company' ? Array < companyGetPayload<S['select'][P]>>  :
        P extends '_count' ? UserCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof User ? User[P] : never
  } 
      : User


  type UserCountArgs = 
    Omit<UserFindManyArgs, 'select' | 'include'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UserFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'User'> extends True ? Prisma__UserClient<UserGetPayload<T>> : Prisma__UserClient<UserGetPayload<T> | null, null>

    /**
     * Find one User that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, UserFindUniqueOrThrowArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UserFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'User'> extends True ? Prisma__UserClient<UserGetPayload<T>> : Prisma__UserClient<UserGetPayload<T> | null, null>

    /**
     * Find the first User that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(
      args?: SelectSubset<T, UserFindFirstOrThrowArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `userID`
     * const userWithUserIDOnly = await prisma.user.findMany({ select: { userID: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs>(
      args?: SelectSubset<T, UserFindManyArgs>
    ): Prisma.PrismaPromise<Array<UserGetPayload<T>>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs>(
      args: SelectSubset<T, UserCreateArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Create many Users.
     *     @param {UserCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCreateManyArgs>(
      args?: SelectSubset<T, UserCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs>(
      args: SelectSubset<T, UserDeleteArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs>(
      args: SelectSubset<T, UserUpdateArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs>(
      args?: SelectSubset<T, UserDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs>(
      args: SelectSubset<T, UserUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs>(
      args: SelectSubset<T, UserUpsertArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    Products<T extends User$ProductsArgs= {}>(args?: Subset<T, User$ProductsArgs>): Prisma.PrismaPromise<Array<productGetPayload<T>>| Null>;

    Order<T extends User$OrderArgs= {}>(args?: Subset<T, User$OrderArgs>): Prisma.PrismaPromise<Array<orderGetPayload<T>>| Null>;

    Profile<T extends User$ProfileArgs= {}>(args?: Subset<T, User$ProfileArgs>): Prisma.PrismaPromise<Array<profileGetPayload<T>>| Null>;

    Request<T extends User$RequestArgs= {}>(args?: Subset<T, User$RequestArgs>): Prisma.PrismaPromise<Array<requestGetPayload<T>>| Null>;

    Logs<T extends User$LogsArgs= {}>(args?: Subset<T, User$LogsArgs>): Prisma.PrismaPromise<Array<logsGetPayload<T>>| Null>;

    Notificaiton<T extends User$NotificaitonArgs= {}>(args?: Subset<T, User$NotificaitonArgs>): Prisma.PrismaPromise<Array<notificationGetPayload<T>>| Null>;

    Company<T extends User$CompanyArgs= {}>(args?: Subset<T, User$CompanyArgs>): Prisma.PrismaPromise<Array<companyGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * User base type for findUnique actions
   */
  export type UserFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUnique
   */
  export interface UserFindUniqueArgs extends UserFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User base type for findFirst actions
   */
  export type UserFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: Enumerable<UserScalarFieldEnum>
  }

  /**
   * User findFirst
   */
  export interface UserFindFirstArgs extends UserFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User findMany
   */
  export type UserFindManyArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User create
   */
  export type UserCreateArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User createMany
   */
  export type UserCreateManyArgs = {
    /**
     * The data used to create many Users.
     */
    data: Enumerable<UserCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * User update
   */
  export type UserUpdateArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }


  /**
   * User.Products
   */
  export type User$ProductsArgs = {
    /**
     * Select specific fields to fetch from the product
     */
    select?: productSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productInclude | null
    where?: productWhereInput
    orderBy?: Enumerable<productOrderByWithRelationAndSearchRelevanceInput>
    cursor?: productWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ProductScalarFieldEnum>
  }


  /**
   * User.Order
   */
  export type User$OrderArgs = {
    /**
     * Select specific fields to fetch from the order
     */
    select?: orderSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: orderInclude | null
    where?: orderWhereInput
    orderBy?: Enumerable<orderOrderByWithRelationAndSearchRelevanceInput>
    cursor?: orderWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<OrderScalarFieldEnum>
  }


  /**
   * User.Profile
   */
  export type User$ProfileArgs = {
    /**
     * Select specific fields to fetch from the profile
     */
    select?: profileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: profileInclude | null
    where?: profileWhereInput
    orderBy?: Enumerable<profileOrderByWithRelationAndSearchRelevanceInput>
    cursor?: profileWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ProfileScalarFieldEnum>
  }


  /**
   * User.Request
   */
  export type User$RequestArgs = {
    /**
     * Select specific fields to fetch from the request
     */
    select?: requestSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: requestInclude | null
    where?: requestWhereInput
    orderBy?: Enumerable<requestOrderByWithRelationAndSearchRelevanceInput>
    cursor?: requestWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<RequestScalarFieldEnum>
  }


  /**
   * User.Logs
   */
  export type User$LogsArgs = {
    /**
     * Select specific fields to fetch from the logs
     */
    select?: logsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: logsInclude | null
    where?: logsWhereInput
    orderBy?: Enumerable<logsOrderByWithRelationAndSearchRelevanceInput>
    cursor?: logsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<LogsScalarFieldEnum>
  }


  /**
   * User.Notificaiton
   */
  export type User$NotificaitonArgs = {
    /**
     * Select specific fields to fetch from the notification
     */
    select?: notificationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: notificationInclude | null
    where?: notificationWhereInput
    orderBy?: Enumerable<notificationOrderByWithRelationAndSearchRelevanceInput>
    cursor?: notificationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<NotificationScalarFieldEnum>
  }


  /**
   * User.Company
   */
  export type User$CompanyArgs = {
    /**
     * Select specific fields to fetch from the company
     */
    select?: companySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: companyInclude | null
    where?: companyWhereInput
    orderBy?: Enumerable<companyOrderByWithRelationAndSearchRelevanceInput>
    cursor?: companyWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<CompanyScalarFieldEnum>
  }


  /**
   * User without action
   */
  export type UserArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
  }



  /**
   * Model logs
   */


  export type AggregateLogs = {
    _count: LogsCountAggregateOutputType | null
    _min: LogsMinAggregateOutputType | null
    _max: LogsMaxAggregateOutputType | null
  }

  export type LogsMinAggregateOutputType = {
    logsID: string | null
    log: string | null
    createdAt: Date | null
    userID: string | null
  }

  export type LogsMaxAggregateOutputType = {
    logsID: string | null
    log: string | null
    createdAt: Date | null
    userID: string | null
  }

  export type LogsCountAggregateOutputType = {
    logsID: number
    log: number
    createdAt: number
    userID: number
    _all: number
  }


  export type LogsMinAggregateInputType = {
    logsID?: true
    log?: true
    createdAt?: true
    userID?: true
  }

  export type LogsMaxAggregateInputType = {
    logsID?: true
    log?: true
    createdAt?: true
    userID?: true
  }

  export type LogsCountAggregateInputType = {
    logsID?: true
    log?: true
    createdAt?: true
    userID?: true
    _all?: true
  }

  export type LogsAggregateArgs = {
    /**
     * Filter which logs to aggregate.
     */
    where?: logsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of logs to fetch.
     */
    orderBy?: Enumerable<logsOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: logsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` logs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` logs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned logs
    **/
    _count?: true | LogsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LogsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LogsMaxAggregateInputType
  }

  export type GetLogsAggregateType<T extends LogsAggregateArgs> = {
        [P in keyof T & keyof AggregateLogs]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLogs[P]>
      : GetScalarType<T[P], AggregateLogs[P]>
  }




  export type LogsGroupByArgs = {
    where?: logsWhereInput
    orderBy?: Enumerable<logsOrderByWithAggregationInput>
    by: LogsScalarFieldEnum[]
    having?: logsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LogsCountAggregateInputType | true
    _min?: LogsMinAggregateInputType
    _max?: LogsMaxAggregateInputType
  }


  export type LogsGroupByOutputType = {
    logsID: string
    log: string
    createdAt: Date
    userID: string | null
    _count: LogsCountAggregateOutputType | null
    _min: LogsMinAggregateOutputType | null
    _max: LogsMaxAggregateOutputType | null
  }

  type GetLogsGroupByPayload<T extends LogsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<LogsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LogsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LogsGroupByOutputType[P]>
            : GetScalarType<T[P], LogsGroupByOutputType[P]>
        }
      >
    >


  export type logsSelect = {
    logsID?: boolean
    log?: boolean
    createdAt?: boolean
    userID?: boolean
    User?: boolean | UserArgs
  }


  export type logsInclude = {
    User?: boolean | UserArgs
  }

  export type logsGetPayload<S extends boolean | null | undefined | logsArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? logs :
    S extends undefined ? never :
    S extends { include: any } & (logsArgs | logsFindManyArgs)
    ? logs  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'User' ? UserGetPayload<S['include'][P]> | null :  never
  } 
    : S extends { select: any } & (logsArgs | logsFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'User' ? UserGetPayload<S['select'][P]> | null :  P extends keyof logs ? logs[P] : never
  } 
      : logs


  type logsCountArgs = 
    Omit<logsFindManyArgs, 'select' | 'include'> & {
      select?: LogsCountAggregateInputType | true
    }

  export interface logsDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Logs that matches the filter.
     * @param {logsFindUniqueArgs} args - Arguments to find a Logs
     * @example
     * // Get one Logs
     * const logs = await prisma.logs.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends logsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, logsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'logs'> extends True ? Prisma__logsClient<logsGetPayload<T>> : Prisma__logsClient<logsGetPayload<T> | null, null>

    /**
     * Find one Logs that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {logsFindUniqueOrThrowArgs} args - Arguments to find a Logs
     * @example
     * // Get one Logs
     * const logs = await prisma.logs.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends logsFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, logsFindUniqueOrThrowArgs>
    ): Prisma__logsClient<logsGetPayload<T>>

    /**
     * Find the first Logs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {logsFindFirstArgs} args - Arguments to find a Logs
     * @example
     * // Get one Logs
     * const logs = await prisma.logs.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends logsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, logsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'logs'> extends True ? Prisma__logsClient<logsGetPayload<T>> : Prisma__logsClient<logsGetPayload<T> | null, null>

    /**
     * Find the first Logs that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {logsFindFirstOrThrowArgs} args - Arguments to find a Logs
     * @example
     * // Get one Logs
     * const logs = await prisma.logs.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends logsFindFirstOrThrowArgs>(
      args?: SelectSubset<T, logsFindFirstOrThrowArgs>
    ): Prisma__logsClient<logsGetPayload<T>>

    /**
     * Find zero or more Logs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {logsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Logs
     * const logs = await prisma.logs.findMany()
     * 
     * // Get first 10 Logs
     * const logs = await prisma.logs.findMany({ take: 10 })
     * 
     * // Only select the `logsID`
     * const logsWithLogsIDOnly = await prisma.logs.findMany({ select: { logsID: true } })
     * 
    **/
    findMany<T extends logsFindManyArgs>(
      args?: SelectSubset<T, logsFindManyArgs>
    ): Prisma.PrismaPromise<Array<logsGetPayload<T>>>

    /**
     * Create a Logs.
     * @param {logsCreateArgs} args - Arguments to create a Logs.
     * @example
     * // Create one Logs
     * const Logs = await prisma.logs.create({
     *   data: {
     *     // ... data to create a Logs
     *   }
     * })
     * 
    **/
    create<T extends logsCreateArgs>(
      args: SelectSubset<T, logsCreateArgs>
    ): Prisma__logsClient<logsGetPayload<T>>

    /**
     * Create many Logs.
     *     @param {logsCreateManyArgs} args - Arguments to create many Logs.
     *     @example
     *     // Create many Logs
     *     const logs = await prisma.logs.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends logsCreateManyArgs>(
      args?: SelectSubset<T, logsCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Logs.
     * @param {logsDeleteArgs} args - Arguments to delete one Logs.
     * @example
     * // Delete one Logs
     * const Logs = await prisma.logs.delete({
     *   where: {
     *     // ... filter to delete one Logs
     *   }
     * })
     * 
    **/
    delete<T extends logsDeleteArgs>(
      args: SelectSubset<T, logsDeleteArgs>
    ): Prisma__logsClient<logsGetPayload<T>>

    /**
     * Update one Logs.
     * @param {logsUpdateArgs} args - Arguments to update one Logs.
     * @example
     * // Update one Logs
     * const logs = await prisma.logs.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends logsUpdateArgs>(
      args: SelectSubset<T, logsUpdateArgs>
    ): Prisma__logsClient<logsGetPayload<T>>

    /**
     * Delete zero or more Logs.
     * @param {logsDeleteManyArgs} args - Arguments to filter Logs to delete.
     * @example
     * // Delete a few Logs
     * const { count } = await prisma.logs.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends logsDeleteManyArgs>(
      args?: SelectSubset<T, logsDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Logs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {logsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Logs
     * const logs = await prisma.logs.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends logsUpdateManyArgs>(
      args: SelectSubset<T, logsUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Logs.
     * @param {logsUpsertArgs} args - Arguments to update or create a Logs.
     * @example
     * // Update or create a Logs
     * const logs = await prisma.logs.upsert({
     *   create: {
     *     // ... data to create a Logs
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Logs we want to update
     *   }
     * })
    **/
    upsert<T extends logsUpsertArgs>(
      args: SelectSubset<T, logsUpsertArgs>
    ): Prisma__logsClient<logsGetPayload<T>>

    /**
     * Count the number of Logs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {logsCountArgs} args - Arguments to filter Logs to count.
     * @example
     * // Count the number of Logs
     * const count = await prisma.logs.count({
     *   where: {
     *     // ... the filter for the Logs we want to count
     *   }
     * })
    **/
    count<T extends logsCountArgs>(
      args?: Subset<T, logsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LogsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Logs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LogsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LogsAggregateArgs>(args: Subset<T, LogsAggregateArgs>): Prisma.PrismaPromise<GetLogsAggregateType<T>>

    /**
     * Group by Logs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LogsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LogsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LogsGroupByArgs['orderBy'] }
        : { orderBy?: LogsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LogsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLogsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for logs.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__logsClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    User<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * logs base type for findUnique actions
   */
  export type logsFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the logs
     */
    select?: logsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: logsInclude | null
    /**
     * Filter, which logs to fetch.
     */
    where: logsWhereUniqueInput
  }

  /**
   * logs findUnique
   */
  export interface logsFindUniqueArgs extends logsFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * logs findUniqueOrThrow
   */
  export type logsFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the logs
     */
    select?: logsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: logsInclude | null
    /**
     * Filter, which logs to fetch.
     */
    where: logsWhereUniqueInput
  }


  /**
   * logs base type for findFirst actions
   */
  export type logsFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the logs
     */
    select?: logsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: logsInclude | null
    /**
     * Filter, which logs to fetch.
     */
    where?: logsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of logs to fetch.
     */
    orderBy?: Enumerable<logsOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for logs.
     */
    cursor?: logsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` logs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` logs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of logs.
     */
    distinct?: Enumerable<LogsScalarFieldEnum>
  }

  /**
   * logs findFirst
   */
  export interface logsFindFirstArgs extends logsFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * logs findFirstOrThrow
   */
  export type logsFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the logs
     */
    select?: logsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: logsInclude | null
    /**
     * Filter, which logs to fetch.
     */
    where?: logsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of logs to fetch.
     */
    orderBy?: Enumerable<logsOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for logs.
     */
    cursor?: logsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` logs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` logs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of logs.
     */
    distinct?: Enumerable<LogsScalarFieldEnum>
  }


  /**
   * logs findMany
   */
  export type logsFindManyArgs = {
    /**
     * Select specific fields to fetch from the logs
     */
    select?: logsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: logsInclude | null
    /**
     * Filter, which logs to fetch.
     */
    where?: logsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of logs to fetch.
     */
    orderBy?: Enumerable<logsOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing logs.
     */
    cursor?: logsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` logs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` logs.
     */
    skip?: number
    distinct?: Enumerable<LogsScalarFieldEnum>
  }


  /**
   * logs create
   */
  export type logsCreateArgs = {
    /**
     * Select specific fields to fetch from the logs
     */
    select?: logsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: logsInclude | null
    /**
     * The data needed to create a logs.
     */
    data: XOR<logsCreateInput, logsUncheckedCreateInput>
  }


  /**
   * logs createMany
   */
  export type logsCreateManyArgs = {
    /**
     * The data used to create many logs.
     */
    data: Enumerable<logsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * logs update
   */
  export type logsUpdateArgs = {
    /**
     * Select specific fields to fetch from the logs
     */
    select?: logsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: logsInclude | null
    /**
     * The data needed to update a logs.
     */
    data: XOR<logsUpdateInput, logsUncheckedUpdateInput>
    /**
     * Choose, which logs to update.
     */
    where: logsWhereUniqueInput
  }


  /**
   * logs updateMany
   */
  export type logsUpdateManyArgs = {
    /**
     * The data used to update logs.
     */
    data: XOR<logsUpdateManyMutationInput, logsUncheckedUpdateManyInput>
    /**
     * Filter which logs to update
     */
    where?: logsWhereInput
  }


  /**
   * logs upsert
   */
  export type logsUpsertArgs = {
    /**
     * Select specific fields to fetch from the logs
     */
    select?: logsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: logsInclude | null
    /**
     * The filter to search for the logs to update in case it exists.
     */
    where: logsWhereUniqueInput
    /**
     * In case the logs found by the `where` argument doesn't exist, create a new logs with this data.
     */
    create: XOR<logsCreateInput, logsUncheckedCreateInput>
    /**
     * In case the logs was found with the provided `where` argument, update it with this data.
     */
    update: XOR<logsUpdateInput, logsUncheckedUpdateInput>
  }


  /**
   * logs delete
   */
  export type logsDeleteArgs = {
    /**
     * Select specific fields to fetch from the logs
     */
    select?: logsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: logsInclude | null
    /**
     * Filter which logs to delete.
     */
    where: logsWhereUniqueInput
  }


  /**
   * logs deleteMany
   */
  export type logsDeleteManyArgs = {
    /**
     * Filter which logs to delete
     */
    where?: logsWhereInput
  }


  /**
   * logs without action
   */
  export type logsArgs = {
    /**
     * Select specific fields to fetch from the logs
     */
    select?: logsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: logsInclude | null
  }



  /**
   * Model company
   */


  export type AggregateCompany = {
    _count: CompanyCountAggregateOutputType | null
    _min: CompanyMinAggregateOutputType | null
    _max: CompanyMaxAggregateOutputType | null
  }

  export type CompanyMinAggregateOutputType = {
    companyID: string | null
    companyName: string | null
    userID: string | null
  }

  export type CompanyMaxAggregateOutputType = {
    companyID: string | null
    companyName: string | null
    userID: string | null
  }

  export type CompanyCountAggregateOutputType = {
    companyID: number
    companyName: number
    userID: number
    _all: number
  }


  export type CompanyMinAggregateInputType = {
    companyID?: true
    companyName?: true
    userID?: true
  }

  export type CompanyMaxAggregateInputType = {
    companyID?: true
    companyName?: true
    userID?: true
  }

  export type CompanyCountAggregateInputType = {
    companyID?: true
    companyName?: true
    userID?: true
    _all?: true
  }

  export type CompanyAggregateArgs = {
    /**
     * Filter which company to aggregate.
     */
    where?: companyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of companies to fetch.
     */
    orderBy?: Enumerable<companyOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: companyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` companies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` companies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned companies
    **/
    _count?: true | CompanyCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CompanyMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CompanyMaxAggregateInputType
  }

  export type GetCompanyAggregateType<T extends CompanyAggregateArgs> = {
        [P in keyof T & keyof AggregateCompany]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCompany[P]>
      : GetScalarType<T[P], AggregateCompany[P]>
  }




  export type CompanyGroupByArgs = {
    where?: companyWhereInput
    orderBy?: Enumerable<companyOrderByWithAggregationInput>
    by: CompanyScalarFieldEnum[]
    having?: companyScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CompanyCountAggregateInputType | true
    _min?: CompanyMinAggregateInputType
    _max?: CompanyMaxAggregateInputType
  }


  export type CompanyGroupByOutputType = {
    companyID: string
    companyName: string
    userID: string
    _count: CompanyCountAggregateOutputType | null
    _min: CompanyMinAggregateOutputType | null
    _max: CompanyMaxAggregateOutputType | null
  }

  type GetCompanyGroupByPayload<T extends CompanyGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<CompanyGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CompanyGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CompanyGroupByOutputType[P]>
            : GetScalarType<T[P], CompanyGroupByOutputType[P]>
        }
      >
    >


  export type companySelect = {
    companyID?: boolean
    companyName?: boolean
    userID?: boolean
    User?: boolean | UserArgs
    Product?: boolean | company$ProductArgs
    companyAddress?: boolean | company$companyAddressArgs
    order?: boolean | company$orderArgs
    _count?: boolean | CompanyCountOutputTypeArgs
  }


  export type companyInclude = {
    User?: boolean | UserArgs
    Product?: boolean | company$ProductArgs
    companyAddress?: boolean | company$companyAddressArgs
    order?: boolean | company$orderArgs
    _count?: boolean | CompanyCountOutputTypeArgs
  }

  export type companyGetPayload<S extends boolean | null | undefined | companyArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? company :
    S extends undefined ? never :
    S extends { include: any } & (companyArgs | companyFindManyArgs)
    ? company  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'User' ? UserGetPayload<S['include'][P]> :
        P extends 'Product' ? Array < productGetPayload<S['include'][P]>>  :
        P extends 'companyAddress' ? Array < addressGetPayload<S['include'][P]>>  :
        P extends 'order' ? Array < orderGetPayload<S['include'][P]>>  :
        P extends '_count' ? CompanyCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (companyArgs | companyFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'User' ? UserGetPayload<S['select'][P]> :
        P extends 'Product' ? Array < productGetPayload<S['select'][P]>>  :
        P extends 'companyAddress' ? Array < addressGetPayload<S['select'][P]>>  :
        P extends 'order' ? Array < orderGetPayload<S['select'][P]>>  :
        P extends '_count' ? CompanyCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof company ? company[P] : never
  } 
      : company


  type companyCountArgs = 
    Omit<companyFindManyArgs, 'select' | 'include'> & {
      select?: CompanyCountAggregateInputType | true
    }

  export interface companyDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Company that matches the filter.
     * @param {companyFindUniqueArgs} args - Arguments to find a Company
     * @example
     * // Get one Company
     * const company = await prisma.company.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends companyFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, companyFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'company'> extends True ? Prisma__companyClient<companyGetPayload<T>> : Prisma__companyClient<companyGetPayload<T> | null, null>

    /**
     * Find one Company that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {companyFindUniqueOrThrowArgs} args - Arguments to find a Company
     * @example
     * // Get one Company
     * const company = await prisma.company.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends companyFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, companyFindUniqueOrThrowArgs>
    ): Prisma__companyClient<companyGetPayload<T>>

    /**
     * Find the first Company that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {companyFindFirstArgs} args - Arguments to find a Company
     * @example
     * // Get one Company
     * const company = await prisma.company.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends companyFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, companyFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'company'> extends True ? Prisma__companyClient<companyGetPayload<T>> : Prisma__companyClient<companyGetPayload<T> | null, null>

    /**
     * Find the first Company that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {companyFindFirstOrThrowArgs} args - Arguments to find a Company
     * @example
     * // Get one Company
     * const company = await prisma.company.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends companyFindFirstOrThrowArgs>(
      args?: SelectSubset<T, companyFindFirstOrThrowArgs>
    ): Prisma__companyClient<companyGetPayload<T>>

    /**
     * Find zero or more Companies that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {companyFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Companies
     * const companies = await prisma.company.findMany()
     * 
     * // Get first 10 Companies
     * const companies = await prisma.company.findMany({ take: 10 })
     * 
     * // Only select the `companyID`
     * const companyWithCompanyIDOnly = await prisma.company.findMany({ select: { companyID: true } })
     * 
    **/
    findMany<T extends companyFindManyArgs>(
      args?: SelectSubset<T, companyFindManyArgs>
    ): Prisma.PrismaPromise<Array<companyGetPayload<T>>>

    /**
     * Create a Company.
     * @param {companyCreateArgs} args - Arguments to create a Company.
     * @example
     * // Create one Company
     * const Company = await prisma.company.create({
     *   data: {
     *     // ... data to create a Company
     *   }
     * })
     * 
    **/
    create<T extends companyCreateArgs>(
      args: SelectSubset<T, companyCreateArgs>
    ): Prisma__companyClient<companyGetPayload<T>>

    /**
     * Create many Companies.
     *     @param {companyCreateManyArgs} args - Arguments to create many Companies.
     *     @example
     *     // Create many Companies
     *     const company = await prisma.company.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends companyCreateManyArgs>(
      args?: SelectSubset<T, companyCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Company.
     * @param {companyDeleteArgs} args - Arguments to delete one Company.
     * @example
     * // Delete one Company
     * const Company = await prisma.company.delete({
     *   where: {
     *     // ... filter to delete one Company
     *   }
     * })
     * 
    **/
    delete<T extends companyDeleteArgs>(
      args: SelectSubset<T, companyDeleteArgs>
    ): Prisma__companyClient<companyGetPayload<T>>

    /**
     * Update one Company.
     * @param {companyUpdateArgs} args - Arguments to update one Company.
     * @example
     * // Update one Company
     * const company = await prisma.company.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends companyUpdateArgs>(
      args: SelectSubset<T, companyUpdateArgs>
    ): Prisma__companyClient<companyGetPayload<T>>

    /**
     * Delete zero or more Companies.
     * @param {companyDeleteManyArgs} args - Arguments to filter Companies to delete.
     * @example
     * // Delete a few Companies
     * const { count } = await prisma.company.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends companyDeleteManyArgs>(
      args?: SelectSubset<T, companyDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Companies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {companyUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Companies
     * const company = await prisma.company.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends companyUpdateManyArgs>(
      args: SelectSubset<T, companyUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Company.
     * @param {companyUpsertArgs} args - Arguments to update or create a Company.
     * @example
     * // Update or create a Company
     * const company = await prisma.company.upsert({
     *   create: {
     *     // ... data to create a Company
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Company we want to update
     *   }
     * })
    **/
    upsert<T extends companyUpsertArgs>(
      args: SelectSubset<T, companyUpsertArgs>
    ): Prisma__companyClient<companyGetPayload<T>>

    /**
     * Count the number of Companies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {companyCountArgs} args - Arguments to filter Companies to count.
     * @example
     * // Count the number of Companies
     * const count = await prisma.company.count({
     *   where: {
     *     // ... the filter for the Companies we want to count
     *   }
     * })
    **/
    count<T extends companyCountArgs>(
      args?: Subset<T, companyCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CompanyCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Company.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CompanyAggregateArgs>(args: Subset<T, CompanyAggregateArgs>): Prisma.PrismaPromise<GetCompanyAggregateType<T>>

    /**
     * Group by Company.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CompanyGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CompanyGroupByArgs['orderBy'] }
        : { orderBy?: CompanyGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CompanyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCompanyGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for company.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__companyClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    User<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    Product<T extends company$ProductArgs= {}>(args?: Subset<T, company$ProductArgs>): Prisma.PrismaPromise<Array<productGetPayload<T>>| Null>;

    companyAddress<T extends company$companyAddressArgs= {}>(args?: Subset<T, company$companyAddressArgs>): Prisma.PrismaPromise<Array<addressGetPayload<T>>| Null>;

    order<T extends company$orderArgs= {}>(args?: Subset<T, company$orderArgs>): Prisma.PrismaPromise<Array<orderGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * company base type for findUnique actions
   */
  export type companyFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the company
     */
    select?: companySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: companyInclude | null
    /**
     * Filter, which company to fetch.
     */
    where: companyWhereUniqueInput
  }

  /**
   * company findUnique
   */
  export interface companyFindUniqueArgs extends companyFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * company findUniqueOrThrow
   */
  export type companyFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the company
     */
    select?: companySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: companyInclude | null
    /**
     * Filter, which company to fetch.
     */
    where: companyWhereUniqueInput
  }


  /**
   * company base type for findFirst actions
   */
  export type companyFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the company
     */
    select?: companySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: companyInclude | null
    /**
     * Filter, which company to fetch.
     */
    where?: companyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of companies to fetch.
     */
    orderBy?: Enumerable<companyOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for companies.
     */
    cursor?: companyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` companies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` companies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of companies.
     */
    distinct?: Enumerable<CompanyScalarFieldEnum>
  }

  /**
   * company findFirst
   */
  export interface companyFindFirstArgs extends companyFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * company findFirstOrThrow
   */
  export type companyFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the company
     */
    select?: companySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: companyInclude | null
    /**
     * Filter, which company to fetch.
     */
    where?: companyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of companies to fetch.
     */
    orderBy?: Enumerable<companyOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for companies.
     */
    cursor?: companyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` companies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` companies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of companies.
     */
    distinct?: Enumerable<CompanyScalarFieldEnum>
  }


  /**
   * company findMany
   */
  export type companyFindManyArgs = {
    /**
     * Select specific fields to fetch from the company
     */
    select?: companySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: companyInclude | null
    /**
     * Filter, which companies to fetch.
     */
    where?: companyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of companies to fetch.
     */
    orderBy?: Enumerable<companyOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing companies.
     */
    cursor?: companyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` companies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` companies.
     */
    skip?: number
    distinct?: Enumerable<CompanyScalarFieldEnum>
  }


  /**
   * company create
   */
  export type companyCreateArgs = {
    /**
     * Select specific fields to fetch from the company
     */
    select?: companySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: companyInclude | null
    /**
     * The data needed to create a company.
     */
    data: XOR<companyCreateInput, companyUncheckedCreateInput>
  }


  /**
   * company createMany
   */
  export type companyCreateManyArgs = {
    /**
     * The data used to create many companies.
     */
    data: Enumerable<companyCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * company update
   */
  export type companyUpdateArgs = {
    /**
     * Select specific fields to fetch from the company
     */
    select?: companySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: companyInclude | null
    /**
     * The data needed to update a company.
     */
    data: XOR<companyUpdateInput, companyUncheckedUpdateInput>
    /**
     * Choose, which company to update.
     */
    where: companyWhereUniqueInput
  }


  /**
   * company updateMany
   */
  export type companyUpdateManyArgs = {
    /**
     * The data used to update companies.
     */
    data: XOR<companyUpdateManyMutationInput, companyUncheckedUpdateManyInput>
    /**
     * Filter which companies to update
     */
    where?: companyWhereInput
  }


  /**
   * company upsert
   */
  export type companyUpsertArgs = {
    /**
     * Select specific fields to fetch from the company
     */
    select?: companySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: companyInclude | null
    /**
     * The filter to search for the company to update in case it exists.
     */
    where: companyWhereUniqueInput
    /**
     * In case the company found by the `where` argument doesn't exist, create a new company with this data.
     */
    create: XOR<companyCreateInput, companyUncheckedCreateInput>
    /**
     * In case the company was found with the provided `where` argument, update it with this data.
     */
    update: XOR<companyUpdateInput, companyUncheckedUpdateInput>
  }


  /**
   * company delete
   */
  export type companyDeleteArgs = {
    /**
     * Select specific fields to fetch from the company
     */
    select?: companySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: companyInclude | null
    /**
     * Filter which company to delete.
     */
    where: companyWhereUniqueInput
  }


  /**
   * company deleteMany
   */
  export type companyDeleteManyArgs = {
    /**
     * Filter which companies to delete
     */
    where?: companyWhereInput
  }


  /**
   * company.Product
   */
  export type company$ProductArgs = {
    /**
     * Select specific fields to fetch from the product
     */
    select?: productSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productInclude | null
    where?: productWhereInput
    orderBy?: Enumerable<productOrderByWithRelationAndSearchRelevanceInput>
    cursor?: productWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ProductScalarFieldEnum>
  }


  /**
   * company.companyAddress
   */
  export type company$companyAddressArgs = {
    /**
     * Select specific fields to fetch from the address
     */
    select?: addressSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: addressInclude | null
    where?: addressWhereInput
    orderBy?: Enumerable<addressOrderByWithRelationAndSearchRelevanceInput>
    cursor?: addressWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<AddressScalarFieldEnum>
  }


  /**
   * company.order
   */
  export type company$orderArgs = {
    /**
     * Select specific fields to fetch from the order
     */
    select?: orderSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: orderInclude | null
    where?: orderWhereInput
    orderBy?: Enumerable<orderOrderByWithRelationAndSearchRelevanceInput>
    cursor?: orderWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<OrderScalarFieldEnum>
  }


  /**
   * company without action
   */
  export type companyArgs = {
    /**
     * Select specific fields to fetch from the company
     */
    select?: companySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: companyInclude | null
  }



  /**
   * Model address
   */


  export type AggregateAddress = {
    _count: AddressCountAggregateOutputType | null
    _min: AddressMinAggregateOutputType | null
    _max: AddressMaxAggregateOutputType | null
  }

  export type AddressMinAggregateOutputType = {
    addressID: string | null
    city: string | null
    street: string | null
    province: string | null
    zipcode: string | null
    companyID: string | null
  }

  export type AddressMaxAggregateOutputType = {
    addressID: string | null
    city: string | null
    street: string | null
    province: string | null
    zipcode: string | null
    companyID: string | null
  }

  export type AddressCountAggregateOutputType = {
    addressID: number
    city: number
    street: number
    province: number
    zipcode: number
    companyID: number
    _all: number
  }


  export type AddressMinAggregateInputType = {
    addressID?: true
    city?: true
    street?: true
    province?: true
    zipcode?: true
    companyID?: true
  }

  export type AddressMaxAggregateInputType = {
    addressID?: true
    city?: true
    street?: true
    province?: true
    zipcode?: true
    companyID?: true
  }

  export type AddressCountAggregateInputType = {
    addressID?: true
    city?: true
    street?: true
    province?: true
    zipcode?: true
    companyID?: true
    _all?: true
  }

  export type AddressAggregateArgs = {
    /**
     * Filter which address to aggregate.
     */
    where?: addressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of addresses to fetch.
     */
    orderBy?: Enumerable<addressOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: addressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` addresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` addresses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned addresses
    **/
    _count?: true | AddressCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AddressMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AddressMaxAggregateInputType
  }

  export type GetAddressAggregateType<T extends AddressAggregateArgs> = {
        [P in keyof T & keyof AggregateAddress]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAddress[P]>
      : GetScalarType<T[P], AggregateAddress[P]>
  }




  export type AddressGroupByArgs = {
    where?: addressWhereInput
    orderBy?: Enumerable<addressOrderByWithAggregationInput>
    by: AddressScalarFieldEnum[]
    having?: addressScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AddressCountAggregateInputType | true
    _min?: AddressMinAggregateInputType
    _max?: AddressMaxAggregateInputType
  }


  export type AddressGroupByOutputType = {
    addressID: string
    city: string
    street: string
    province: string
    zipcode: string
    companyID: string | null
    _count: AddressCountAggregateOutputType | null
    _min: AddressMinAggregateOutputType | null
    _max: AddressMaxAggregateOutputType | null
  }

  type GetAddressGroupByPayload<T extends AddressGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<AddressGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AddressGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AddressGroupByOutputType[P]>
            : GetScalarType<T[P], AddressGroupByOutputType[P]>
        }
      >
    >


  export type addressSelect = {
    addressID?: boolean
    city?: boolean
    street?: boolean
    province?: boolean
    zipcode?: boolean
    companyID?: boolean
    Company?: boolean | companyArgs
  }


  export type addressInclude = {
    Company?: boolean | companyArgs
  }

  export type addressGetPayload<S extends boolean | null | undefined | addressArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? address :
    S extends undefined ? never :
    S extends { include: any } & (addressArgs | addressFindManyArgs)
    ? address  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'Company' ? companyGetPayload<S['include'][P]> | null :  never
  } 
    : S extends { select: any } & (addressArgs | addressFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'Company' ? companyGetPayload<S['select'][P]> | null :  P extends keyof address ? address[P] : never
  } 
      : address


  type addressCountArgs = 
    Omit<addressFindManyArgs, 'select' | 'include'> & {
      select?: AddressCountAggregateInputType | true
    }

  export interface addressDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Address that matches the filter.
     * @param {addressFindUniqueArgs} args - Arguments to find a Address
     * @example
     * // Get one Address
     * const address = await prisma.address.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends addressFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, addressFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'address'> extends True ? Prisma__addressClient<addressGetPayload<T>> : Prisma__addressClient<addressGetPayload<T> | null, null>

    /**
     * Find one Address that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {addressFindUniqueOrThrowArgs} args - Arguments to find a Address
     * @example
     * // Get one Address
     * const address = await prisma.address.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends addressFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, addressFindUniqueOrThrowArgs>
    ): Prisma__addressClient<addressGetPayload<T>>

    /**
     * Find the first Address that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {addressFindFirstArgs} args - Arguments to find a Address
     * @example
     * // Get one Address
     * const address = await prisma.address.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends addressFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, addressFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'address'> extends True ? Prisma__addressClient<addressGetPayload<T>> : Prisma__addressClient<addressGetPayload<T> | null, null>

    /**
     * Find the first Address that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {addressFindFirstOrThrowArgs} args - Arguments to find a Address
     * @example
     * // Get one Address
     * const address = await prisma.address.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends addressFindFirstOrThrowArgs>(
      args?: SelectSubset<T, addressFindFirstOrThrowArgs>
    ): Prisma__addressClient<addressGetPayload<T>>

    /**
     * Find zero or more Addresses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {addressFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Addresses
     * const addresses = await prisma.address.findMany()
     * 
     * // Get first 10 Addresses
     * const addresses = await prisma.address.findMany({ take: 10 })
     * 
     * // Only select the `addressID`
     * const addressWithAddressIDOnly = await prisma.address.findMany({ select: { addressID: true } })
     * 
    **/
    findMany<T extends addressFindManyArgs>(
      args?: SelectSubset<T, addressFindManyArgs>
    ): Prisma.PrismaPromise<Array<addressGetPayload<T>>>

    /**
     * Create a Address.
     * @param {addressCreateArgs} args - Arguments to create a Address.
     * @example
     * // Create one Address
     * const Address = await prisma.address.create({
     *   data: {
     *     // ... data to create a Address
     *   }
     * })
     * 
    **/
    create<T extends addressCreateArgs>(
      args: SelectSubset<T, addressCreateArgs>
    ): Prisma__addressClient<addressGetPayload<T>>

    /**
     * Create many Addresses.
     *     @param {addressCreateManyArgs} args - Arguments to create many Addresses.
     *     @example
     *     // Create many Addresses
     *     const address = await prisma.address.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends addressCreateManyArgs>(
      args?: SelectSubset<T, addressCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Address.
     * @param {addressDeleteArgs} args - Arguments to delete one Address.
     * @example
     * // Delete one Address
     * const Address = await prisma.address.delete({
     *   where: {
     *     // ... filter to delete one Address
     *   }
     * })
     * 
    **/
    delete<T extends addressDeleteArgs>(
      args: SelectSubset<T, addressDeleteArgs>
    ): Prisma__addressClient<addressGetPayload<T>>

    /**
     * Update one Address.
     * @param {addressUpdateArgs} args - Arguments to update one Address.
     * @example
     * // Update one Address
     * const address = await prisma.address.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends addressUpdateArgs>(
      args: SelectSubset<T, addressUpdateArgs>
    ): Prisma__addressClient<addressGetPayload<T>>

    /**
     * Delete zero or more Addresses.
     * @param {addressDeleteManyArgs} args - Arguments to filter Addresses to delete.
     * @example
     * // Delete a few Addresses
     * const { count } = await prisma.address.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends addressDeleteManyArgs>(
      args?: SelectSubset<T, addressDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Addresses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {addressUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Addresses
     * const address = await prisma.address.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends addressUpdateManyArgs>(
      args: SelectSubset<T, addressUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Address.
     * @param {addressUpsertArgs} args - Arguments to update or create a Address.
     * @example
     * // Update or create a Address
     * const address = await prisma.address.upsert({
     *   create: {
     *     // ... data to create a Address
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Address we want to update
     *   }
     * })
    **/
    upsert<T extends addressUpsertArgs>(
      args: SelectSubset<T, addressUpsertArgs>
    ): Prisma__addressClient<addressGetPayload<T>>

    /**
     * Count the number of Addresses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {addressCountArgs} args - Arguments to filter Addresses to count.
     * @example
     * // Count the number of Addresses
     * const count = await prisma.address.count({
     *   where: {
     *     // ... the filter for the Addresses we want to count
     *   }
     * })
    **/
    count<T extends addressCountArgs>(
      args?: Subset<T, addressCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AddressCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Address.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AddressAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AddressAggregateArgs>(args: Subset<T, AddressAggregateArgs>): Prisma.PrismaPromise<GetAddressAggregateType<T>>

    /**
     * Group by Address.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AddressGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AddressGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AddressGroupByArgs['orderBy'] }
        : { orderBy?: AddressGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AddressGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAddressGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for address.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__addressClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    Company<T extends companyArgs= {}>(args?: Subset<T, companyArgs>): Prisma__companyClient<companyGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * address base type for findUnique actions
   */
  export type addressFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the address
     */
    select?: addressSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: addressInclude | null
    /**
     * Filter, which address to fetch.
     */
    where: addressWhereUniqueInput
  }

  /**
   * address findUnique
   */
  export interface addressFindUniqueArgs extends addressFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * address findUniqueOrThrow
   */
  export type addressFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the address
     */
    select?: addressSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: addressInclude | null
    /**
     * Filter, which address to fetch.
     */
    where: addressWhereUniqueInput
  }


  /**
   * address base type for findFirst actions
   */
  export type addressFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the address
     */
    select?: addressSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: addressInclude | null
    /**
     * Filter, which address to fetch.
     */
    where?: addressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of addresses to fetch.
     */
    orderBy?: Enumerable<addressOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for addresses.
     */
    cursor?: addressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` addresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` addresses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of addresses.
     */
    distinct?: Enumerable<AddressScalarFieldEnum>
  }

  /**
   * address findFirst
   */
  export interface addressFindFirstArgs extends addressFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * address findFirstOrThrow
   */
  export type addressFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the address
     */
    select?: addressSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: addressInclude | null
    /**
     * Filter, which address to fetch.
     */
    where?: addressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of addresses to fetch.
     */
    orderBy?: Enumerable<addressOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for addresses.
     */
    cursor?: addressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` addresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` addresses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of addresses.
     */
    distinct?: Enumerable<AddressScalarFieldEnum>
  }


  /**
   * address findMany
   */
  export type addressFindManyArgs = {
    /**
     * Select specific fields to fetch from the address
     */
    select?: addressSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: addressInclude | null
    /**
     * Filter, which addresses to fetch.
     */
    where?: addressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of addresses to fetch.
     */
    orderBy?: Enumerable<addressOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing addresses.
     */
    cursor?: addressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` addresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` addresses.
     */
    skip?: number
    distinct?: Enumerable<AddressScalarFieldEnum>
  }


  /**
   * address create
   */
  export type addressCreateArgs = {
    /**
     * Select specific fields to fetch from the address
     */
    select?: addressSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: addressInclude | null
    /**
     * The data needed to create a address.
     */
    data: XOR<addressCreateInput, addressUncheckedCreateInput>
  }


  /**
   * address createMany
   */
  export type addressCreateManyArgs = {
    /**
     * The data used to create many addresses.
     */
    data: Enumerable<addressCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * address update
   */
  export type addressUpdateArgs = {
    /**
     * Select specific fields to fetch from the address
     */
    select?: addressSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: addressInclude | null
    /**
     * The data needed to update a address.
     */
    data: XOR<addressUpdateInput, addressUncheckedUpdateInput>
    /**
     * Choose, which address to update.
     */
    where: addressWhereUniqueInput
  }


  /**
   * address updateMany
   */
  export type addressUpdateManyArgs = {
    /**
     * The data used to update addresses.
     */
    data: XOR<addressUpdateManyMutationInput, addressUncheckedUpdateManyInput>
    /**
     * Filter which addresses to update
     */
    where?: addressWhereInput
  }


  /**
   * address upsert
   */
  export type addressUpsertArgs = {
    /**
     * Select specific fields to fetch from the address
     */
    select?: addressSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: addressInclude | null
    /**
     * The filter to search for the address to update in case it exists.
     */
    where: addressWhereUniqueInput
    /**
     * In case the address found by the `where` argument doesn't exist, create a new address with this data.
     */
    create: XOR<addressCreateInput, addressUncheckedCreateInput>
    /**
     * In case the address was found with the provided `where` argument, update it with this data.
     */
    update: XOR<addressUpdateInput, addressUncheckedUpdateInput>
  }


  /**
   * address delete
   */
  export type addressDeleteArgs = {
    /**
     * Select specific fields to fetch from the address
     */
    select?: addressSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: addressInclude | null
    /**
     * Filter which address to delete.
     */
    where: addressWhereUniqueInput
  }


  /**
   * address deleteMany
   */
  export type addressDeleteManyArgs = {
    /**
     * Filter which addresses to delete
     */
    where?: addressWhereInput
  }


  /**
   * address without action
   */
  export type addressArgs = {
    /**
     * Select specific fields to fetch from the address
     */
    select?: addressSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: addressInclude | null
  }



  /**
   * Model profile
   */


  export type AggregateProfile = {
    _count: ProfileCountAggregateOutputType | null
    _min: ProfileMinAggregateOutputType | null
    _max: ProfileMaxAggregateOutputType | null
  }

  export type ProfileMinAggregateOutputType = {
    profileID: string | null
    firstname: string | null
    lastname: string | null
    birthday: Date | null
    phone: string | null
    userID: string | null
  }

  export type ProfileMaxAggregateOutputType = {
    profileID: string | null
    firstname: string | null
    lastname: string | null
    birthday: Date | null
    phone: string | null
    userID: string | null
  }

  export type ProfileCountAggregateOutputType = {
    profileID: number
    firstname: number
    lastname: number
    birthday: number
    phone: number
    userID: number
    _all: number
  }


  export type ProfileMinAggregateInputType = {
    profileID?: true
    firstname?: true
    lastname?: true
    birthday?: true
    phone?: true
    userID?: true
  }

  export type ProfileMaxAggregateInputType = {
    profileID?: true
    firstname?: true
    lastname?: true
    birthday?: true
    phone?: true
    userID?: true
  }

  export type ProfileCountAggregateInputType = {
    profileID?: true
    firstname?: true
    lastname?: true
    birthday?: true
    phone?: true
    userID?: true
    _all?: true
  }

  export type ProfileAggregateArgs = {
    /**
     * Filter which profile to aggregate.
     */
    where?: profileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of profiles to fetch.
     */
    orderBy?: Enumerable<profileOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: profileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` profiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` profiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned profiles
    **/
    _count?: true | ProfileCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProfileMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProfileMaxAggregateInputType
  }

  export type GetProfileAggregateType<T extends ProfileAggregateArgs> = {
        [P in keyof T & keyof AggregateProfile]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProfile[P]>
      : GetScalarType<T[P], AggregateProfile[P]>
  }




  export type ProfileGroupByArgs = {
    where?: profileWhereInput
    orderBy?: Enumerable<profileOrderByWithAggregationInput>
    by: ProfileScalarFieldEnum[]
    having?: profileScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProfileCountAggregateInputType | true
    _min?: ProfileMinAggregateInputType
    _max?: ProfileMaxAggregateInputType
  }


  export type ProfileGroupByOutputType = {
    profileID: string
    firstname: string
    lastname: string
    birthday: Date
    phone: string
    userID: string | null
    _count: ProfileCountAggregateOutputType | null
    _min: ProfileMinAggregateOutputType | null
    _max: ProfileMaxAggregateOutputType | null
  }

  type GetProfileGroupByPayload<T extends ProfileGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<ProfileGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProfileGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProfileGroupByOutputType[P]>
            : GetScalarType<T[P], ProfileGroupByOutputType[P]>
        }
      >
    >


  export type profileSelect = {
    profileID?: boolean
    firstname?: boolean
    lastname?: boolean
    birthday?: boolean
    phone?: boolean
    userID?: boolean
    User?: boolean | UserArgs
  }


  export type profileInclude = {
    User?: boolean | UserArgs
  }

  export type profileGetPayload<S extends boolean | null | undefined | profileArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? profile :
    S extends undefined ? never :
    S extends { include: any } & (profileArgs | profileFindManyArgs)
    ? profile  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'User' ? UserGetPayload<S['include'][P]> | null :  never
  } 
    : S extends { select: any } & (profileArgs | profileFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'User' ? UserGetPayload<S['select'][P]> | null :  P extends keyof profile ? profile[P] : never
  } 
      : profile


  type profileCountArgs = 
    Omit<profileFindManyArgs, 'select' | 'include'> & {
      select?: ProfileCountAggregateInputType | true
    }

  export interface profileDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Profile that matches the filter.
     * @param {profileFindUniqueArgs} args - Arguments to find a Profile
     * @example
     * // Get one Profile
     * const profile = await prisma.profile.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends profileFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, profileFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'profile'> extends True ? Prisma__profileClient<profileGetPayload<T>> : Prisma__profileClient<profileGetPayload<T> | null, null>

    /**
     * Find one Profile that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {profileFindUniqueOrThrowArgs} args - Arguments to find a Profile
     * @example
     * // Get one Profile
     * const profile = await prisma.profile.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends profileFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, profileFindUniqueOrThrowArgs>
    ): Prisma__profileClient<profileGetPayload<T>>

    /**
     * Find the first Profile that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {profileFindFirstArgs} args - Arguments to find a Profile
     * @example
     * // Get one Profile
     * const profile = await prisma.profile.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends profileFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, profileFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'profile'> extends True ? Prisma__profileClient<profileGetPayload<T>> : Prisma__profileClient<profileGetPayload<T> | null, null>

    /**
     * Find the first Profile that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {profileFindFirstOrThrowArgs} args - Arguments to find a Profile
     * @example
     * // Get one Profile
     * const profile = await prisma.profile.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends profileFindFirstOrThrowArgs>(
      args?: SelectSubset<T, profileFindFirstOrThrowArgs>
    ): Prisma__profileClient<profileGetPayload<T>>

    /**
     * Find zero or more Profiles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {profileFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Profiles
     * const profiles = await prisma.profile.findMany()
     * 
     * // Get first 10 Profiles
     * const profiles = await prisma.profile.findMany({ take: 10 })
     * 
     * // Only select the `profileID`
     * const profileWithProfileIDOnly = await prisma.profile.findMany({ select: { profileID: true } })
     * 
    **/
    findMany<T extends profileFindManyArgs>(
      args?: SelectSubset<T, profileFindManyArgs>
    ): Prisma.PrismaPromise<Array<profileGetPayload<T>>>

    /**
     * Create a Profile.
     * @param {profileCreateArgs} args - Arguments to create a Profile.
     * @example
     * // Create one Profile
     * const Profile = await prisma.profile.create({
     *   data: {
     *     // ... data to create a Profile
     *   }
     * })
     * 
    **/
    create<T extends profileCreateArgs>(
      args: SelectSubset<T, profileCreateArgs>
    ): Prisma__profileClient<profileGetPayload<T>>

    /**
     * Create many Profiles.
     *     @param {profileCreateManyArgs} args - Arguments to create many Profiles.
     *     @example
     *     // Create many Profiles
     *     const profile = await prisma.profile.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends profileCreateManyArgs>(
      args?: SelectSubset<T, profileCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Profile.
     * @param {profileDeleteArgs} args - Arguments to delete one Profile.
     * @example
     * // Delete one Profile
     * const Profile = await prisma.profile.delete({
     *   where: {
     *     // ... filter to delete one Profile
     *   }
     * })
     * 
    **/
    delete<T extends profileDeleteArgs>(
      args: SelectSubset<T, profileDeleteArgs>
    ): Prisma__profileClient<profileGetPayload<T>>

    /**
     * Update one Profile.
     * @param {profileUpdateArgs} args - Arguments to update one Profile.
     * @example
     * // Update one Profile
     * const profile = await prisma.profile.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends profileUpdateArgs>(
      args: SelectSubset<T, profileUpdateArgs>
    ): Prisma__profileClient<profileGetPayload<T>>

    /**
     * Delete zero or more Profiles.
     * @param {profileDeleteManyArgs} args - Arguments to filter Profiles to delete.
     * @example
     * // Delete a few Profiles
     * const { count } = await prisma.profile.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends profileDeleteManyArgs>(
      args?: SelectSubset<T, profileDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Profiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {profileUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Profiles
     * const profile = await prisma.profile.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends profileUpdateManyArgs>(
      args: SelectSubset<T, profileUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Profile.
     * @param {profileUpsertArgs} args - Arguments to update or create a Profile.
     * @example
     * // Update or create a Profile
     * const profile = await prisma.profile.upsert({
     *   create: {
     *     // ... data to create a Profile
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Profile we want to update
     *   }
     * })
    **/
    upsert<T extends profileUpsertArgs>(
      args: SelectSubset<T, profileUpsertArgs>
    ): Prisma__profileClient<profileGetPayload<T>>

    /**
     * Count the number of Profiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {profileCountArgs} args - Arguments to filter Profiles to count.
     * @example
     * // Count the number of Profiles
     * const count = await prisma.profile.count({
     *   where: {
     *     // ... the filter for the Profiles we want to count
     *   }
     * })
    **/
    count<T extends profileCountArgs>(
      args?: Subset<T, profileCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProfileCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Profile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProfileAggregateArgs>(args: Subset<T, ProfileAggregateArgs>): Prisma.PrismaPromise<GetProfileAggregateType<T>>

    /**
     * Group by Profile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProfileGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProfileGroupByArgs['orderBy'] }
        : { orderBy?: ProfileGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProfileGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProfileGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for profile.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__profileClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    User<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * profile base type for findUnique actions
   */
  export type profileFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the profile
     */
    select?: profileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: profileInclude | null
    /**
     * Filter, which profile to fetch.
     */
    where: profileWhereUniqueInput
  }

  /**
   * profile findUnique
   */
  export interface profileFindUniqueArgs extends profileFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * profile findUniqueOrThrow
   */
  export type profileFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the profile
     */
    select?: profileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: profileInclude | null
    /**
     * Filter, which profile to fetch.
     */
    where: profileWhereUniqueInput
  }


  /**
   * profile base type for findFirst actions
   */
  export type profileFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the profile
     */
    select?: profileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: profileInclude | null
    /**
     * Filter, which profile to fetch.
     */
    where?: profileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of profiles to fetch.
     */
    orderBy?: Enumerable<profileOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for profiles.
     */
    cursor?: profileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` profiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` profiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of profiles.
     */
    distinct?: Enumerable<ProfileScalarFieldEnum>
  }

  /**
   * profile findFirst
   */
  export interface profileFindFirstArgs extends profileFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * profile findFirstOrThrow
   */
  export type profileFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the profile
     */
    select?: profileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: profileInclude | null
    /**
     * Filter, which profile to fetch.
     */
    where?: profileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of profiles to fetch.
     */
    orderBy?: Enumerable<profileOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for profiles.
     */
    cursor?: profileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` profiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` profiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of profiles.
     */
    distinct?: Enumerable<ProfileScalarFieldEnum>
  }


  /**
   * profile findMany
   */
  export type profileFindManyArgs = {
    /**
     * Select specific fields to fetch from the profile
     */
    select?: profileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: profileInclude | null
    /**
     * Filter, which profiles to fetch.
     */
    where?: profileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of profiles to fetch.
     */
    orderBy?: Enumerable<profileOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing profiles.
     */
    cursor?: profileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` profiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` profiles.
     */
    skip?: number
    distinct?: Enumerable<ProfileScalarFieldEnum>
  }


  /**
   * profile create
   */
  export type profileCreateArgs = {
    /**
     * Select specific fields to fetch from the profile
     */
    select?: profileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: profileInclude | null
    /**
     * The data needed to create a profile.
     */
    data: XOR<profileCreateInput, profileUncheckedCreateInput>
  }


  /**
   * profile createMany
   */
  export type profileCreateManyArgs = {
    /**
     * The data used to create many profiles.
     */
    data: Enumerable<profileCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * profile update
   */
  export type profileUpdateArgs = {
    /**
     * Select specific fields to fetch from the profile
     */
    select?: profileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: profileInclude | null
    /**
     * The data needed to update a profile.
     */
    data: XOR<profileUpdateInput, profileUncheckedUpdateInput>
    /**
     * Choose, which profile to update.
     */
    where: profileWhereUniqueInput
  }


  /**
   * profile updateMany
   */
  export type profileUpdateManyArgs = {
    /**
     * The data used to update profiles.
     */
    data: XOR<profileUpdateManyMutationInput, profileUncheckedUpdateManyInput>
    /**
     * Filter which profiles to update
     */
    where?: profileWhereInput
  }


  /**
   * profile upsert
   */
  export type profileUpsertArgs = {
    /**
     * Select specific fields to fetch from the profile
     */
    select?: profileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: profileInclude | null
    /**
     * The filter to search for the profile to update in case it exists.
     */
    where: profileWhereUniqueInput
    /**
     * In case the profile found by the `where` argument doesn't exist, create a new profile with this data.
     */
    create: XOR<profileCreateInput, profileUncheckedCreateInput>
    /**
     * In case the profile was found with the provided `where` argument, update it with this data.
     */
    update: XOR<profileUpdateInput, profileUncheckedUpdateInput>
  }


  /**
   * profile delete
   */
  export type profileDeleteArgs = {
    /**
     * Select specific fields to fetch from the profile
     */
    select?: profileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: profileInclude | null
    /**
     * Filter which profile to delete.
     */
    where: profileWhereUniqueInput
  }


  /**
   * profile deleteMany
   */
  export type profileDeleteManyArgs = {
    /**
     * Filter which profiles to delete
     */
    where?: profileWhereInput
  }


  /**
   * profile without action
   */
  export type profileArgs = {
    /**
     * Select specific fields to fetch from the profile
     */
    select?: profileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: profileInclude | null
  }



  /**
   * Model notification
   */


  export type AggregateNotification = {
    _count: NotificationCountAggregateOutputType | null
    _min: NotificationMinAggregateOutputType | null
    _max: NotificationMaxAggregateOutputType | null
  }

  export type NotificationMinAggregateOutputType = {
    notificationID: string | null
    title: string | null
    notificationStatus: notificationStatus | null
    createdAt: Date | null
    userID: string | null
  }

  export type NotificationMaxAggregateOutputType = {
    notificationID: string | null
    title: string | null
    notificationStatus: notificationStatus | null
    createdAt: Date | null
    userID: string | null
  }

  export type NotificationCountAggregateOutputType = {
    notificationID: number
    title: number
    notificationStatus: number
    createdAt: number
    userID: number
    _all: number
  }


  export type NotificationMinAggregateInputType = {
    notificationID?: true
    title?: true
    notificationStatus?: true
    createdAt?: true
    userID?: true
  }

  export type NotificationMaxAggregateInputType = {
    notificationID?: true
    title?: true
    notificationStatus?: true
    createdAt?: true
    userID?: true
  }

  export type NotificationCountAggregateInputType = {
    notificationID?: true
    title?: true
    notificationStatus?: true
    createdAt?: true
    userID?: true
    _all?: true
  }

  export type NotificationAggregateArgs = {
    /**
     * Filter which notification to aggregate.
     */
    where?: notificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of notifications to fetch.
     */
    orderBy?: Enumerable<notificationOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: notificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned notifications
    **/
    _count?: true | NotificationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NotificationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NotificationMaxAggregateInputType
  }

  export type GetNotificationAggregateType<T extends NotificationAggregateArgs> = {
        [P in keyof T & keyof AggregateNotification]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNotification[P]>
      : GetScalarType<T[P], AggregateNotification[P]>
  }




  export type NotificationGroupByArgs = {
    where?: notificationWhereInput
    orderBy?: Enumerable<notificationOrderByWithAggregationInput>
    by: NotificationScalarFieldEnum[]
    having?: notificationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NotificationCountAggregateInputType | true
    _min?: NotificationMinAggregateInputType
    _max?: NotificationMaxAggregateInputType
  }


  export type NotificationGroupByOutputType = {
    notificationID: string
    title: string
    notificationStatus: notificationStatus
    createdAt: Date
    userID: string | null
    _count: NotificationCountAggregateOutputType | null
    _min: NotificationMinAggregateOutputType | null
    _max: NotificationMaxAggregateOutputType | null
  }

  type GetNotificationGroupByPayload<T extends NotificationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<NotificationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NotificationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NotificationGroupByOutputType[P]>
            : GetScalarType<T[P], NotificationGroupByOutputType[P]>
        }
      >
    >


  export type notificationSelect = {
    notificationID?: boolean
    title?: boolean
    notificationStatus?: boolean
    createdAt?: boolean
    userID?: boolean
    Product?: boolean | notification$ProductArgs
    Request?: boolean | notification$RequestArgs
    User?: boolean | UserArgs
    _count?: boolean | NotificationCountOutputTypeArgs
  }


  export type notificationInclude = {
    Product?: boolean | notification$ProductArgs
    Request?: boolean | notification$RequestArgs
    User?: boolean | UserArgs
    _count?: boolean | NotificationCountOutputTypeArgs
  }

  export type notificationGetPayload<S extends boolean | null | undefined | notificationArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? notification :
    S extends undefined ? never :
    S extends { include: any } & (notificationArgs | notificationFindManyArgs)
    ? notification  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'Product' ? Array < productGetPayload<S['include'][P]>>  :
        P extends 'Request' ? Array < requestGetPayload<S['include'][P]>>  :
        P extends 'User' ? UserGetPayload<S['include'][P]> | null :
        P extends '_count' ? NotificationCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (notificationArgs | notificationFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'Product' ? Array < productGetPayload<S['select'][P]>>  :
        P extends 'Request' ? Array < requestGetPayload<S['select'][P]>>  :
        P extends 'User' ? UserGetPayload<S['select'][P]> | null :
        P extends '_count' ? NotificationCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof notification ? notification[P] : never
  } 
      : notification


  type notificationCountArgs = 
    Omit<notificationFindManyArgs, 'select' | 'include'> & {
      select?: NotificationCountAggregateInputType | true
    }

  export interface notificationDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Notification that matches the filter.
     * @param {notificationFindUniqueArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends notificationFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, notificationFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'notification'> extends True ? Prisma__notificationClient<notificationGetPayload<T>> : Prisma__notificationClient<notificationGetPayload<T> | null, null>

    /**
     * Find one Notification that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {notificationFindUniqueOrThrowArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends notificationFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, notificationFindUniqueOrThrowArgs>
    ): Prisma__notificationClient<notificationGetPayload<T>>

    /**
     * Find the first Notification that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {notificationFindFirstArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends notificationFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, notificationFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'notification'> extends True ? Prisma__notificationClient<notificationGetPayload<T>> : Prisma__notificationClient<notificationGetPayload<T> | null, null>

    /**
     * Find the first Notification that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {notificationFindFirstOrThrowArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends notificationFindFirstOrThrowArgs>(
      args?: SelectSubset<T, notificationFindFirstOrThrowArgs>
    ): Prisma__notificationClient<notificationGetPayload<T>>

    /**
     * Find zero or more Notifications that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {notificationFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Notifications
     * const notifications = await prisma.notification.findMany()
     * 
     * // Get first 10 Notifications
     * const notifications = await prisma.notification.findMany({ take: 10 })
     * 
     * // Only select the `notificationID`
     * const notificationWithNotificationIDOnly = await prisma.notification.findMany({ select: { notificationID: true } })
     * 
    **/
    findMany<T extends notificationFindManyArgs>(
      args?: SelectSubset<T, notificationFindManyArgs>
    ): Prisma.PrismaPromise<Array<notificationGetPayload<T>>>

    /**
     * Create a Notification.
     * @param {notificationCreateArgs} args - Arguments to create a Notification.
     * @example
     * // Create one Notification
     * const Notification = await prisma.notification.create({
     *   data: {
     *     // ... data to create a Notification
     *   }
     * })
     * 
    **/
    create<T extends notificationCreateArgs>(
      args: SelectSubset<T, notificationCreateArgs>
    ): Prisma__notificationClient<notificationGetPayload<T>>

    /**
     * Create many Notifications.
     *     @param {notificationCreateManyArgs} args - Arguments to create many Notifications.
     *     @example
     *     // Create many Notifications
     *     const notification = await prisma.notification.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends notificationCreateManyArgs>(
      args?: SelectSubset<T, notificationCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Notification.
     * @param {notificationDeleteArgs} args - Arguments to delete one Notification.
     * @example
     * // Delete one Notification
     * const Notification = await prisma.notification.delete({
     *   where: {
     *     // ... filter to delete one Notification
     *   }
     * })
     * 
    **/
    delete<T extends notificationDeleteArgs>(
      args: SelectSubset<T, notificationDeleteArgs>
    ): Prisma__notificationClient<notificationGetPayload<T>>

    /**
     * Update one Notification.
     * @param {notificationUpdateArgs} args - Arguments to update one Notification.
     * @example
     * // Update one Notification
     * const notification = await prisma.notification.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends notificationUpdateArgs>(
      args: SelectSubset<T, notificationUpdateArgs>
    ): Prisma__notificationClient<notificationGetPayload<T>>

    /**
     * Delete zero or more Notifications.
     * @param {notificationDeleteManyArgs} args - Arguments to filter Notifications to delete.
     * @example
     * // Delete a few Notifications
     * const { count } = await prisma.notification.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends notificationDeleteManyArgs>(
      args?: SelectSubset<T, notificationDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {notificationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Notifications
     * const notification = await prisma.notification.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends notificationUpdateManyArgs>(
      args: SelectSubset<T, notificationUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Notification.
     * @param {notificationUpsertArgs} args - Arguments to update or create a Notification.
     * @example
     * // Update or create a Notification
     * const notification = await prisma.notification.upsert({
     *   create: {
     *     // ... data to create a Notification
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Notification we want to update
     *   }
     * })
    **/
    upsert<T extends notificationUpsertArgs>(
      args: SelectSubset<T, notificationUpsertArgs>
    ): Prisma__notificationClient<notificationGetPayload<T>>

    /**
     * Count the number of Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {notificationCountArgs} args - Arguments to filter Notifications to count.
     * @example
     * // Count the number of Notifications
     * const count = await prisma.notification.count({
     *   where: {
     *     // ... the filter for the Notifications we want to count
     *   }
     * })
    **/
    count<T extends notificationCountArgs>(
      args?: Subset<T, notificationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NotificationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Notification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NotificationAggregateArgs>(args: Subset<T, NotificationAggregateArgs>): Prisma.PrismaPromise<GetNotificationAggregateType<T>>

    /**
     * Group by Notification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NotificationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NotificationGroupByArgs['orderBy'] }
        : { orderBy?: NotificationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NotificationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNotificationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for notification.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__notificationClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    Product<T extends notification$ProductArgs= {}>(args?: Subset<T, notification$ProductArgs>): Prisma.PrismaPromise<Array<productGetPayload<T>>| Null>;

    Request<T extends notification$RequestArgs= {}>(args?: Subset<T, notification$RequestArgs>): Prisma.PrismaPromise<Array<requestGetPayload<T>>| Null>;

    User<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * notification base type for findUnique actions
   */
  export type notificationFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the notification
     */
    select?: notificationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: notificationInclude | null
    /**
     * Filter, which notification to fetch.
     */
    where: notificationWhereUniqueInput
  }

  /**
   * notification findUnique
   */
  export interface notificationFindUniqueArgs extends notificationFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * notification findUniqueOrThrow
   */
  export type notificationFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the notification
     */
    select?: notificationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: notificationInclude | null
    /**
     * Filter, which notification to fetch.
     */
    where: notificationWhereUniqueInput
  }


  /**
   * notification base type for findFirst actions
   */
  export type notificationFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the notification
     */
    select?: notificationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: notificationInclude | null
    /**
     * Filter, which notification to fetch.
     */
    where?: notificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of notifications to fetch.
     */
    orderBy?: Enumerable<notificationOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for notifications.
     */
    cursor?: notificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of notifications.
     */
    distinct?: Enumerable<NotificationScalarFieldEnum>
  }

  /**
   * notification findFirst
   */
  export interface notificationFindFirstArgs extends notificationFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * notification findFirstOrThrow
   */
  export type notificationFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the notification
     */
    select?: notificationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: notificationInclude | null
    /**
     * Filter, which notification to fetch.
     */
    where?: notificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of notifications to fetch.
     */
    orderBy?: Enumerable<notificationOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for notifications.
     */
    cursor?: notificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of notifications.
     */
    distinct?: Enumerable<NotificationScalarFieldEnum>
  }


  /**
   * notification findMany
   */
  export type notificationFindManyArgs = {
    /**
     * Select specific fields to fetch from the notification
     */
    select?: notificationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: notificationInclude | null
    /**
     * Filter, which notifications to fetch.
     */
    where?: notificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of notifications to fetch.
     */
    orderBy?: Enumerable<notificationOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing notifications.
     */
    cursor?: notificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` notifications.
     */
    skip?: number
    distinct?: Enumerable<NotificationScalarFieldEnum>
  }


  /**
   * notification create
   */
  export type notificationCreateArgs = {
    /**
     * Select specific fields to fetch from the notification
     */
    select?: notificationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: notificationInclude | null
    /**
     * The data needed to create a notification.
     */
    data: XOR<notificationCreateInput, notificationUncheckedCreateInput>
  }


  /**
   * notification createMany
   */
  export type notificationCreateManyArgs = {
    /**
     * The data used to create many notifications.
     */
    data: Enumerable<notificationCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * notification update
   */
  export type notificationUpdateArgs = {
    /**
     * Select specific fields to fetch from the notification
     */
    select?: notificationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: notificationInclude | null
    /**
     * The data needed to update a notification.
     */
    data: XOR<notificationUpdateInput, notificationUncheckedUpdateInput>
    /**
     * Choose, which notification to update.
     */
    where: notificationWhereUniqueInput
  }


  /**
   * notification updateMany
   */
  export type notificationUpdateManyArgs = {
    /**
     * The data used to update notifications.
     */
    data: XOR<notificationUpdateManyMutationInput, notificationUncheckedUpdateManyInput>
    /**
     * Filter which notifications to update
     */
    where?: notificationWhereInput
  }


  /**
   * notification upsert
   */
  export type notificationUpsertArgs = {
    /**
     * Select specific fields to fetch from the notification
     */
    select?: notificationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: notificationInclude | null
    /**
     * The filter to search for the notification to update in case it exists.
     */
    where: notificationWhereUniqueInput
    /**
     * In case the notification found by the `where` argument doesn't exist, create a new notification with this data.
     */
    create: XOR<notificationCreateInput, notificationUncheckedCreateInput>
    /**
     * In case the notification was found with the provided `where` argument, update it with this data.
     */
    update: XOR<notificationUpdateInput, notificationUncheckedUpdateInput>
  }


  /**
   * notification delete
   */
  export type notificationDeleteArgs = {
    /**
     * Select specific fields to fetch from the notification
     */
    select?: notificationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: notificationInclude | null
    /**
     * Filter which notification to delete.
     */
    where: notificationWhereUniqueInput
  }


  /**
   * notification deleteMany
   */
  export type notificationDeleteManyArgs = {
    /**
     * Filter which notifications to delete
     */
    where?: notificationWhereInput
  }


  /**
   * notification.Product
   */
  export type notification$ProductArgs = {
    /**
     * Select specific fields to fetch from the product
     */
    select?: productSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productInclude | null
    where?: productWhereInput
    orderBy?: Enumerable<productOrderByWithRelationAndSearchRelevanceInput>
    cursor?: productWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ProductScalarFieldEnum>
  }


  /**
   * notification.Request
   */
  export type notification$RequestArgs = {
    /**
     * Select specific fields to fetch from the request
     */
    select?: requestSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: requestInclude | null
    where?: requestWhereInput
    orderBy?: Enumerable<requestOrderByWithRelationAndSearchRelevanceInput>
    cursor?: requestWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<RequestScalarFieldEnum>
  }


  /**
   * notification without action
   */
  export type notificationArgs = {
    /**
     * Select specific fields to fetch from the notification
     */
    select?: notificationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: notificationInclude | null
  }



  /**
   * Model product
   */


  export type AggregateProduct = {
    _count: ProductCountAggregateOutputType | null
    _avg: ProductAvgAggregateOutputType | null
    _sum: ProductSumAggregateOutputType | null
    _min: ProductMinAggregateOutputType | null
    _max: ProductMaxAggregateOutputType | null
  }

  export type ProductAvgAggregateOutputType = {
    price: number | null
    stock: number | null
  }

  export type ProductSumAggregateOutputType = {
    price: number | null
    stock: number | null
  }

  export type ProductMinAggregateOutputType = {
    productID: string | null
    sku: string | null
    title: string | null
    price: number | null
    stock: number | null
    userID: string | null
    status: productStatus | null
    createdAt: Date | null
    notificationID: string | null
  }

  export type ProductMaxAggregateOutputType = {
    productID: string | null
    sku: string | null
    title: string | null
    price: number | null
    stock: number | null
    userID: string | null
    status: productStatus | null
    createdAt: Date | null
    notificationID: string | null
  }

  export type ProductCountAggregateOutputType = {
    productID: number
    sku: number
    title: number
    price: number
    stock: number
    userID: number
    status: number
    createdAt: number
    notificationID: number
    _all: number
  }


  export type ProductAvgAggregateInputType = {
    price?: true
    stock?: true
  }

  export type ProductSumAggregateInputType = {
    price?: true
    stock?: true
  }

  export type ProductMinAggregateInputType = {
    productID?: true
    sku?: true
    title?: true
    price?: true
    stock?: true
    userID?: true
    status?: true
    createdAt?: true
    notificationID?: true
  }

  export type ProductMaxAggregateInputType = {
    productID?: true
    sku?: true
    title?: true
    price?: true
    stock?: true
    userID?: true
    status?: true
    createdAt?: true
    notificationID?: true
  }

  export type ProductCountAggregateInputType = {
    productID?: true
    sku?: true
    title?: true
    price?: true
    stock?: true
    userID?: true
    status?: true
    createdAt?: true
    notificationID?: true
    _all?: true
  }

  export type ProductAggregateArgs = {
    /**
     * Filter which product to aggregate.
     */
    where?: productWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of products to fetch.
     */
    orderBy?: Enumerable<productOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: productWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned products
    **/
    _count?: true | ProductCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProductAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProductSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProductMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProductMaxAggregateInputType
  }

  export type GetProductAggregateType<T extends ProductAggregateArgs> = {
        [P in keyof T & keyof AggregateProduct]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProduct[P]>
      : GetScalarType<T[P], AggregateProduct[P]>
  }




  export type ProductGroupByArgs = {
    where?: productWhereInput
    orderBy?: Enumerable<productOrderByWithAggregationInput>
    by: ProductScalarFieldEnum[]
    having?: productScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProductCountAggregateInputType | true
    _avg?: ProductAvgAggregateInputType
    _sum?: ProductSumAggregateInputType
    _min?: ProductMinAggregateInputType
    _max?: ProductMaxAggregateInputType
  }


  export type ProductGroupByOutputType = {
    productID: string
    sku: string
    title: string
    price: number
    stock: number
    userID: string
    status: productStatus
    createdAt: Date
    notificationID: string | null
    _count: ProductCountAggregateOutputType | null
    _avg: ProductAvgAggregateOutputType | null
    _sum: ProductSumAggregateOutputType | null
    _min: ProductMinAggregateOutputType | null
    _max: ProductMaxAggregateOutputType | null
  }

  type GetProductGroupByPayload<T extends ProductGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<ProductGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProductGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProductGroupByOutputType[P]>
            : GetScalarType<T[P], ProductGroupByOutputType[P]>
        }
      >
    >


  export type productSelect = {
    productID?: boolean
    sku?: boolean
    title?: boolean
    price?: boolean
    stock?: boolean
    userID?: boolean
    status?: boolean
    createdAt?: boolean
    notificationID?: boolean
    User?: boolean | UserArgs
    Company?: boolean | product$CompanyArgs
    notification?: boolean | notificationArgs
    request?: boolean | product$requestArgs
    order?: boolean | product$orderArgs
    _count?: boolean | ProductCountOutputTypeArgs
  }


  export type productInclude = {
    User?: boolean | UserArgs
    Company?: boolean | product$CompanyArgs
    notification?: boolean | notificationArgs
    request?: boolean | product$requestArgs
    order?: boolean | product$orderArgs
    _count?: boolean | ProductCountOutputTypeArgs
  }

  export type productGetPayload<S extends boolean | null | undefined | productArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? product :
    S extends undefined ? never :
    S extends { include: any } & (productArgs | productFindManyArgs)
    ? product  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'User' ? UserGetPayload<S['include'][P]> :
        P extends 'Company' ? Array < companyGetPayload<S['include'][P]>>  :
        P extends 'notification' ? notificationGetPayload<S['include'][P]> | null :
        P extends 'request' ? Array < requestGetPayload<S['include'][P]>>  :
        P extends 'order' ? Array < orderGetPayload<S['include'][P]>>  :
        P extends '_count' ? ProductCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (productArgs | productFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'User' ? UserGetPayload<S['select'][P]> :
        P extends 'Company' ? Array < companyGetPayload<S['select'][P]>>  :
        P extends 'notification' ? notificationGetPayload<S['select'][P]> | null :
        P extends 'request' ? Array < requestGetPayload<S['select'][P]>>  :
        P extends 'order' ? Array < orderGetPayload<S['select'][P]>>  :
        P extends '_count' ? ProductCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof product ? product[P] : never
  } 
      : product


  type productCountArgs = 
    Omit<productFindManyArgs, 'select' | 'include'> & {
      select?: ProductCountAggregateInputType | true
    }

  export interface productDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Product that matches the filter.
     * @param {productFindUniqueArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends productFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, productFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'product'> extends True ? Prisma__productClient<productGetPayload<T>> : Prisma__productClient<productGetPayload<T> | null, null>

    /**
     * Find one Product that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {productFindUniqueOrThrowArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends productFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, productFindUniqueOrThrowArgs>
    ): Prisma__productClient<productGetPayload<T>>

    /**
     * Find the first Product that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productFindFirstArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends productFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, productFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'product'> extends True ? Prisma__productClient<productGetPayload<T>> : Prisma__productClient<productGetPayload<T> | null, null>

    /**
     * Find the first Product that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productFindFirstOrThrowArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends productFindFirstOrThrowArgs>(
      args?: SelectSubset<T, productFindFirstOrThrowArgs>
    ): Prisma__productClient<productGetPayload<T>>

    /**
     * Find zero or more Products that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Products
     * const products = await prisma.product.findMany()
     * 
     * // Get first 10 Products
     * const products = await prisma.product.findMany({ take: 10 })
     * 
     * // Only select the `productID`
     * const productWithProductIDOnly = await prisma.product.findMany({ select: { productID: true } })
     * 
    **/
    findMany<T extends productFindManyArgs>(
      args?: SelectSubset<T, productFindManyArgs>
    ): Prisma.PrismaPromise<Array<productGetPayload<T>>>

    /**
     * Create a Product.
     * @param {productCreateArgs} args - Arguments to create a Product.
     * @example
     * // Create one Product
     * const Product = await prisma.product.create({
     *   data: {
     *     // ... data to create a Product
     *   }
     * })
     * 
    **/
    create<T extends productCreateArgs>(
      args: SelectSubset<T, productCreateArgs>
    ): Prisma__productClient<productGetPayload<T>>

    /**
     * Create many Products.
     *     @param {productCreateManyArgs} args - Arguments to create many Products.
     *     @example
     *     // Create many Products
     *     const product = await prisma.product.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends productCreateManyArgs>(
      args?: SelectSubset<T, productCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Product.
     * @param {productDeleteArgs} args - Arguments to delete one Product.
     * @example
     * // Delete one Product
     * const Product = await prisma.product.delete({
     *   where: {
     *     // ... filter to delete one Product
     *   }
     * })
     * 
    **/
    delete<T extends productDeleteArgs>(
      args: SelectSubset<T, productDeleteArgs>
    ): Prisma__productClient<productGetPayload<T>>

    /**
     * Update one Product.
     * @param {productUpdateArgs} args - Arguments to update one Product.
     * @example
     * // Update one Product
     * const product = await prisma.product.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends productUpdateArgs>(
      args: SelectSubset<T, productUpdateArgs>
    ): Prisma__productClient<productGetPayload<T>>

    /**
     * Delete zero or more Products.
     * @param {productDeleteManyArgs} args - Arguments to filter Products to delete.
     * @example
     * // Delete a few Products
     * const { count } = await prisma.product.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends productDeleteManyArgs>(
      args?: SelectSubset<T, productDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Products
     * const product = await prisma.product.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends productUpdateManyArgs>(
      args: SelectSubset<T, productUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Product.
     * @param {productUpsertArgs} args - Arguments to update or create a Product.
     * @example
     * // Update or create a Product
     * const product = await prisma.product.upsert({
     *   create: {
     *     // ... data to create a Product
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Product we want to update
     *   }
     * })
    **/
    upsert<T extends productUpsertArgs>(
      args: SelectSubset<T, productUpsertArgs>
    ): Prisma__productClient<productGetPayload<T>>

    /**
     * Count the number of Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productCountArgs} args - Arguments to filter Products to count.
     * @example
     * // Count the number of Products
     * const count = await prisma.product.count({
     *   where: {
     *     // ... the filter for the Products we want to count
     *   }
     * })
    **/
    count<T extends productCountArgs>(
      args?: Subset<T, productCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProductCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Product.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProductAggregateArgs>(args: Subset<T, ProductAggregateArgs>): Prisma.PrismaPromise<GetProductAggregateType<T>>

    /**
     * Group by Product.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProductGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProductGroupByArgs['orderBy'] }
        : { orderBy?: ProductGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProductGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProductGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for product.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__productClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    User<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    Company<T extends product$CompanyArgs= {}>(args?: Subset<T, product$CompanyArgs>): Prisma.PrismaPromise<Array<companyGetPayload<T>>| Null>;

    notification<T extends notificationArgs= {}>(args?: Subset<T, notificationArgs>): Prisma__notificationClient<notificationGetPayload<T> | Null>;

    request<T extends product$requestArgs= {}>(args?: Subset<T, product$requestArgs>): Prisma.PrismaPromise<Array<requestGetPayload<T>>| Null>;

    order<T extends product$orderArgs= {}>(args?: Subset<T, product$orderArgs>): Prisma.PrismaPromise<Array<orderGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * product base type for findUnique actions
   */
  export type productFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the product
     */
    select?: productSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productInclude | null
    /**
     * Filter, which product to fetch.
     */
    where: productWhereUniqueInput
  }

  /**
   * product findUnique
   */
  export interface productFindUniqueArgs extends productFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * product findUniqueOrThrow
   */
  export type productFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the product
     */
    select?: productSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productInclude | null
    /**
     * Filter, which product to fetch.
     */
    where: productWhereUniqueInput
  }


  /**
   * product base type for findFirst actions
   */
  export type productFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the product
     */
    select?: productSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productInclude | null
    /**
     * Filter, which product to fetch.
     */
    where?: productWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of products to fetch.
     */
    orderBy?: Enumerable<productOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for products.
     */
    cursor?: productWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of products.
     */
    distinct?: Enumerable<ProductScalarFieldEnum>
  }

  /**
   * product findFirst
   */
  export interface productFindFirstArgs extends productFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * product findFirstOrThrow
   */
  export type productFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the product
     */
    select?: productSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productInclude | null
    /**
     * Filter, which product to fetch.
     */
    where?: productWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of products to fetch.
     */
    orderBy?: Enumerable<productOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for products.
     */
    cursor?: productWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of products.
     */
    distinct?: Enumerable<ProductScalarFieldEnum>
  }


  /**
   * product findMany
   */
  export type productFindManyArgs = {
    /**
     * Select specific fields to fetch from the product
     */
    select?: productSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productInclude | null
    /**
     * Filter, which products to fetch.
     */
    where?: productWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of products to fetch.
     */
    orderBy?: Enumerable<productOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing products.
     */
    cursor?: productWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` products.
     */
    skip?: number
    distinct?: Enumerable<ProductScalarFieldEnum>
  }


  /**
   * product create
   */
  export type productCreateArgs = {
    /**
     * Select specific fields to fetch from the product
     */
    select?: productSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productInclude | null
    /**
     * The data needed to create a product.
     */
    data: XOR<productCreateInput, productUncheckedCreateInput>
  }


  /**
   * product createMany
   */
  export type productCreateManyArgs = {
    /**
     * The data used to create many products.
     */
    data: Enumerable<productCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * product update
   */
  export type productUpdateArgs = {
    /**
     * Select specific fields to fetch from the product
     */
    select?: productSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productInclude | null
    /**
     * The data needed to update a product.
     */
    data: XOR<productUpdateInput, productUncheckedUpdateInput>
    /**
     * Choose, which product to update.
     */
    where: productWhereUniqueInput
  }


  /**
   * product updateMany
   */
  export type productUpdateManyArgs = {
    /**
     * The data used to update products.
     */
    data: XOR<productUpdateManyMutationInput, productUncheckedUpdateManyInput>
    /**
     * Filter which products to update
     */
    where?: productWhereInput
  }


  /**
   * product upsert
   */
  export type productUpsertArgs = {
    /**
     * Select specific fields to fetch from the product
     */
    select?: productSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productInclude | null
    /**
     * The filter to search for the product to update in case it exists.
     */
    where: productWhereUniqueInput
    /**
     * In case the product found by the `where` argument doesn't exist, create a new product with this data.
     */
    create: XOR<productCreateInput, productUncheckedCreateInput>
    /**
     * In case the product was found with the provided `where` argument, update it with this data.
     */
    update: XOR<productUpdateInput, productUncheckedUpdateInput>
  }


  /**
   * product delete
   */
  export type productDeleteArgs = {
    /**
     * Select specific fields to fetch from the product
     */
    select?: productSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productInclude | null
    /**
     * Filter which product to delete.
     */
    where: productWhereUniqueInput
  }


  /**
   * product deleteMany
   */
  export type productDeleteManyArgs = {
    /**
     * Filter which products to delete
     */
    where?: productWhereInput
  }


  /**
   * product.Company
   */
  export type product$CompanyArgs = {
    /**
     * Select specific fields to fetch from the company
     */
    select?: companySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: companyInclude | null
    where?: companyWhereInput
    orderBy?: Enumerable<companyOrderByWithRelationAndSearchRelevanceInput>
    cursor?: companyWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<CompanyScalarFieldEnum>
  }


  /**
   * product.request
   */
  export type product$requestArgs = {
    /**
     * Select specific fields to fetch from the request
     */
    select?: requestSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: requestInclude | null
    where?: requestWhereInput
    orderBy?: Enumerable<requestOrderByWithRelationAndSearchRelevanceInput>
    cursor?: requestWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<RequestScalarFieldEnum>
  }


  /**
   * product.order
   */
  export type product$orderArgs = {
    /**
     * Select specific fields to fetch from the order
     */
    select?: orderSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: orderInclude | null
    where?: orderWhereInput
    orderBy?: Enumerable<orderOrderByWithRelationAndSearchRelevanceInput>
    cursor?: orderWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<OrderScalarFieldEnum>
  }


  /**
   * product without action
   */
  export type productArgs = {
    /**
     * Select specific fields to fetch from the product
     */
    select?: productSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productInclude | null
  }



  /**
   * Model order
   */


  export type AggregateOrder = {
    _count: OrderCountAggregateOutputType | null
    _avg: OrderAvgAggregateOutputType | null
    _sum: OrderSumAggregateOutputType | null
    _min: OrderMinAggregateOutputType | null
    _max: OrderMaxAggregateOutputType | null
  }

  export type OrderAvgAggregateOutputType = {
    quantity: number | null
    total: number | null
    discount: number | null
  }

  export type OrderSumAggregateOutputType = {
    quantity: number | null
    total: number | null
    discount: number | null
  }

  export type OrderMinAggregateOutputType = {
    orderID: string | null
    quantity: number | null
    total: number | null
    companyID: string | null
    payment: string | null
    status: orderStatus | null
    discount: number | null
    createdAt: Date | null
    userID: string | null
  }

  export type OrderMaxAggregateOutputType = {
    orderID: string | null
    quantity: number | null
    total: number | null
    companyID: string | null
    payment: string | null
    status: orderStatus | null
    discount: number | null
    createdAt: Date | null
    userID: string | null
  }

  export type OrderCountAggregateOutputType = {
    orderID: number
    quantity: number
    total: number
    companyID: number
    payment: number
    status: number
    discount: number
    createdAt: number
    userID: number
    _all: number
  }


  export type OrderAvgAggregateInputType = {
    quantity?: true
    total?: true
    discount?: true
  }

  export type OrderSumAggregateInputType = {
    quantity?: true
    total?: true
    discount?: true
  }

  export type OrderMinAggregateInputType = {
    orderID?: true
    quantity?: true
    total?: true
    companyID?: true
    payment?: true
    status?: true
    discount?: true
    createdAt?: true
    userID?: true
  }

  export type OrderMaxAggregateInputType = {
    orderID?: true
    quantity?: true
    total?: true
    companyID?: true
    payment?: true
    status?: true
    discount?: true
    createdAt?: true
    userID?: true
  }

  export type OrderCountAggregateInputType = {
    orderID?: true
    quantity?: true
    total?: true
    companyID?: true
    payment?: true
    status?: true
    discount?: true
    createdAt?: true
    userID?: true
    _all?: true
  }

  export type OrderAggregateArgs = {
    /**
     * Filter which order to aggregate.
     */
    where?: orderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of orders to fetch.
     */
    orderBy?: Enumerable<orderOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: orderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` orders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned orders
    **/
    _count?: true | OrderCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: OrderAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: OrderSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OrderMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OrderMaxAggregateInputType
  }

  export type GetOrderAggregateType<T extends OrderAggregateArgs> = {
        [P in keyof T & keyof AggregateOrder]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOrder[P]>
      : GetScalarType<T[P], AggregateOrder[P]>
  }




  export type OrderGroupByArgs = {
    where?: orderWhereInput
    orderBy?: Enumerable<orderOrderByWithAggregationInput>
    by: OrderScalarFieldEnum[]
    having?: orderScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OrderCountAggregateInputType | true
    _avg?: OrderAvgAggregateInputType
    _sum?: OrderSumAggregateInputType
    _min?: OrderMinAggregateInputType
    _max?: OrderMaxAggregateInputType
  }


  export type OrderGroupByOutputType = {
    orderID: string
    quantity: number
    total: number
    companyID: string
    payment: string
    status: orderStatus
    discount: number
    createdAt: Date
    userID: string
    _count: OrderCountAggregateOutputType | null
    _avg: OrderAvgAggregateOutputType | null
    _sum: OrderSumAggregateOutputType | null
    _min: OrderMinAggregateOutputType | null
    _max: OrderMaxAggregateOutputType | null
  }

  type GetOrderGroupByPayload<T extends OrderGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<OrderGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OrderGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OrderGroupByOutputType[P]>
            : GetScalarType<T[P], OrderGroupByOutputType[P]>
        }
      >
    >


  export type orderSelect = {
    orderID?: boolean
    quantity?: boolean
    total?: boolean
    companyID?: boolean
    payment?: boolean
    status?: boolean
    discount?: boolean
    createdAt?: boolean
    userID?: boolean
    Product?: boolean | order$ProductArgs
    Company?: boolean | companyArgs
    User?: boolean | UserArgs
    _count?: boolean | OrderCountOutputTypeArgs
  }


  export type orderInclude = {
    Product?: boolean | order$ProductArgs
    Company?: boolean | companyArgs
    User?: boolean | UserArgs
    _count?: boolean | OrderCountOutputTypeArgs
  }

  export type orderGetPayload<S extends boolean | null | undefined | orderArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? order :
    S extends undefined ? never :
    S extends { include: any } & (orderArgs | orderFindManyArgs)
    ? order  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'Product' ? Array < productGetPayload<S['include'][P]>>  :
        P extends 'Company' ? companyGetPayload<S['include'][P]> :
        P extends 'User' ? UserGetPayload<S['include'][P]> :
        P extends '_count' ? OrderCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (orderArgs | orderFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'Product' ? Array < productGetPayload<S['select'][P]>>  :
        P extends 'Company' ? companyGetPayload<S['select'][P]> :
        P extends 'User' ? UserGetPayload<S['select'][P]> :
        P extends '_count' ? OrderCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof order ? order[P] : never
  } 
      : order


  type orderCountArgs = 
    Omit<orderFindManyArgs, 'select' | 'include'> & {
      select?: OrderCountAggregateInputType | true
    }

  export interface orderDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Order that matches the filter.
     * @param {orderFindUniqueArgs} args - Arguments to find a Order
     * @example
     * // Get one Order
     * const order = await prisma.order.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends orderFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, orderFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'order'> extends True ? Prisma__orderClient<orderGetPayload<T>> : Prisma__orderClient<orderGetPayload<T> | null, null>

    /**
     * Find one Order that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {orderFindUniqueOrThrowArgs} args - Arguments to find a Order
     * @example
     * // Get one Order
     * const order = await prisma.order.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends orderFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, orderFindUniqueOrThrowArgs>
    ): Prisma__orderClient<orderGetPayload<T>>

    /**
     * Find the first Order that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {orderFindFirstArgs} args - Arguments to find a Order
     * @example
     * // Get one Order
     * const order = await prisma.order.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends orderFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, orderFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'order'> extends True ? Prisma__orderClient<orderGetPayload<T>> : Prisma__orderClient<orderGetPayload<T> | null, null>

    /**
     * Find the first Order that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {orderFindFirstOrThrowArgs} args - Arguments to find a Order
     * @example
     * // Get one Order
     * const order = await prisma.order.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends orderFindFirstOrThrowArgs>(
      args?: SelectSubset<T, orderFindFirstOrThrowArgs>
    ): Prisma__orderClient<orderGetPayload<T>>

    /**
     * Find zero or more Orders that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {orderFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Orders
     * const orders = await prisma.order.findMany()
     * 
     * // Get first 10 Orders
     * const orders = await prisma.order.findMany({ take: 10 })
     * 
     * // Only select the `orderID`
     * const orderWithOrderIDOnly = await prisma.order.findMany({ select: { orderID: true } })
     * 
    **/
    findMany<T extends orderFindManyArgs>(
      args?: SelectSubset<T, orderFindManyArgs>
    ): Prisma.PrismaPromise<Array<orderGetPayload<T>>>

    /**
     * Create a Order.
     * @param {orderCreateArgs} args - Arguments to create a Order.
     * @example
     * // Create one Order
     * const Order = await prisma.order.create({
     *   data: {
     *     // ... data to create a Order
     *   }
     * })
     * 
    **/
    create<T extends orderCreateArgs>(
      args: SelectSubset<T, orderCreateArgs>
    ): Prisma__orderClient<orderGetPayload<T>>

    /**
     * Create many Orders.
     *     @param {orderCreateManyArgs} args - Arguments to create many Orders.
     *     @example
     *     // Create many Orders
     *     const order = await prisma.order.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends orderCreateManyArgs>(
      args?: SelectSubset<T, orderCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Order.
     * @param {orderDeleteArgs} args - Arguments to delete one Order.
     * @example
     * // Delete one Order
     * const Order = await prisma.order.delete({
     *   where: {
     *     // ... filter to delete one Order
     *   }
     * })
     * 
    **/
    delete<T extends orderDeleteArgs>(
      args: SelectSubset<T, orderDeleteArgs>
    ): Prisma__orderClient<orderGetPayload<T>>

    /**
     * Update one Order.
     * @param {orderUpdateArgs} args - Arguments to update one Order.
     * @example
     * // Update one Order
     * const order = await prisma.order.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends orderUpdateArgs>(
      args: SelectSubset<T, orderUpdateArgs>
    ): Prisma__orderClient<orderGetPayload<T>>

    /**
     * Delete zero or more Orders.
     * @param {orderDeleteManyArgs} args - Arguments to filter Orders to delete.
     * @example
     * // Delete a few Orders
     * const { count } = await prisma.order.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends orderDeleteManyArgs>(
      args?: SelectSubset<T, orderDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Orders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {orderUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Orders
     * const order = await prisma.order.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends orderUpdateManyArgs>(
      args: SelectSubset<T, orderUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Order.
     * @param {orderUpsertArgs} args - Arguments to update or create a Order.
     * @example
     * // Update or create a Order
     * const order = await prisma.order.upsert({
     *   create: {
     *     // ... data to create a Order
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Order we want to update
     *   }
     * })
    **/
    upsert<T extends orderUpsertArgs>(
      args: SelectSubset<T, orderUpsertArgs>
    ): Prisma__orderClient<orderGetPayload<T>>

    /**
     * Count the number of Orders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {orderCountArgs} args - Arguments to filter Orders to count.
     * @example
     * // Count the number of Orders
     * const count = await prisma.order.count({
     *   where: {
     *     // ... the filter for the Orders we want to count
     *   }
     * })
    **/
    count<T extends orderCountArgs>(
      args?: Subset<T, orderCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OrderCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Order.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OrderAggregateArgs>(args: Subset<T, OrderAggregateArgs>): Prisma.PrismaPromise<GetOrderAggregateType<T>>

    /**
     * Group by Order.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OrderGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OrderGroupByArgs['orderBy'] }
        : { orderBy?: OrderGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OrderGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOrderGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for order.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__orderClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    Product<T extends order$ProductArgs= {}>(args?: Subset<T, order$ProductArgs>): Prisma.PrismaPromise<Array<productGetPayload<T>>| Null>;

    Company<T extends companyArgs= {}>(args?: Subset<T, companyArgs>): Prisma__companyClient<companyGetPayload<T> | Null>;

    User<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * order base type for findUnique actions
   */
  export type orderFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the order
     */
    select?: orderSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: orderInclude | null
    /**
     * Filter, which order to fetch.
     */
    where: orderWhereUniqueInput
  }

  /**
   * order findUnique
   */
  export interface orderFindUniqueArgs extends orderFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * order findUniqueOrThrow
   */
  export type orderFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the order
     */
    select?: orderSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: orderInclude | null
    /**
     * Filter, which order to fetch.
     */
    where: orderWhereUniqueInput
  }


  /**
   * order base type for findFirst actions
   */
  export type orderFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the order
     */
    select?: orderSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: orderInclude | null
    /**
     * Filter, which order to fetch.
     */
    where?: orderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of orders to fetch.
     */
    orderBy?: Enumerable<orderOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for orders.
     */
    cursor?: orderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` orders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of orders.
     */
    distinct?: Enumerable<OrderScalarFieldEnum>
  }

  /**
   * order findFirst
   */
  export interface orderFindFirstArgs extends orderFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * order findFirstOrThrow
   */
  export type orderFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the order
     */
    select?: orderSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: orderInclude | null
    /**
     * Filter, which order to fetch.
     */
    where?: orderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of orders to fetch.
     */
    orderBy?: Enumerable<orderOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for orders.
     */
    cursor?: orderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` orders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of orders.
     */
    distinct?: Enumerable<OrderScalarFieldEnum>
  }


  /**
   * order findMany
   */
  export type orderFindManyArgs = {
    /**
     * Select specific fields to fetch from the order
     */
    select?: orderSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: orderInclude | null
    /**
     * Filter, which orders to fetch.
     */
    where?: orderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of orders to fetch.
     */
    orderBy?: Enumerable<orderOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing orders.
     */
    cursor?: orderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` orders.
     */
    skip?: number
    distinct?: Enumerable<OrderScalarFieldEnum>
  }


  /**
   * order create
   */
  export type orderCreateArgs = {
    /**
     * Select specific fields to fetch from the order
     */
    select?: orderSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: orderInclude | null
    /**
     * The data needed to create a order.
     */
    data: XOR<orderCreateInput, orderUncheckedCreateInput>
  }


  /**
   * order createMany
   */
  export type orderCreateManyArgs = {
    /**
     * The data used to create many orders.
     */
    data: Enumerable<orderCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * order update
   */
  export type orderUpdateArgs = {
    /**
     * Select specific fields to fetch from the order
     */
    select?: orderSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: orderInclude | null
    /**
     * The data needed to update a order.
     */
    data: XOR<orderUpdateInput, orderUncheckedUpdateInput>
    /**
     * Choose, which order to update.
     */
    where: orderWhereUniqueInput
  }


  /**
   * order updateMany
   */
  export type orderUpdateManyArgs = {
    /**
     * The data used to update orders.
     */
    data: XOR<orderUpdateManyMutationInput, orderUncheckedUpdateManyInput>
    /**
     * Filter which orders to update
     */
    where?: orderWhereInput
  }


  /**
   * order upsert
   */
  export type orderUpsertArgs = {
    /**
     * Select specific fields to fetch from the order
     */
    select?: orderSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: orderInclude | null
    /**
     * The filter to search for the order to update in case it exists.
     */
    where: orderWhereUniqueInput
    /**
     * In case the order found by the `where` argument doesn't exist, create a new order with this data.
     */
    create: XOR<orderCreateInput, orderUncheckedCreateInput>
    /**
     * In case the order was found with the provided `where` argument, update it with this data.
     */
    update: XOR<orderUpdateInput, orderUncheckedUpdateInput>
  }


  /**
   * order delete
   */
  export type orderDeleteArgs = {
    /**
     * Select specific fields to fetch from the order
     */
    select?: orderSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: orderInclude | null
    /**
     * Filter which order to delete.
     */
    where: orderWhereUniqueInput
  }


  /**
   * order deleteMany
   */
  export type orderDeleteManyArgs = {
    /**
     * Filter which orders to delete
     */
    where?: orderWhereInput
  }


  /**
   * order.Product
   */
  export type order$ProductArgs = {
    /**
     * Select specific fields to fetch from the product
     */
    select?: productSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productInclude | null
    where?: productWhereInput
    orderBy?: Enumerable<productOrderByWithRelationAndSearchRelevanceInput>
    cursor?: productWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ProductScalarFieldEnum>
  }


  /**
   * order without action
   */
  export type orderArgs = {
    /**
     * Select specific fields to fetch from the order
     */
    select?: orderSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: orderInclude | null
  }



  /**
   * Model request
   */


  export type AggregateRequest = {
    _count: RequestCountAggregateOutputType | null
    _avg: RequestAvgAggregateOutputType | null
    _sum: RequestSumAggregateOutputType | null
    _min: RequestMinAggregateOutputType | null
    _max: RequestMaxAggregateOutputType | null
  }

  export type RequestAvgAggregateOutputType = {
    quantity: number | null
  }

  export type RequestSumAggregateOutputType = {
    quantity: number | null
  }

  export type RequestMinAggregateOutputType = {
    requestID: string | null
    message: string | null
    quantity: number | null
    status: requestStatus | null
    createdAt: Date | null
    userID: string | null
    notificationID: string | null
  }

  export type RequestMaxAggregateOutputType = {
    requestID: string | null
    message: string | null
    quantity: number | null
    status: requestStatus | null
    createdAt: Date | null
    userID: string | null
    notificationID: string | null
  }

  export type RequestCountAggregateOutputType = {
    requestID: number
    message: number
    quantity: number
    status: number
    createdAt: number
    userID: number
    notificationID: number
    _all: number
  }


  export type RequestAvgAggregateInputType = {
    quantity?: true
  }

  export type RequestSumAggregateInputType = {
    quantity?: true
  }

  export type RequestMinAggregateInputType = {
    requestID?: true
    message?: true
    quantity?: true
    status?: true
    createdAt?: true
    userID?: true
    notificationID?: true
  }

  export type RequestMaxAggregateInputType = {
    requestID?: true
    message?: true
    quantity?: true
    status?: true
    createdAt?: true
    userID?: true
    notificationID?: true
  }

  export type RequestCountAggregateInputType = {
    requestID?: true
    message?: true
    quantity?: true
    status?: true
    createdAt?: true
    userID?: true
    notificationID?: true
    _all?: true
  }

  export type RequestAggregateArgs = {
    /**
     * Filter which request to aggregate.
     */
    where?: requestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of requests to fetch.
     */
    orderBy?: Enumerable<requestOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: requestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` requests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` requests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned requests
    **/
    _count?: true | RequestCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RequestAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RequestSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RequestMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RequestMaxAggregateInputType
  }

  export type GetRequestAggregateType<T extends RequestAggregateArgs> = {
        [P in keyof T & keyof AggregateRequest]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRequest[P]>
      : GetScalarType<T[P], AggregateRequest[P]>
  }




  export type RequestGroupByArgs = {
    where?: requestWhereInput
    orderBy?: Enumerable<requestOrderByWithAggregationInput>
    by: RequestScalarFieldEnum[]
    having?: requestScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RequestCountAggregateInputType | true
    _avg?: RequestAvgAggregateInputType
    _sum?: RequestSumAggregateInputType
    _min?: RequestMinAggregateInputType
    _max?: RequestMaxAggregateInputType
  }


  export type RequestGroupByOutputType = {
    requestID: string
    message: string
    quantity: number | null
    status: requestStatus
    createdAt: Date
    userID: string
    notificationID: string | null
    _count: RequestCountAggregateOutputType | null
    _avg: RequestAvgAggregateOutputType | null
    _sum: RequestSumAggregateOutputType | null
    _min: RequestMinAggregateOutputType | null
    _max: RequestMaxAggregateOutputType | null
  }

  type GetRequestGroupByPayload<T extends RequestGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<RequestGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RequestGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RequestGroupByOutputType[P]>
            : GetScalarType<T[P], RequestGroupByOutputType[P]>
        }
      >
    >


  export type requestSelect = {
    requestID?: boolean
    message?: boolean
    quantity?: boolean
    status?: boolean
    createdAt?: boolean
    userID?: boolean
    notificationID?: boolean
    Product?: boolean | request$ProductArgs
    User?: boolean | UserArgs
    notification?: boolean | notificationArgs
    _count?: boolean | RequestCountOutputTypeArgs
  }


  export type requestInclude = {
    Product?: boolean | request$ProductArgs
    User?: boolean | UserArgs
    notification?: boolean | notificationArgs
    _count?: boolean | RequestCountOutputTypeArgs
  }

  export type requestGetPayload<S extends boolean | null | undefined | requestArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? request :
    S extends undefined ? never :
    S extends { include: any } & (requestArgs | requestFindManyArgs)
    ? request  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'Product' ? Array < productGetPayload<S['include'][P]>>  :
        P extends 'User' ? UserGetPayload<S['include'][P]> :
        P extends 'notification' ? notificationGetPayload<S['include'][P]> | null :
        P extends '_count' ? RequestCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (requestArgs | requestFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'Product' ? Array < productGetPayload<S['select'][P]>>  :
        P extends 'User' ? UserGetPayload<S['select'][P]> :
        P extends 'notification' ? notificationGetPayload<S['select'][P]> | null :
        P extends '_count' ? RequestCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof request ? request[P] : never
  } 
      : request


  type requestCountArgs = 
    Omit<requestFindManyArgs, 'select' | 'include'> & {
      select?: RequestCountAggregateInputType | true
    }

  export interface requestDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Request that matches the filter.
     * @param {requestFindUniqueArgs} args - Arguments to find a Request
     * @example
     * // Get one Request
     * const request = await prisma.request.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends requestFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, requestFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'request'> extends True ? Prisma__requestClient<requestGetPayload<T>> : Prisma__requestClient<requestGetPayload<T> | null, null>

    /**
     * Find one Request that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {requestFindUniqueOrThrowArgs} args - Arguments to find a Request
     * @example
     * // Get one Request
     * const request = await prisma.request.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends requestFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, requestFindUniqueOrThrowArgs>
    ): Prisma__requestClient<requestGetPayload<T>>

    /**
     * Find the first Request that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {requestFindFirstArgs} args - Arguments to find a Request
     * @example
     * // Get one Request
     * const request = await prisma.request.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends requestFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, requestFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'request'> extends True ? Prisma__requestClient<requestGetPayload<T>> : Prisma__requestClient<requestGetPayload<T> | null, null>

    /**
     * Find the first Request that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {requestFindFirstOrThrowArgs} args - Arguments to find a Request
     * @example
     * // Get one Request
     * const request = await prisma.request.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends requestFindFirstOrThrowArgs>(
      args?: SelectSubset<T, requestFindFirstOrThrowArgs>
    ): Prisma__requestClient<requestGetPayload<T>>

    /**
     * Find zero or more Requests that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {requestFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Requests
     * const requests = await prisma.request.findMany()
     * 
     * // Get first 10 Requests
     * const requests = await prisma.request.findMany({ take: 10 })
     * 
     * // Only select the `requestID`
     * const requestWithRequestIDOnly = await prisma.request.findMany({ select: { requestID: true } })
     * 
    **/
    findMany<T extends requestFindManyArgs>(
      args?: SelectSubset<T, requestFindManyArgs>
    ): Prisma.PrismaPromise<Array<requestGetPayload<T>>>

    /**
     * Create a Request.
     * @param {requestCreateArgs} args - Arguments to create a Request.
     * @example
     * // Create one Request
     * const Request = await prisma.request.create({
     *   data: {
     *     // ... data to create a Request
     *   }
     * })
     * 
    **/
    create<T extends requestCreateArgs>(
      args: SelectSubset<T, requestCreateArgs>
    ): Prisma__requestClient<requestGetPayload<T>>

    /**
     * Create many Requests.
     *     @param {requestCreateManyArgs} args - Arguments to create many Requests.
     *     @example
     *     // Create many Requests
     *     const request = await prisma.request.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends requestCreateManyArgs>(
      args?: SelectSubset<T, requestCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Request.
     * @param {requestDeleteArgs} args - Arguments to delete one Request.
     * @example
     * // Delete one Request
     * const Request = await prisma.request.delete({
     *   where: {
     *     // ... filter to delete one Request
     *   }
     * })
     * 
    **/
    delete<T extends requestDeleteArgs>(
      args: SelectSubset<T, requestDeleteArgs>
    ): Prisma__requestClient<requestGetPayload<T>>

    /**
     * Update one Request.
     * @param {requestUpdateArgs} args - Arguments to update one Request.
     * @example
     * // Update one Request
     * const request = await prisma.request.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends requestUpdateArgs>(
      args: SelectSubset<T, requestUpdateArgs>
    ): Prisma__requestClient<requestGetPayload<T>>

    /**
     * Delete zero or more Requests.
     * @param {requestDeleteManyArgs} args - Arguments to filter Requests to delete.
     * @example
     * // Delete a few Requests
     * const { count } = await prisma.request.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends requestDeleteManyArgs>(
      args?: SelectSubset<T, requestDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Requests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {requestUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Requests
     * const request = await prisma.request.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends requestUpdateManyArgs>(
      args: SelectSubset<T, requestUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Request.
     * @param {requestUpsertArgs} args - Arguments to update or create a Request.
     * @example
     * // Update or create a Request
     * const request = await prisma.request.upsert({
     *   create: {
     *     // ... data to create a Request
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Request we want to update
     *   }
     * })
    **/
    upsert<T extends requestUpsertArgs>(
      args: SelectSubset<T, requestUpsertArgs>
    ): Prisma__requestClient<requestGetPayload<T>>

    /**
     * Count the number of Requests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {requestCountArgs} args - Arguments to filter Requests to count.
     * @example
     * // Count the number of Requests
     * const count = await prisma.request.count({
     *   where: {
     *     // ... the filter for the Requests we want to count
     *   }
     * })
    **/
    count<T extends requestCountArgs>(
      args?: Subset<T, requestCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RequestCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Request.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RequestAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RequestAggregateArgs>(args: Subset<T, RequestAggregateArgs>): Prisma.PrismaPromise<GetRequestAggregateType<T>>

    /**
     * Group by Request.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RequestGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RequestGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RequestGroupByArgs['orderBy'] }
        : { orderBy?: RequestGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RequestGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRequestGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for request.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__requestClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    Product<T extends request$ProductArgs= {}>(args?: Subset<T, request$ProductArgs>): Prisma.PrismaPromise<Array<productGetPayload<T>>| Null>;

    User<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    notification<T extends notificationArgs= {}>(args?: Subset<T, notificationArgs>): Prisma__notificationClient<notificationGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * request base type for findUnique actions
   */
  export type requestFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the request
     */
    select?: requestSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: requestInclude | null
    /**
     * Filter, which request to fetch.
     */
    where: requestWhereUniqueInput
  }

  /**
   * request findUnique
   */
  export interface requestFindUniqueArgs extends requestFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * request findUniqueOrThrow
   */
  export type requestFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the request
     */
    select?: requestSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: requestInclude | null
    /**
     * Filter, which request to fetch.
     */
    where: requestWhereUniqueInput
  }


  /**
   * request base type for findFirst actions
   */
  export type requestFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the request
     */
    select?: requestSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: requestInclude | null
    /**
     * Filter, which request to fetch.
     */
    where?: requestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of requests to fetch.
     */
    orderBy?: Enumerable<requestOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for requests.
     */
    cursor?: requestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` requests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` requests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of requests.
     */
    distinct?: Enumerable<RequestScalarFieldEnum>
  }

  /**
   * request findFirst
   */
  export interface requestFindFirstArgs extends requestFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * request findFirstOrThrow
   */
  export type requestFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the request
     */
    select?: requestSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: requestInclude | null
    /**
     * Filter, which request to fetch.
     */
    where?: requestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of requests to fetch.
     */
    orderBy?: Enumerable<requestOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for requests.
     */
    cursor?: requestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` requests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` requests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of requests.
     */
    distinct?: Enumerable<RequestScalarFieldEnum>
  }


  /**
   * request findMany
   */
  export type requestFindManyArgs = {
    /**
     * Select specific fields to fetch from the request
     */
    select?: requestSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: requestInclude | null
    /**
     * Filter, which requests to fetch.
     */
    where?: requestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of requests to fetch.
     */
    orderBy?: Enumerable<requestOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing requests.
     */
    cursor?: requestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` requests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` requests.
     */
    skip?: number
    distinct?: Enumerable<RequestScalarFieldEnum>
  }


  /**
   * request create
   */
  export type requestCreateArgs = {
    /**
     * Select specific fields to fetch from the request
     */
    select?: requestSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: requestInclude | null
    /**
     * The data needed to create a request.
     */
    data: XOR<requestCreateInput, requestUncheckedCreateInput>
  }


  /**
   * request createMany
   */
  export type requestCreateManyArgs = {
    /**
     * The data used to create many requests.
     */
    data: Enumerable<requestCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * request update
   */
  export type requestUpdateArgs = {
    /**
     * Select specific fields to fetch from the request
     */
    select?: requestSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: requestInclude | null
    /**
     * The data needed to update a request.
     */
    data: XOR<requestUpdateInput, requestUncheckedUpdateInput>
    /**
     * Choose, which request to update.
     */
    where: requestWhereUniqueInput
  }


  /**
   * request updateMany
   */
  export type requestUpdateManyArgs = {
    /**
     * The data used to update requests.
     */
    data: XOR<requestUpdateManyMutationInput, requestUncheckedUpdateManyInput>
    /**
     * Filter which requests to update
     */
    where?: requestWhereInput
  }


  /**
   * request upsert
   */
  export type requestUpsertArgs = {
    /**
     * Select specific fields to fetch from the request
     */
    select?: requestSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: requestInclude | null
    /**
     * The filter to search for the request to update in case it exists.
     */
    where: requestWhereUniqueInput
    /**
     * In case the request found by the `where` argument doesn't exist, create a new request with this data.
     */
    create: XOR<requestCreateInput, requestUncheckedCreateInput>
    /**
     * In case the request was found with the provided `where` argument, update it with this data.
     */
    update: XOR<requestUpdateInput, requestUncheckedUpdateInput>
  }


  /**
   * request delete
   */
  export type requestDeleteArgs = {
    /**
     * Select specific fields to fetch from the request
     */
    select?: requestSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: requestInclude | null
    /**
     * Filter which request to delete.
     */
    where: requestWhereUniqueInput
  }


  /**
   * request deleteMany
   */
  export type requestDeleteManyArgs = {
    /**
     * Filter which requests to delete
     */
    where?: requestWhereInput
  }


  /**
   * request.Product
   */
  export type request$ProductArgs = {
    /**
     * Select specific fields to fetch from the product
     */
    select?: productSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productInclude | null
    where?: productWhereInput
    orderBy?: Enumerable<productOrderByWithRelationAndSearchRelevanceInput>
    cursor?: productWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ProductScalarFieldEnum>
  }


  /**
   * request without action
   */
  export type requestArgs = {
    /**
     * Select specific fields to fetch from the request
     */
    select?: requestSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: requestInclude | null
  }



  /**
   * Model otp
   */


  export type AggregateOtp = {
    _count: OtpCountAggregateOutputType | null
    _min: OtpMinAggregateOutputType | null
    _max: OtpMaxAggregateOutputType | null
  }

  export type OtpMinAggregateOutputType = {
    otID: string | null
    otp: string | null
    createdAt: Date | null
    expiredAt: Date | null
  }

  export type OtpMaxAggregateOutputType = {
    otID: string | null
    otp: string | null
    createdAt: Date | null
    expiredAt: Date | null
  }

  export type OtpCountAggregateOutputType = {
    otID: number
    otp: number
    createdAt: number
    expiredAt: number
    _all: number
  }


  export type OtpMinAggregateInputType = {
    otID?: true
    otp?: true
    createdAt?: true
    expiredAt?: true
  }

  export type OtpMaxAggregateInputType = {
    otID?: true
    otp?: true
    createdAt?: true
    expiredAt?: true
  }

  export type OtpCountAggregateInputType = {
    otID?: true
    otp?: true
    createdAt?: true
    expiredAt?: true
    _all?: true
  }

  export type OtpAggregateArgs = {
    /**
     * Filter which otp to aggregate.
     */
    where?: otpWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of otps to fetch.
     */
    orderBy?: Enumerable<otpOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: otpWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` otps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` otps.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned otps
    **/
    _count?: true | OtpCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OtpMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OtpMaxAggregateInputType
  }

  export type GetOtpAggregateType<T extends OtpAggregateArgs> = {
        [P in keyof T & keyof AggregateOtp]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOtp[P]>
      : GetScalarType<T[P], AggregateOtp[P]>
  }




  export type OtpGroupByArgs = {
    where?: otpWhereInput
    orderBy?: Enumerable<otpOrderByWithAggregationInput>
    by: OtpScalarFieldEnum[]
    having?: otpScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OtpCountAggregateInputType | true
    _min?: OtpMinAggregateInputType
    _max?: OtpMaxAggregateInputType
  }


  export type OtpGroupByOutputType = {
    otID: string
    otp: string
    createdAt: Date
    expiredAt: Date
    _count: OtpCountAggregateOutputType | null
    _min: OtpMinAggregateOutputType | null
    _max: OtpMaxAggregateOutputType | null
  }

  type GetOtpGroupByPayload<T extends OtpGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<OtpGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OtpGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OtpGroupByOutputType[P]>
            : GetScalarType<T[P], OtpGroupByOutputType[P]>
        }
      >
    >


  export type otpSelect = {
    otID?: boolean
    otp?: boolean
    createdAt?: boolean
    expiredAt?: boolean
  }


  export type otpGetPayload<S extends boolean | null | undefined | otpArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? otp :
    S extends undefined ? never :
    S extends { include: any } & (otpArgs | otpFindManyArgs)
    ? otp 
    : S extends { select: any } & (otpArgs | otpFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof otp ? otp[P] : never
  } 
      : otp


  type otpCountArgs = 
    Omit<otpFindManyArgs, 'select' | 'include'> & {
      select?: OtpCountAggregateInputType | true
    }

  export interface otpDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Otp that matches the filter.
     * @param {otpFindUniqueArgs} args - Arguments to find a Otp
     * @example
     * // Get one Otp
     * const otp = await prisma.otp.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends otpFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, otpFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'otp'> extends True ? Prisma__otpClient<otpGetPayload<T>> : Prisma__otpClient<otpGetPayload<T> | null, null>

    /**
     * Find one Otp that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {otpFindUniqueOrThrowArgs} args - Arguments to find a Otp
     * @example
     * // Get one Otp
     * const otp = await prisma.otp.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends otpFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, otpFindUniqueOrThrowArgs>
    ): Prisma__otpClient<otpGetPayload<T>>

    /**
     * Find the first Otp that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {otpFindFirstArgs} args - Arguments to find a Otp
     * @example
     * // Get one Otp
     * const otp = await prisma.otp.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends otpFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, otpFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'otp'> extends True ? Prisma__otpClient<otpGetPayload<T>> : Prisma__otpClient<otpGetPayload<T> | null, null>

    /**
     * Find the first Otp that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {otpFindFirstOrThrowArgs} args - Arguments to find a Otp
     * @example
     * // Get one Otp
     * const otp = await prisma.otp.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends otpFindFirstOrThrowArgs>(
      args?: SelectSubset<T, otpFindFirstOrThrowArgs>
    ): Prisma__otpClient<otpGetPayload<T>>

    /**
     * Find zero or more Otps that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {otpFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Otps
     * const otps = await prisma.otp.findMany()
     * 
     * // Get first 10 Otps
     * const otps = await prisma.otp.findMany({ take: 10 })
     * 
     * // Only select the `otID`
     * const otpWithOtIDOnly = await prisma.otp.findMany({ select: { otID: true } })
     * 
    **/
    findMany<T extends otpFindManyArgs>(
      args?: SelectSubset<T, otpFindManyArgs>
    ): Prisma.PrismaPromise<Array<otpGetPayload<T>>>

    /**
     * Create a Otp.
     * @param {otpCreateArgs} args - Arguments to create a Otp.
     * @example
     * // Create one Otp
     * const Otp = await prisma.otp.create({
     *   data: {
     *     // ... data to create a Otp
     *   }
     * })
     * 
    **/
    create<T extends otpCreateArgs>(
      args: SelectSubset<T, otpCreateArgs>
    ): Prisma__otpClient<otpGetPayload<T>>

    /**
     * Create many Otps.
     *     @param {otpCreateManyArgs} args - Arguments to create many Otps.
     *     @example
     *     // Create many Otps
     *     const otp = await prisma.otp.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends otpCreateManyArgs>(
      args?: SelectSubset<T, otpCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Otp.
     * @param {otpDeleteArgs} args - Arguments to delete one Otp.
     * @example
     * // Delete one Otp
     * const Otp = await prisma.otp.delete({
     *   where: {
     *     // ... filter to delete one Otp
     *   }
     * })
     * 
    **/
    delete<T extends otpDeleteArgs>(
      args: SelectSubset<T, otpDeleteArgs>
    ): Prisma__otpClient<otpGetPayload<T>>

    /**
     * Update one Otp.
     * @param {otpUpdateArgs} args - Arguments to update one Otp.
     * @example
     * // Update one Otp
     * const otp = await prisma.otp.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends otpUpdateArgs>(
      args: SelectSubset<T, otpUpdateArgs>
    ): Prisma__otpClient<otpGetPayload<T>>

    /**
     * Delete zero or more Otps.
     * @param {otpDeleteManyArgs} args - Arguments to filter Otps to delete.
     * @example
     * // Delete a few Otps
     * const { count } = await prisma.otp.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends otpDeleteManyArgs>(
      args?: SelectSubset<T, otpDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Otps.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {otpUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Otps
     * const otp = await prisma.otp.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends otpUpdateManyArgs>(
      args: SelectSubset<T, otpUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Otp.
     * @param {otpUpsertArgs} args - Arguments to update or create a Otp.
     * @example
     * // Update or create a Otp
     * const otp = await prisma.otp.upsert({
     *   create: {
     *     // ... data to create a Otp
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Otp we want to update
     *   }
     * })
    **/
    upsert<T extends otpUpsertArgs>(
      args: SelectSubset<T, otpUpsertArgs>
    ): Prisma__otpClient<otpGetPayload<T>>

    /**
     * Count the number of Otps.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {otpCountArgs} args - Arguments to filter Otps to count.
     * @example
     * // Count the number of Otps
     * const count = await prisma.otp.count({
     *   where: {
     *     // ... the filter for the Otps we want to count
     *   }
     * })
    **/
    count<T extends otpCountArgs>(
      args?: Subset<T, otpCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OtpCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Otp.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OtpAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OtpAggregateArgs>(args: Subset<T, OtpAggregateArgs>): Prisma.PrismaPromise<GetOtpAggregateType<T>>

    /**
     * Group by Otp.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OtpGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OtpGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OtpGroupByArgs['orderBy'] }
        : { orderBy?: OtpGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OtpGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOtpGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for otp.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__otpClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * otp base type for findUnique actions
   */
  export type otpFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the otp
     */
    select?: otpSelect | null
    /**
     * Filter, which otp to fetch.
     */
    where: otpWhereUniqueInput
  }

  /**
   * otp findUnique
   */
  export interface otpFindUniqueArgs extends otpFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * otp findUniqueOrThrow
   */
  export type otpFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the otp
     */
    select?: otpSelect | null
    /**
     * Filter, which otp to fetch.
     */
    where: otpWhereUniqueInput
  }


  /**
   * otp base type for findFirst actions
   */
  export type otpFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the otp
     */
    select?: otpSelect | null
    /**
     * Filter, which otp to fetch.
     */
    where?: otpWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of otps to fetch.
     */
    orderBy?: Enumerable<otpOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for otps.
     */
    cursor?: otpWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` otps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` otps.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of otps.
     */
    distinct?: Enumerable<OtpScalarFieldEnum>
  }

  /**
   * otp findFirst
   */
  export interface otpFindFirstArgs extends otpFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * otp findFirstOrThrow
   */
  export type otpFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the otp
     */
    select?: otpSelect | null
    /**
     * Filter, which otp to fetch.
     */
    where?: otpWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of otps to fetch.
     */
    orderBy?: Enumerable<otpOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for otps.
     */
    cursor?: otpWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` otps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` otps.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of otps.
     */
    distinct?: Enumerable<OtpScalarFieldEnum>
  }


  /**
   * otp findMany
   */
  export type otpFindManyArgs = {
    /**
     * Select specific fields to fetch from the otp
     */
    select?: otpSelect | null
    /**
     * Filter, which otps to fetch.
     */
    where?: otpWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of otps to fetch.
     */
    orderBy?: Enumerable<otpOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing otps.
     */
    cursor?: otpWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` otps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` otps.
     */
    skip?: number
    distinct?: Enumerable<OtpScalarFieldEnum>
  }


  /**
   * otp create
   */
  export type otpCreateArgs = {
    /**
     * Select specific fields to fetch from the otp
     */
    select?: otpSelect | null
    /**
     * The data needed to create a otp.
     */
    data: XOR<otpCreateInput, otpUncheckedCreateInput>
  }


  /**
   * otp createMany
   */
  export type otpCreateManyArgs = {
    /**
     * The data used to create many otps.
     */
    data: Enumerable<otpCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * otp update
   */
  export type otpUpdateArgs = {
    /**
     * Select specific fields to fetch from the otp
     */
    select?: otpSelect | null
    /**
     * The data needed to update a otp.
     */
    data: XOR<otpUpdateInput, otpUncheckedUpdateInput>
    /**
     * Choose, which otp to update.
     */
    where: otpWhereUniqueInput
  }


  /**
   * otp updateMany
   */
  export type otpUpdateManyArgs = {
    /**
     * The data used to update otps.
     */
    data: XOR<otpUpdateManyMutationInput, otpUncheckedUpdateManyInput>
    /**
     * Filter which otps to update
     */
    where?: otpWhereInput
  }


  /**
   * otp upsert
   */
  export type otpUpsertArgs = {
    /**
     * Select specific fields to fetch from the otp
     */
    select?: otpSelect | null
    /**
     * The filter to search for the otp to update in case it exists.
     */
    where: otpWhereUniqueInput
    /**
     * In case the otp found by the `where` argument doesn't exist, create a new otp with this data.
     */
    create: XOR<otpCreateInput, otpUncheckedCreateInput>
    /**
     * In case the otp was found with the provided `where` argument, update it with this data.
     */
    update: XOR<otpUpdateInput, otpUncheckedUpdateInput>
  }


  /**
   * otp delete
   */
  export type otpDeleteArgs = {
    /**
     * Select specific fields to fetch from the otp
     */
    select?: otpSelect | null
    /**
     * Filter which otp to delete.
     */
    where: otpWhereUniqueInput
  }


  /**
   * otp deleteMany
   */
  export type otpDeleteManyArgs = {
    /**
     * Filter which otps to delete
     */
    where?: otpWhereInput
  }


  /**
   * otp without action
   */
  export type otpArgs = {
    /**
     * Select specific fields to fetch from the otp
     */
    select?: otpSelect | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const AddressScalarFieldEnum: {
    addressID: 'addressID',
    city: 'city',
    street: 'street',
    province: 'province',
    zipcode: 'zipcode',
    companyID: 'companyID'
  };

  export type AddressScalarFieldEnum = (typeof AddressScalarFieldEnum)[keyof typeof AddressScalarFieldEnum]


  export const CompanyScalarFieldEnum: {
    companyID: 'companyID',
    companyName: 'companyName',
    userID: 'userID'
  };

  export type CompanyScalarFieldEnum = (typeof CompanyScalarFieldEnum)[keyof typeof CompanyScalarFieldEnum]


  export const LogsScalarFieldEnum: {
    logsID: 'logsID',
    log: 'log',
    createdAt: 'createdAt',
    userID: 'userID'
  };

  export type LogsScalarFieldEnum = (typeof LogsScalarFieldEnum)[keyof typeof LogsScalarFieldEnum]


  export const NotificationScalarFieldEnum: {
    notificationID: 'notificationID',
    title: 'title',
    notificationStatus: 'notificationStatus',
    createdAt: 'createdAt',
    userID: 'userID'
  };

  export type NotificationScalarFieldEnum = (typeof NotificationScalarFieldEnum)[keyof typeof NotificationScalarFieldEnum]


  export const OrderScalarFieldEnum: {
    orderID: 'orderID',
    quantity: 'quantity',
    total: 'total',
    companyID: 'companyID',
    payment: 'payment',
    status: 'status',
    discount: 'discount',
    createdAt: 'createdAt',
    userID: 'userID'
  };

  export type OrderScalarFieldEnum = (typeof OrderScalarFieldEnum)[keyof typeof OrderScalarFieldEnum]


  export const OtpScalarFieldEnum: {
    otID: 'otID',
    otp: 'otp',
    createdAt: 'createdAt',
    expiredAt: 'expiredAt'
  };

  export type OtpScalarFieldEnum = (typeof OtpScalarFieldEnum)[keyof typeof OtpScalarFieldEnum]


  export const ProductScalarFieldEnum: {
    productID: 'productID',
    sku: 'sku',
    title: 'title',
    price: 'price',
    stock: 'stock',
    userID: 'userID',
    status: 'status',
    createdAt: 'createdAt',
    notificationID: 'notificationID'
  };

  export type ProductScalarFieldEnum = (typeof ProductScalarFieldEnum)[keyof typeof ProductScalarFieldEnum]


  export const ProfileScalarFieldEnum: {
    profileID: 'profileID',
    firstname: 'firstname',
    lastname: 'lastname',
    birthday: 'birthday',
    phone: 'phone',
    userID: 'userID'
  };

  export type ProfileScalarFieldEnum = (typeof ProfileScalarFieldEnum)[keyof typeof ProfileScalarFieldEnum]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const RequestScalarFieldEnum: {
    requestID: 'requestID',
    message: 'message',
    quantity: 'quantity',
    status: 'status',
    createdAt: 'createdAt',
    userID: 'userID',
    notificationID: 'notificationID'
  };

  export type RequestScalarFieldEnum = (typeof RequestScalarFieldEnum)[keyof typeof RequestScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserOrderByRelevanceFieldEnum: {
    userID: 'userID',
    email: 'email',
    password: 'password'
  };

  export type UserOrderByRelevanceFieldEnum = (typeof UserOrderByRelevanceFieldEnum)[keyof typeof UserOrderByRelevanceFieldEnum]


  export const UserScalarFieldEnum: {
    userID: 'userID',
    email: 'email',
    password: 'password',
    role: 'role',
    createdAt: 'createdAt',
    locked: 'locked'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const addressOrderByRelevanceFieldEnum: {
    addressID: 'addressID',
    city: 'city',
    street: 'street',
    province: 'province',
    zipcode: 'zipcode',
    companyID: 'companyID'
  };

  export type addressOrderByRelevanceFieldEnum = (typeof addressOrderByRelevanceFieldEnum)[keyof typeof addressOrderByRelevanceFieldEnum]


  export const companyOrderByRelevanceFieldEnum: {
    companyID: 'companyID',
    companyName: 'companyName',
    userID: 'userID'
  };

  export type companyOrderByRelevanceFieldEnum = (typeof companyOrderByRelevanceFieldEnum)[keyof typeof companyOrderByRelevanceFieldEnum]


  export const logsOrderByRelevanceFieldEnum: {
    logsID: 'logsID',
    log: 'log',
    userID: 'userID'
  };

  export type logsOrderByRelevanceFieldEnum = (typeof logsOrderByRelevanceFieldEnum)[keyof typeof logsOrderByRelevanceFieldEnum]


  export const notificationOrderByRelevanceFieldEnum: {
    notificationID: 'notificationID',
    title: 'title',
    userID: 'userID'
  };

  export type notificationOrderByRelevanceFieldEnum = (typeof notificationOrderByRelevanceFieldEnum)[keyof typeof notificationOrderByRelevanceFieldEnum]


  export const orderOrderByRelevanceFieldEnum: {
    orderID: 'orderID',
    companyID: 'companyID',
    payment: 'payment',
    userID: 'userID'
  };

  export type orderOrderByRelevanceFieldEnum = (typeof orderOrderByRelevanceFieldEnum)[keyof typeof orderOrderByRelevanceFieldEnum]


  export const otpOrderByRelevanceFieldEnum: {
    otID: 'otID',
    otp: 'otp'
  };

  export type otpOrderByRelevanceFieldEnum = (typeof otpOrderByRelevanceFieldEnum)[keyof typeof otpOrderByRelevanceFieldEnum]


  export const productOrderByRelevanceFieldEnum: {
    productID: 'productID',
    sku: 'sku',
    title: 'title',
    userID: 'userID',
    notificationID: 'notificationID'
  };

  export type productOrderByRelevanceFieldEnum = (typeof productOrderByRelevanceFieldEnum)[keyof typeof productOrderByRelevanceFieldEnum]


  export const profileOrderByRelevanceFieldEnum: {
    profileID: 'profileID',
    firstname: 'firstname',
    lastname: 'lastname',
    phone: 'phone',
    userID: 'userID'
  };

  export type profileOrderByRelevanceFieldEnum = (typeof profileOrderByRelevanceFieldEnum)[keyof typeof profileOrderByRelevanceFieldEnum]


  export const requestOrderByRelevanceFieldEnum: {
    requestID: 'requestID',
    message: 'message',
    userID: 'userID',
    notificationID: 'notificationID'
  };

  export type requestOrderByRelevanceFieldEnum = (typeof requestOrderByRelevanceFieldEnum)[keyof typeof requestOrderByRelevanceFieldEnum]


  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: Enumerable<UserWhereInput>
    OR?: Enumerable<UserWhereInput>
    NOT?: Enumerable<UserWhereInput>
    userID?: StringFilter | string
    email?: StringFilter | string
    password?: StringFilter | string
    role?: EnumroleFilter | role
    createdAt?: DateTimeFilter | Date | string
    locked?: BoolFilter | boolean
    Products?: ProductListRelationFilter
    Order?: OrderListRelationFilter
    Profile?: ProfileListRelationFilter
    Request?: RequestListRelationFilter
    Logs?: LogsListRelationFilter
    Notificaiton?: NotificationListRelationFilter
    Company?: CompanyListRelationFilter
  }

  export type UserOrderByWithRelationAndSearchRelevanceInput = {
    userID?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    locked?: SortOrder
    Products?: productOrderByRelationAggregateInput
    Order?: orderOrderByRelationAggregateInput
    Profile?: profileOrderByRelationAggregateInput
    Request?: requestOrderByRelationAggregateInput
    Logs?: logsOrderByRelationAggregateInput
    Notificaiton?: notificationOrderByRelationAggregateInput
    Company?: companyOrderByRelationAggregateInput
    _relevance?: UserOrderByRelevanceInput
  }

  export type UserWhereUniqueInput = {
    userID?: string
    email?: string
  }

  export type UserOrderByWithAggregationInput = {
    userID?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    locked?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UserScalarWhereWithAggregatesInput>
    OR?: Enumerable<UserScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UserScalarWhereWithAggregatesInput>
    userID?: StringWithAggregatesFilter | string
    email?: StringWithAggregatesFilter | string
    password?: StringWithAggregatesFilter | string
    role?: EnumroleWithAggregatesFilter | role
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    locked?: BoolWithAggregatesFilter | boolean
  }

  export type logsWhereInput = {
    AND?: Enumerable<logsWhereInput>
    OR?: Enumerable<logsWhereInput>
    NOT?: Enumerable<logsWhereInput>
    logsID?: StringFilter | string
    log?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    userID?: StringNullableFilter | string | null
    User?: XOR<UserRelationFilter, UserWhereInput> | null
  }

  export type logsOrderByWithRelationAndSearchRelevanceInput = {
    logsID?: SortOrder
    log?: SortOrder
    createdAt?: SortOrder
    userID?: SortOrder
    User?: UserOrderByWithRelationAndSearchRelevanceInput
    _relevance?: logsOrderByRelevanceInput
  }

  export type logsWhereUniqueInput = {
    logsID?: string
  }

  export type logsOrderByWithAggregationInput = {
    logsID?: SortOrder
    log?: SortOrder
    createdAt?: SortOrder
    userID?: SortOrder
    _count?: logsCountOrderByAggregateInput
    _max?: logsMaxOrderByAggregateInput
    _min?: logsMinOrderByAggregateInput
  }

  export type logsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<logsScalarWhereWithAggregatesInput>
    OR?: Enumerable<logsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<logsScalarWhereWithAggregatesInput>
    logsID?: StringWithAggregatesFilter | string
    log?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    userID?: StringNullableWithAggregatesFilter | string | null
  }

  export type companyWhereInput = {
    AND?: Enumerable<companyWhereInput>
    OR?: Enumerable<companyWhereInput>
    NOT?: Enumerable<companyWhereInput>
    companyID?: StringFilter | string
    companyName?: StringFilter | string
    userID?: StringFilter | string
    User?: XOR<UserRelationFilter, UserWhereInput>
    Product?: ProductListRelationFilter
    companyAddress?: AddressListRelationFilter
    order?: OrderListRelationFilter
  }

  export type companyOrderByWithRelationAndSearchRelevanceInput = {
    companyID?: SortOrder
    companyName?: SortOrder
    userID?: SortOrder
    User?: UserOrderByWithRelationAndSearchRelevanceInput
    Product?: productOrderByRelationAggregateInput
    companyAddress?: addressOrderByRelationAggregateInput
    order?: orderOrderByRelationAggregateInput
    _relevance?: companyOrderByRelevanceInput
  }

  export type companyWhereUniqueInput = {
    companyID?: string
  }

  export type companyOrderByWithAggregationInput = {
    companyID?: SortOrder
    companyName?: SortOrder
    userID?: SortOrder
    _count?: companyCountOrderByAggregateInput
    _max?: companyMaxOrderByAggregateInput
    _min?: companyMinOrderByAggregateInput
  }

  export type companyScalarWhereWithAggregatesInput = {
    AND?: Enumerable<companyScalarWhereWithAggregatesInput>
    OR?: Enumerable<companyScalarWhereWithAggregatesInput>
    NOT?: Enumerable<companyScalarWhereWithAggregatesInput>
    companyID?: StringWithAggregatesFilter | string
    companyName?: StringWithAggregatesFilter | string
    userID?: StringWithAggregatesFilter | string
  }

  export type addressWhereInput = {
    AND?: Enumerable<addressWhereInput>
    OR?: Enumerable<addressWhereInput>
    NOT?: Enumerable<addressWhereInput>
    addressID?: StringFilter | string
    city?: StringFilter | string
    street?: StringFilter | string
    province?: StringFilter | string
    zipcode?: StringFilter | string
    companyID?: StringNullableFilter | string | null
    Company?: XOR<CompanyRelationFilter, companyWhereInput> | null
  }

  export type addressOrderByWithRelationAndSearchRelevanceInput = {
    addressID?: SortOrder
    city?: SortOrder
    street?: SortOrder
    province?: SortOrder
    zipcode?: SortOrder
    companyID?: SortOrder
    Company?: companyOrderByWithRelationAndSearchRelevanceInput
    _relevance?: addressOrderByRelevanceInput
  }

  export type addressWhereUniqueInput = {
    addressID?: string
  }

  export type addressOrderByWithAggregationInput = {
    addressID?: SortOrder
    city?: SortOrder
    street?: SortOrder
    province?: SortOrder
    zipcode?: SortOrder
    companyID?: SortOrder
    _count?: addressCountOrderByAggregateInput
    _max?: addressMaxOrderByAggregateInput
    _min?: addressMinOrderByAggregateInput
  }

  export type addressScalarWhereWithAggregatesInput = {
    AND?: Enumerable<addressScalarWhereWithAggregatesInput>
    OR?: Enumerable<addressScalarWhereWithAggregatesInput>
    NOT?: Enumerable<addressScalarWhereWithAggregatesInput>
    addressID?: StringWithAggregatesFilter | string
    city?: StringWithAggregatesFilter | string
    street?: StringWithAggregatesFilter | string
    province?: StringWithAggregatesFilter | string
    zipcode?: StringWithAggregatesFilter | string
    companyID?: StringNullableWithAggregatesFilter | string | null
  }

  export type profileWhereInput = {
    AND?: Enumerable<profileWhereInput>
    OR?: Enumerable<profileWhereInput>
    NOT?: Enumerable<profileWhereInput>
    profileID?: StringFilter | string
    firstname?: StringFilter | string
    lastname?: StringFilter | string
    birthday?: DateTimeFilter | Date | string
    phone?: StringFilter | string
    userID?: StringNullableFilter | string | null
    User?: XOR<UserRelationFilter, UserWhereInput> | null
  }

  export type profileOrderByWithRelationAndSearchRelevanceInput = {
    profileID?: SortOrder
    firstname?: SortOrder
    lastname?: SortOrder
    birthday?: SortOrder
    phone?: SortOrder
    userID?: SortOrder
    User?: UserOrderByWithRelationAndSearchRelevanceInput
    _relevance?: profileOrderByRelevanceInput
  }

  export type profileWhereUniqueInput = {
    profileID?: string
  }

  export type profileOrderByWithAggregationInput = {
    profileID?: SortOrder
    firstname?: SortOrder
    lastname?: SortOrder
    birthday?: SortOrder
    phone?: SortOrder
    userID?: SortOrder
    _count?: profileCountOrderByAggregateInput
    _max?: profileMaxOrderByAggregateInput
    _min?: profileMinOrderByAggregateInput
  }

  export type profileScalarWhereWithAggregatesInput = {
    AND?: Enumerable<profileScalarWhereWithAggregatesInput>
    OR?: Enumerable<profileScalarWhereWithAggregatesInput>
    NOT?: Enumerable<profileScalarWhereWithAggregatesInput>
    profileID?: StringWithAggregatesFilter | string
    firstname?: StringWithAggregatesFilter | string
    lastname?: StringWithAggregatesFilter | string
    birthday?: DateTimeWithAggregatesFilter | Date | string
    phone?: StringWithAggregatesFilter | string
    userID?: StringNullableWithAggregatesFilter | string | null
  }

  export type notificationWhereInput = {
    AND?: Enumerable<notificationWhereInput>
    OR?: Enumerable<notificationWhereInput>
    NOT?: Enumerable<notificationWhereInput>
    notificationID?: StringFilter | string
    title?: StringFilter | string
    notificationStatus?: EnumnotificationStatusFilter | notificationStatus
    createdAt?: DateTimeFilter | Date | string
    userID?: StringNullableFilter | string | null
    Product?: ProductListRelationFilter
    Request?: RequestListRelationFilter
    User?: XOR<UserRelationFilter, UserWhereInput> | null
  }

  export type notificationOrderByWithRelationAndSearchRelevanceInput = {
    notificationID?: SortOrder
    title?: SortOrder
    notificationStatus?: SortOrder
    createdAt?: SortOrder
    userID?: SortOrder
    Product?: productOrderByRelationAggregateInput
    Request?: requestOrderByRelationAggregateInput
    User?: UserOrderByWithRelationAndSearchRelevanceInput
    _relevance?: notificationOrderByRelevanceInput
  }

  export type notificationWhereUniqueInput = {
    notificationID?: string
  }

  export type notificationOrderByWithAggregationInput = {
    notificationID?: SortOrder
    title?: SortOrder
    notificationStatus?: SortOrder
    createdAt?: SortOrder
    userID?: SortOrder
    _count?: notificationCountOrderByAggregateInput
    _max?: notificationMaxOrderByAggregateInput
    _min?: notificationMinOrderByAggregateInput
  }

  export type notificationScalarWhereWithAggregatesInput = {
    AND?: Enumerable<notificationScalarWhereWithAggregatesInput>
    OR?: Enumerable<notificationScalarWhereWithAggregatesInput>
    NOT?: Enumerable<notificationScalarWhereWithAggregatesInput>
    notificationID?: StringWithAggregatesFilter | string
    title?: StringWithAggregatesFilter | string
    notificationStatus?: EnumnotificationStatusWithAggregatesFilter | notificationStatus
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    userID?: StringNullableWithAggregatesFilter | string | null
  }

  export type productWhereInput = {
    AND?: Enumerable<productWhereInput>
    OR?: Enumerable<productWhereInput>
    NOT?: Enumerable<productWhereInput>
    productID?: StringFilter | string
    sku?: StringFilter | string
    title?: StringFilter | string
    price?: IntFilter | number
    stock?: IntFilter | number
    userID?: StringFilter | string
    status?: EnumproductStatusFilter | productStatus
    createdAt?: DateTimeFilter | Date | string
    notificationID?: StringNullableFilter | string | null
    User?: XOR<UserRelationFilter, UserWhereInput>
    Company?: CompanyListRelationFilter
    notification?: XOR<NotificationRelationFilter, notificationWhereInput> | null
    request?: RequestListRelationFilter
    order?: OrderListRelationFilter
  }

  export type productOrderByWithRelationAndSearchRelevanceInput = {
    productID?: SortOrder
    sku?: SortOrder
    title?: SortOrder
    price?: SortOrder
    stock?: SortOrder
    userID?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    notificationID?: SortOrder
    User?: UserOrderByWithRelationAndSearchRelevanceInput
    Company?: companyOrderByRelationAggregateInput
    notification?: notificationOrderByWithRelationAndSearchRelevanceInput
    request?: requestOrderByRelationAggregateInput
    order?: orderOrderByRelationAggregateInput
    _relevance?: productOrderByRelevanceInput
  }

  export type productWhereUniqueInput = {
    productID?: string
    sku?: string
  }

  export type productOrderByWithAggregationInput = {
    productID?: SortOrder
    sku?: SortOrder
    title?: SortOrder
    price?: SortOrder
    stock?: SortOrder
    userID?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    notificationID?: SortOrder
    _count?: productCountOrderByAggregateInput
    _avg?: productAvgOrderByAggregateInput
    _max?: productMaxOrderByAggregateInput
    _min?: productMinOrderByAggregateInput
    _sum?: productSumOrderByAggregateInput
  }

  export type productScalarWhereWithAggregatesInput = {
    AND?: Enumerable<productScalarWhereWithAggregatesInput>
    OR?: Enumerable<productScalarWhereWithAggregatesInput>
    NOT?: Enumerable<productScalarWhereWithAggregatesInput>
    productID?: StringWithAggregatesFilter | string
    sku?: StringWithAggregatesFilter | string
    title?: StringWithAggregatesFilter | string
    price?: IntWithAggregatesFilter | number
    stock?: IntWithAggregatesFilter | number
    userID?: StringWithAggregatesFilter | string
    status?: EnumproductStatusWithAggregatesFilter | productStatus
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    notificationID?: StringNullableWithAggregatesFilter | string | null
  }

  export type orderWhereInput = {
    AND?: Enumerable<orderWhereInput>
    OR?: Enumerable<orderWhereInput>
    NOT?: Enumerable<orderWhereInput>
    orderID?: StringFilter | string
    quantity?: IntFilter | number
    total?: FloatFilter | number
    companyID?: StringFilter | string
    payment?: StringFilter | string
    status?: EnumorderStatusFilter | orderStatus
    discount?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    userID?: StringFilter | string
    Product?: ProductListRelationFilter
    Company?: XOR<CompanyRelationFilter, companyWhereInput>
    User?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type orderOrderByWithRelationAndSearchRelevanceInput = {
    orderID?: SortOrder
    quantity?: SortOrder
    total?: SortOrder
    companyID?: SortOrder
    payment?: SortOrder
    status?: SortOrder
    discount?: SortOrder
    createdAt?: SortOrder
    userID?: SortOrder
    Product?: productOrderByRelationAggregateInput
    Company?: companyOrderByWithRelationAndSearchRelevanceInput
    User?: UserOrderByWithRelationAndSearchRelevanceInput
    _relevance?: orderOrderByRelevanceInput
  }

  export type orderWhereUniqueInput = {
    orderID?: string
  }

  export type orderOrderByWithAggregationInput = {
    orderID?: SortOrder
    quantity?: SortOrder
    total?: SortOrder
    companyID?: SortOrder
    payment?: SortOrder
    status?: SortOrder
    discount?: SortOrder
    createdAt?: SortOrder
    userID?: SortOrder
    _count?: orderCountOrderByAggregateInput
    _avg?: orderAvgOrderByAggregateInput
    _max?: orderMaxOrderByAggregateInput
    _min?: orderMinOrderByAggregateInput
    _sum?: orderSumOrderByAggregateInput
  }

  export type orderScalarWhereWithAggregatesInput = {
    AND?: Enumerable<orderScalarWhereWithAggregatesInput>
    OR?: Enumerable<orderScalarWhereWithAggregatesInput>
    NOT?: Enumerable<orderScalarWhereWithAggregatesInput>
    orderID?: StringWithAggregatesFilter | string
    quantity?: IntWithAggregatesFilter | number
    total?: FloatWithAggregatesFilter | number
    companyID?: StringWithAggregatesFilter | string
    payment?: StringWithAggregatesFilter | string
    status?: EnumorderStatusWithAggregatesFilter | orderStatus
    discount?: IntWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    userID?: StringWithAggregatesFilter | string
  }

  export type requestWhereInput = {
    AND?: Enumerable<requestWhereInput>
    OR?: Enumerable<requestWhereInput>
    NOT?: Enumerable<requestWhereInput>
    requestID?: StringFilter | string
    message?: StringFilter | string
    quantity?: IntNullableFilter | number | null
    status?: EnumrequestStatusFilter | requestStatus
    createdAt?: DateTimeFilter | Date | string
    userID?: StringFilter | string
    notificationID?: StringNullableFilter | string | null
    Product?: ProductListRelationFilter
    User?: XOR<UserRelationFilter, UserWhereInput>
    notification?: XOR<NotificationRelationFilter, notificationWhereInput> | null
  }

  export type requestOrderByWithRelationAndSearchRelevanceInput = {
    requestID?: SortOrder
    message?: SortOrder
    quantity?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    userID?: SortOrder
    notificationID?: SortOrder
    Product?: productOrderByRelationAggregateInput
    User?: UserOrderByWithRelationAndSearchRelevanceInput
    notification?: notificationOrderByWithRelationAndSearchRelevanceInput
    _relevance?: requestOrderByRelevanceInput
  }

  export type requestWhereUniqueInput = {
    requestID?: string
  }

  export type requestOrderByWithAggregationInput = {
    requestID?: SortOrder
    message?: SortOrder
    quantity?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    userID?: SortOrder
    notificationID?: SortOrder
    _count?: requestCountOrderByAggregateInput
    _avg?: requestAvgOrderByAggregateInput
    _max?: requestMaxOrderByAggregateInput
    _min?: requestMinOrderByAggregateInput
    _sum?: requestSumOrderByAggregateInput
  }

  export type requestScalarWhereWithAggregatesInput = {
    AND?: Enumerable<requestScalarWhereWithAggregatesInput>
    OR?: Enumerable<requestScalarWhereWithAggregatesInput>
    NOT?: Enumerable<requestScalarWhereWithAggregatesInput>
    requestID?: StringWithAggregatesFilter | string
    message?: StringWithAggregatesFilter | string
    quantity?: IntNullableWithAggregatesFilter | number | null
    status?: EnumrequestStatusWithAggregatesFilter | requestStatus
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    userID?: StringWithAggregatesFilter | string
    notificationID?: StringNullableWithAggregatesFilter | string | null
  }

  export type otpWhereInput = {
    AND?: Enumerable<otpWhereInput>
    OR?: Enumerable<otpWhereInput>
    NOT?: Enumerable<otpWhereInput>
    otID?: StringFilter | string
    otp?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    expiredAt?: DateTimeFilter | Date | string
  }

  export type otpOrderByWithRelationAndSearchRelevanceInput = {
    otID?: SortOrder
    otp?: SortOrder
    createdAt?: SortOrder
    expiredAt?: SortOrder
    _relevance?: otpOrderByRelevanceInput
  }

  export type otpWhereUniqueInput = {
    otID?: string
    otp?: string
  }

  export type otpOrderByWithAggregationInput = {
    otID?: SortOrder
    otp?: SortOrder
    createdAt?: SortOrder
    expiredAt?: SortOrder
    _count?: otpCountOrderByAggregateInput
    _max?: otpMaxOrderByAggregateInput
    _min?: otpMinOrderByAggregateInput
  }

  export type otpScalarWhereWithAggregatesInput = {
    AND?: Enumerable<otpScalarWhereWithAggregatesInput>
    OR?: Enumerable<otpScalarWhereWithAggregatesInput>
    NOT?: Enumerable<otpScalarWhereWithAggregatesInput>
    otID?: StringWithAggregatesFilter | string
    otp?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    expiredAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type UserCreateInput = {
    userID?: string
    email: string
    password: string
    role: role
    createdAt: Date | string
    locked?: boolean
    Products?: productCreateNestedManyWithoutUserInput
    Order?: orderCreateNestedManyWithoutUserInput
    Profile?: profileCreateNestedManyWithoutUserInput
    Request?: requestCreateNestedManyWithoutUserInput
    Logs?: logsCreateNestedManyWithoutUserInput
    Notificaiton?: notificationCreateNestedManyWithoutUserInput
    Company?: companyCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    userID?: string
    email: string
    password: string
    role: role
    createdAt: Date | string
    locked?: boolean
    Products?: productUncheckedCreateNestedManyWithoutUserInput
    Order?: orderUncheckedCreateNestedManyWithoutUserInput
    Profile?: profileUncheckedCreateNestedManyWithoutUserInput
    Request?: requestUncheckedCreateNestedManyWithoutUserInput
    Logs?: logsUncheckedCreateNestedManyWithoutUserInput
    Notificaiton?: notificationUncheckedCreateNestedManyWithoutUserInput
    Company?: companyUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    userID?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumroleFieldUpdateOperationsInput | role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    locked?: BoolFieldUpdateOperationsInput | boolean
    Products?: productUpdateManyWithoutUserNestedInput
    Order?: orderUpdateManyWithoutUserNestedInput
    Profile?: profileUpdateManyWithoutUserNestedInput
    Request?: requestUpdateManyWithoutUserNestedInput
    Logs?: logsUpdateManyWithoutUserNestedInput
    Notificaiton?: notificationUpdateManyWithoutUserNestedInput
    Company?: companyUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    userID?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumroleFieldUpdateOperationsInput | role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    locked?: BoolFieldUpdateOperationsInput | boolean
    Products?: productUncheckedUpdateManyWithoutUserNestedInput
    Order?: orderUncheckedUpdateManyWithoutUserNestedInput
    Profile?: profileUncheckedUpdateManyWithoutUserNestedInput
    Request?: requestUncheckedUpdateManyWithoutUserNestedInput
    Logs?: logsUncheckedUpdateManyWithoutUserNestedInput
    Notificaiton?: notificationUncheckedUpdateManyWithoutUserNestedInput
    Company?: companyUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    userID?: string
    email: string
    password: string
    role: role
    createdAt: Date | string
    locked?: boolean
  }

  export type UserUpdateManyMutationInput = {
    userID?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumroleFieldUpdateOperationsInput | role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    locked?: BoolFieldUpdateOperationsInput | boolean
  }

  export type UserUncheckedUpdateManyInput = {
    userID?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumroleFieldUpdateOperationsInput | role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    locked?: BoolFieldUpdateOperationsInput | boolean
  }

  export type logsCreateInput = {
    logsID?: string
    log: string
    createdAt: Date | string
    User?: UserCreateNestedOneWithoutLogsInput
  }

  export type logsUncheckedCreateInput = {
    logsID?: string
    log: string
    createdAt: Date | string
    userID?: string | null
  }

  export type logsUpdateInput = {
    logsID?: StringFieldUpdateOperationsInput | string
    log?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    User?: UserUpdateOneWithoutLogsNestedInput
  }

  export type logsUncheckedUpdateInput = {
    logsID?: StringFieldUpdateOperationsInput | string
    log?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userID?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type logsCreateManyInput = {
    logsID?: string
    log: string
    createdAt: Date | string
    userID?: string | null
  }

  export type logsUpdateManyMutationInput = {
    logsID?: StringFieldUpdateOperationsInput | string
    log?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type logsUncheckedUpdateManyInput = {
    logsID?: StringFieldUpdateOperationsInput | string
    log?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userID?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type companyCreateInput = {
    companyID?: string
    companyName: string
    User: UserCreateNestedOneWithoutCompanyInput
    Product?: productCreateNestedManyWithoutCompanyInput
    companyAddress?: addressCreateNestedManyWithoutCompanyInput
    order?: orderCreateNestedManyWithoutCompanyInput
  }

  export type companyUncheckedCreateInput = {
    companyID?: string
    companyName: string
    userID: string
    Product?: productUncheckedCreateNestedManyWithoutCompanyInput
    companyAddress?: addressUncheckedCreateNestedManyWithoutCompanyInput
    order?: orderUncheckedCreateNestedManyWithoutCompanyInput
  }

  export type companyUpdateInput = {
    companyID?: StringFieldUpdateOperationsInput | string
    companyName?: StringFieldUpdateOperationsInput | string
    User?: UserUpdateOneRequiredWithoutCompanyNestedInput
    Product?: productUpdateManyWithoutCompanyNestedInput
    companyAddress?: addressUpdateManyWithoutCompanyNestedInput
    order?: orderUpdateManyWithoutCompanyNestedInput
  }

  export type companyUncheckedUpdateInput = {
    companyID?: StringFieldUpdateOperationsInput | string
    companyName?: StringFieldUpdateOperationsInput | string
    userID?: StringFieldUpdateOperationsInput | string
    Product?: productUncheckedUpdateManyWithoutCompanyNestedInput
    companyAddress?: addressUncheckedUpdateManyWithoutCompanyNestedInput
    order?: orderUncheckedUpdateManyWithoutCompanyNestedInput
  }

  export type companyCreateManyInput = {
    companyID?: string
    companyName: string
    userID: string
  }

  export type companyUpdateManyMutationInput = {
    companyID?: StringFieldUpdateOperationsInput | string
    companyName?: StringFieldUpdateOperationsInput | string
  }

  export type companyUncheckedUpdateManyInput = {
    companyID?: StringFieldUpdateOperationsInput | string
    companyName?: StringFieldUpdateOperationsInput | string
    userID?: StringFieldUpdateOperationsInput | string
  }

  export type addressCreateInput = {
    addressID?: string
    city: string
    street: string
    province: string
    zipcode: string
    Company?: companyCreateNestedOneWithoutCompanyAddressInput
  }

  export type addressUncheckedCreateInput = {
    addressID?: string
    city: string
    street: string
    province: string
    zipcode: string
    companyID?: string | null
  }

  export type addressUpdateInput = {
    addressID?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    street?: StringFieldUpdateOperationsInput | string
    province?: StringFieldUpdateOperationsInput | string
    zipcode?: StringFieldUpdateOperationsInput | string
    Company?: companyUpdateOneWithoutCompanyAddressNestedInput
  }

  export type addressUncheckedUpdateInput = {
    addressID?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    street?: StringFieldUpdateOperationsInput | string
    province?: StringFieldUpdateOperationsInput | string
    zipcode?: StringFieldUpdateOperationsInput | string
    companyID?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type addressCreateManyInput = {
    addressID?: string
    city: string
    street: string
    province: string
    zipcode: string
    companyID?: string | null
  }

  export type addressUpdateManyMutationInput = {
    addressID?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    street?: StringFieldUpdateOperationsInput | string
    province?: StringFieldUpdateOperationsInput | string
    zipcode?: StringFieldUpdateOperationsInput | string
  }

  export type addressUncheckedUpdateManyInput = {
    addressID?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    street?: StringFieldUpdateOperationsInput | string
    province?: StringFieldUpdateOperationsInput | string
    zipcode?: StringFieldUpdateOperationsInput | string
    companyID?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type profileCreateInput = {
    profileID?: string
    firstname: string
    lastname: string
    birthday: Date | string
    phone: string
    User?: UserCreateNestedOneWithoutProfileInput
  }

  export type profileUncheckedCreateInput = {
    profileID?: string
    firstname: string
    lastname: string
    birthday: Date | string
    phone: string
    userID?: string | null
  }

  export type profileUpdateInput = {
    profileID?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    birthday?: DateTimeFieldUpdateOperationsInput | Date | string
    phone?: StringFieldUpdateOperationsInput | string
    User?: UserUpdateOneWithoutProfileNestedInput
  }

  export type profileUncheckedUpdateInput = {
    profileID?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    birthday?: DateTimeFieldUpdateOperationsInput | Date | string
    phone?: StringFieldUpdateOperationsInput | string
    userID?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type profileCreateManyInput = {
    profileID?: string
    firstname: string
    lastname: string
    birthday: Date | string
    phone: string
    userID?: string | null
  }

  export type profileUpdateManyMutationInput = {
    profileID?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    birthday?: DateTimeFieldUpdateOperationsInput | Date | string
    phone?: StringFieldUpdateOperationsInput | string
  }

  export type profileUncheckedUpdateManyInput = {
    profileID?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    birthday?: DateTimeFieldUpdateOperationsInput | Date | string
    phone?: StringFieldUpdateOperationsInput | string
    userID?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type notificationCreateInput = {
    notificationID?: string
    title: string
    notificationStatus?: notificationStatus
    createdAt: Date | string
    Product?: productCreateNestedManyWithoutNotificationInput
    Request?: requestCreateNestedManyWithoutNotificationInput
    User?: UserCreateNestedOneWithoutNotificaitonInput
  }

  export type notificationUncheckedCreateInput = {
    notificationID?: string
    title: string
    notificationStatus?: notificationStatus
    createdAt: Date | string
    userID?: string | null
    Product?: productUncheckedCreateNestedManyWithoutNotificationInput
    Request?: requestUncheckedCreateNestedManyWithoutNotificationInput
  }

  export type notificationUpdateInput = {
    notificationID?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    notificationStatus?: EnumnotificationStatusFieldUpdateOperationsInput | notificationStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Product?: productUpdateManyWithoutNotificationNestedInput
    Request?: requestUpdateManyWithoutNotificationNestedInput
    User?: UserUpdateOneWithoutNotificaitonNestedInput
  }

  export type notificationUncheckedUpdateInput = {
    notificationID?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    notificationStatus?: EnumnotificationStatusFieldUpdateOperationsInput | notificationStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userID?: NullableStringFieldUpdateOperationsInput | string | null
    Product?: productUncheckedUpdateManyWithoutNotificationNestedInput
    Request?: requestUncheckedUpdateManyWithoutNotificationNestedInput
  }

  export type notificationCreateManyInput = {
    notificationID?: string
    title: string
    notificationStatus?: notificationStatus
    createdAt: Date | string
    userID?: string | null
  }

  export type notificationUpdateManyMutationInput = {
    notificationID?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    notificationStatus?: EnumnotificationStatusFieldUpdateOperationsInput | notificationStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type notificationUncheckedUpdateManyInput = {
    notificationID?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    notificationStatus?: EnumnotificationStatusFieldUpdateOperationsInput | notificationStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userID?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type productCreateInput = {
    productID?: string
    sku: string
    title: string
    price: number
    stock: number
    status?: productStatus
    createdAt: Date | string
    User: UserCreateNestedOneWithoutProductsInput
    Company?: companyCreateNestedManyWithoutProductInput
    notification?: notificationCreateNestedOneWithoutProductInput
    request?: requestCreateNestedManyWithoutProductInput
    order?: orderCreateNestedManyWithoutProductInput
  }

  export type productUncheckedCreateInput = {
    productID?: string
    sku: string
    title: string
    price: number
    stock: number
    userID: string
    status?: productStatus
    createdAt: Date | string
    notificationID?: string | null
    Company?: companyUncheckedCreateNestedManyWithoutProductInput
    request?: requestUncheckedCreateNestedManyWithoutProductInput
    order?: orderUncheckedCreateNestedManyWithoutProductInput
  }

  export type productUpdateInput = {
    productID?: StringFieldUpdateOperationsInput | string
    sku?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    stock?: IntFieldUpdateOperationsInput | number
    status?: EnumproductStatusFieldUpdateOperationsInput | productStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    User?: UserUpdateOneRequiredWithoutProductsNestedInput
    Company?: companyUpdateManyWithoutProductNestedInput
    notification?: notificationUpdateOneWithoutProductNestedInput
    request?: requestUpdateManyWithoutProductNestedInput
    order?: orderUpdateManyWithoutProductNestedInput
  }

  export type productUncheckedUpdateInput = {
    productID?: StringFieldUpdateOperationsInput | string
    sku?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    stock?: IntFieldUpdateOperationsInput | number
    userID?: StringFieldUpdateOperationsInput | string
    status?: EnumproductStatusFieldUpdateOperationsInput | productStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notificationID?: NullableStringFieldUpdateOperationsInput | string | null
    Company?: companyUncheckedUpdateManyWithoutProductNestedInput
    request?: requestUncheckedUpdateManyWithoutProductNestedInput
    order?: orderUncheckedUpdateManyWithoutProductNestedInput
  }

  export type productCreateManyInput = {
    productID?: string
    sku: string
    title: string
    price: number
    stock: number
    userID: string
    status?: productStatus
    createdAt: Date | string
    notificationID?: string | null
  }

  export type productUpdateManyMutationInput = {
    productID?: StringFieldUpdateOperationsInput | string
    sku?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    stock?: IntFieldUpdateOperationsInput | number
    status?: EnumproductStatusFieldUpdateOperationsInput | productStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type productUncheckedUpdateManyInput = {
    productID?: StringFieldUpdateOperationsInput | string
    sku?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    stock?: IntFieldUpdateOperationsInput | number
    userID?: StringFieldUpdateOperationsInput | string
    status?: EnumproductStatusFieldUpdateOperationsInput | productStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notificationID?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type orderCreateInput = {
    orderID?: string
    quantity: number
    total: number
    payment: string
    status: orderStatus
    discount?: number
    createdAt?: Date | string
    Product?: productCreateNestedManyWithoutOrderInput
    Company: companyCreateNestedOneWithoutOrderInput
    User: UserCreateNestedOneWithoutOrderInput
  }

  export type orderUncheckedCreateInput = {
    orderID?: string
    quantity: number
    total: number
    companyID: string
    payment: string
    status: orderStatus
    discount?: number
    createdAt?: Date | string
    userID: string
    Product?: productUncheckedCreateNestedManyWithoutOrderInput
  }

  export type orderUpdateInput = {
    orderID?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    payment?: StringFieldUpdateOperationsInput | string
    status?: EnumorderStatusFieldUpdateOperationsInput | orderStatus
    discount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Product?: productUpdateManyWithoutOrderNestedInput
    Company?: companyUpdateOneRequiredWithoutOrderNestedInput
    User?: UserUpdateOneRequiredWithoutOrderNestedInput
  }

  export type orderUncheckedUpdateInput = {
    orderID?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    companyID?: StringFieldUpdateOperationsInput | string
    payment?: StringFieldUpdateOperationsInput | string
    status?: EnumorderStatusFieldUpdateOperationsInput | orderStatus
    discount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userID?: StringFieldUpdateOperationsInput | string
    Product?: productUncheckedUpdateManyWithoutOrderNestedInput
  }

  export type orderCreateManyInput = {
    orderID?: string
    quantity: number
    total: number
    companyID: string
    payment: string
    status: orderStatus
    discount?: number
    createdAt?: Date | string
    userID: string
  }

  export type orderUpdateManyMutationInput = {
    orderID?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    payment?: StringFieldUpdateOperationsInput | string
    status?: EnumorderStatusFieldUpdateOperationsInput | orderStatus
    discount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type orderUncheckedUpdateManyInput = {
    orderID?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    companyID?: StringFieldUpdateOperationsInput | string
    payment?: StringFieldUpdateOperationsInput | string
    status?: EnumorderStatusFieldUpdateOperationsInput | orderStatus
    discount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userID?: StringFieldUpdateOperationsInput | string
  }

  export type requestCreateInput = {
    requestID?: string
    message: string
    quantity?: number | null
    status?: requestStatus
    createdAt: Date | string
    Product?: productCreateNestedManyWithoutRequestInput
    User: UserCreateNestedOneWithoutRequestInput
    notification?: notificationCreateNestedOneWithoutRequestInput
  }

  export type requestUncheckedCreateInput = {
    requestID?: string
    message: string
    quantity?: number | null
    status?: requestStatus
    createdAt: Date | string
    userID: string
    notificationID?: string | null
    Product?: productUncheckedCreateNestedManyWithoutRequestInput
  }

  export type requestUpdateInput = {
    requestID?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumrequestStatusFieldUpdateOperationsInput | requestStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Product?: productUpdateManyWithoutRequestNestedInput
    User?: UserUpdateOneRequiredWithoutRequestNestedInput
    notification?: notificationUpdateOneWithoutRequestNestedInput
  }

  export type requestUncheckedUpdateInput = {
    requestID?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumrequestStatusFieldUpdateOperationsInput | requestStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userID?: StringFieldUpdateOperationsInput | string
    notificationID?: NullableStringFieldUpdateOperationsInput | string | null
    Product?: productUncheckedUpdateManyWithoutRequestNestedInput
  }

  export type requestCreateManyInput = {
    requestID?: string
    message: string
    quantity?: number | null
    status?: requestStatus
    createdAt: Date | string
    userID: string
    notificationID?: string | null
  }

  export type requestUpdateManyMutationInput = {
    requestID?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumrequestStatusFieldUpdateOperationsInput | requestStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type requestUncheckedUpdateManyInput = {
    requestID?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumrequestStatusFieldUpdateOperationsInput | requestStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userID?: StringFieldUpdateOperationsInput | string
    notificationID?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type otpCreateInput = {
    otID?: string
    otp: string
    createdAt: Date | string
    expiredAt: Date | string
  }

  export type otpUncheckedCreateInput = {
    otID?: string
    otp: string
    createdAt: Date | string
    expiredAt: Date | string
  }

  export type otpUpdateInput = {
    otID?: StringFieldUpdateOperationsInput | string
    otp?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiredAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type otpUncheckedUpdateInput = {
    otID?: StringFieldUpdateOperationsInput | string
    otp?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiredAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type otpCreateManyInput = {
    otID?: string
    otp: string
    createdAt: Date | string
    expiredAt: Date | string
  }

  export type otpUpdateManyMutationInput = {
    otID?: StringFieldUpdateOperationsInput | string
    otp?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiredAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type otpUncheckedUpdateManyInput = {
    otID?: StringFieldUpdateOperationsInput | string
    otp?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiredAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    search?: string
    mode?: QueryMode
    not?: NestedStringFilter | string
  }

  export type EnumroleFilter = {
    equals?: role
    in?: Enumerable<role>
    notIn?: Enumerable<role>
    not?: NestedEnumroleFilter | role
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type BoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type ProductListRelationFilter = {
    every?: productWhereInput
    some?: productWhereInput
    none?: productWhereInput
  }

  export type OrderListRelationFilter = {
    every?: orderWhereInput
    some?: orderWhereInput
    none?: orderWhereInput
  }

  export type ProfileListRelationFilter = {
    every?: profileWhereInput
    some?: profileWhereInput
    none?: profileWhereInput
  }

  export type RequestListRelationFilter = {
    every?: requestWhereInput
    some?: requestWhereInput
    none?: requestWhereInput
  }

  export type LogsListRelationFilter = {
    every?: logsWhereInput
    some?: logsWhereInput
    none?: logsWhereInput
  }

  export type NotificationListRelationFilter = {
    every?: notificationWhereInput
    some?: notificationWhereInput
    none?: notificationWhereInput
  }

  export type CompanyListRelationFilter = {
    every?: companyWhereInput
    some?: companyWhereInput
    none?: companyWhereInput
  }

  export type productOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type orderOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type profileOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type requestOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type logsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type notificationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type companyOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserOrderByRelevanceInput = {
    fields: Enumerable<UserOrderByRelevanceFieldEnum>
    sort: SortOrder
    search: string
  }

  export type UserCountOrderByAggregateInput = {
    userID?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    locked?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    userID?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    locked?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    userID?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    locked?: SortOrder
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    search?: string
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type EnumroleWithAggregatesFilter = {
    equals?: role
    in?: Enumerable<role>
    notIn?: Enumerable<role>
    not?: NestedEnumroleWithAggregatesFilter | role
    _count?: NestedIntFilter
    _min?: NestedEnumroleFilter
    _max?: NestedEnumroleFilter
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type BoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    search?: string
    mode?: QueryMode
    not?: NestedStringNullableFilter | string | null
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type logsOrderByRelevanceInput = {
    fields: Enumerable<logsOrderByRelevanceFieldEnum>
    sort: SortOrder
    search: string
  }

  export type logsCountOrderByAggregateInput = {
    logsID?: SortOrder
    log?: SortOrder
    createdAt?: SortOrder
    userID?: SortOrder
  }

  export type logsMaxOrderByAggregateInput = {
    logsID?: SortOrder
    log?: SortOrder
    createdAt?: SortOrder
    userID?: SortOrder
  }

  export type logsMinOrderByAggregateInput = {
    logsID?: SortOrder
    log?: SortOrder
    createdAt?: SortOrder
    userID?: SortOrder
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    search?: string
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type AddressListRelationFilter = {
    every?: addressWhereInput
    some?: addressWhereInput
    none?: addressWhereInput
  }

  export type addressOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type companyOrderByRelevanceInput = {
    fields: Enumerable<companyOrderByRelevanceFieldEnum>
    sort: SortOrder
    search: string
  }

  export type companyCountOrderByAggregateInput = {
    companyID?: SortOrder
    companyName?: SortOrder
    userID?: SortOrder
  }

  export type companyMaxOrderByAggregateInput = {
    companyID?: SortOrder
    companyName?: SortOrder
    userID?: SortOrder
  }

  export type companyMinOrderByAggregateInput = {
    companyID?: SortOrder
    companyName?: SortOrder
    userID?: SortOrder
  }

  export type CompanyRelationFilter = {
    is?: companyWhereInput | null
    isNot?: companyWhereInput | null
  }

  export type addressOrderByRelevanceInput = {
    fields: Enumerable<addressOrderByRelevanceFieldEnum>
    sort: SortOrder
    search: string
  }

  export type addressCountOrderByAggregateInput = {
    addressID?: SortOrder
    city?: SortOrder
    street?: SortOrder
    province?: SortOrder
    zipcode?: SortOrder
    companyID?: SortOrder
  }

  export type addressMaxOrderByAggregateInput = {
    addressID?: SortOrder
    city?: SortOrder
    street?: SortOrder
    province?: SortOrder
    zipcode?: SortOrder
    companyID?: SortOrder
  }

  export type addressMinOrderByAggregateInput = {
    addressID?: SortOrder
    city?: SortOrder
    street?: SortOrder
    province?: SortOrder
    zipcode?: SortOrder
    companyID?: SortOrder
  }

  export type profileOrderByRelevanceInput = {
    fields: Enumerable<profileOrderByRelevanceFieldEnum>
    sort: SortOrder
    search: string
  }

  export type profileCountOrderByAggregateInput = {
    profileID?: SortOrder
    firstname?: SortOrder
    lastname?: SortOrder
    birthday?: SortOrder
    phone?: SortOrder
    userID?: SortOrder
  }

  export type profileMaxOrderByAggregateInput = {
    profileID?: SortOrder
    firstname?: SortOrder
    lastname?: SortOrder
    birthday?: SortOrder
    phone?: SortOrder
    userID?: SortOrder
  }

  export type profileMinOrderByAggregateInput = {
    profileID?: SortOrder
    firstname?: SortOrder
    lastname?: SortOrder
    birthday?: SortOrder
    phone?: SortOrder
    userID?: SortOrder
  }

  export type EnumnotificationStatusFilter = {
    equals?: notificationStatus
    in?: Enumerable<notificationStatus>
    notIn?: Enumerable<notificationStatus>
    not?: NestedEnumnotificationStatusFilter | notificationStatus
  }

  export type notificationOrderByRelevanceInput = {
    fields: Enumerable<notificationOrderByRelevanceFieldEnum>
    sort: SortOrder
    search: string
  }

  export type notificationCountOrderByAggregateInput = {
    notificationID?: SortOrder
    title?: SortOrder
    notificationStatus?: SortOrder
    createdAt?: SortOrder
    userID?: SortOrder
  }

  export type notificationMaxOrderByAggregateInput = {
    notificationID?: SortOrder
    title?: SortOrder
    notificationStatus?: SortOrder
    createdAt?: SortOrder
    userID?: SortOrder
  }

  export type notificationMinOrderByAggregateInput = {
    notificationID?: SortOrder
    title?: SortOrder
    notificationStatus?: SortOrder
    createdAt?: SortOrder
    userID?: SortOrder
  }

  export type EnumnotificationStatusWithAggregatesFilter = {
    equals?: notificationStatus
    in?: Enumerable<notificationStatus>
    notIn?: Enumerable<notificationStatus>
    not?: NestedEnumnotificationStatusWithAggregatesFilter | notificationStatus
    _count?: NestedIntFilter
    _min?: NestedEnumnotificationStatusFilter
    _max?: NestedEnumnotificationStatusFilter
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type EnumproductStatusFilter = {
    equals?: productStatus
    in?: Enumerable<productStatus>
    notIn?: Enumerable<productStatus>
    not?: NestedEnumproductStatusFilter | productStatus
  }

  export type NotificationRelationFilter = {
    is?: notificationWhereInput | null
    isNot?: notificationWhereInput | null
  }

  export type productOrderByRelevanceInput = {
    fields: Enumerable<productOrderByRelevanceFieldEnum>
    sort: SortOrder
    search: string
  }

  export type productCountOrderByAggregateInput = {
    productID?: SortOrder
    sku?: SortOrder
    title?: SortOrder
    price?: SortOrder
    stock?: SortOrder
    userID?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    notificationID?: SortOrder
  }

  export type productAvgOrderByAggregateInput = {
    price?: SortOrder
    stock?: SortOrder
  }

  export type productMaxOrderByAggregateInput = {
    productID?: SortOrder
    sku?: SortOrder
    title?: SortOrder
    price?: SortOrder
    stock?: SortOrder
    userID?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    notificationID?: SortOrder
  }

  export type productMinOrderByAggregateInput = {
    productID?: SortOrder
    sku?: SortOrder
    title?: SortOrder
    price?: SortOrder
    stock?: SortOrder
    userID?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    notificationID?: SortOrder
  }

  export type productSumOrderByAggregateInput = {
    price?: SortOrder
    stock?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type EnumproductStatusWithAggregatesFilter = {
    equals?: productStatus
    in?: Enumerable<productStatus>
    notIn?: Enumerable<productStatus>
    not?: NestedEnumproductStatusWithAggregatesFilter | productStatus
    _count?: NestedIntFilter
    _min?: NestedEnumproductStatusFilter
    _max?: NestedEnumproductStatusFilter
  }

  export type FloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type EnumorderStatusFilter = {
    equals?: orderStatus
    in?: Enumerable<orderStatus>
    notIn?: Enumerable<orderStatus>
    not?: NestedEnumorderStatusFilter | orderStatus
  }

  export type orderOrderByRelevanceInput = {
    fields: Enumerable<orderOrderByRelevanceFieldEnum>
    sort: SortOrder
    search: string
  }

  export type orderCountOrderByAggregateInput = {
    orderID?: SortOrder
    quantity?: SortOrder
    total?: SortOrder
    companyID?: SortOrder
    payment?: SortOrder
    status?: SortOrder
    discount?: SortOrder
    createdAt?: SortOrder
    userID?: SortOrder
  }

  export type orderAvgOrderByAggregateInput = {
    quantity?: SortOrder
    total?: SortOrder
    discount?: SortOrder
  }

  export type orderMaxOrderByAggregateInput = {
    orderID?: SortOrder
    quantity?: SortOrder
    total?: SortOrder
    companyID?: SortOrder
    payment?: SortOrder
    status?: SortOrder
    discount?: SortOrder
    createdAt?: SortOrder
    userID?: SortOrder
  }

  export type orderMinOrderByAggregateInput = {
    orderID?: SortOrder
    quantity?: SortOrder
    total?: SortOrder
    companyID?: SortOrder
    payment?: SortOrder
    status?: SortOrder
    discount?: SortOrder
    createdAt?: SortOrder
    userID?: SortOrder
  }

  export type orderSumOrderByAggregateInput = {
    quantity?: SortOrder
    total?: SortOrder
    discount?: SortOrder
  }

  export type FloatWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedFloatFilter
    _min?: NestedFloatFilter
    _max?: NestedFloatFilter
  }

  export type EnumorderStatusWithAggregatesFilter = {
    equals?: orderStatus
    in?: Enumerable<orderStatus>
    notIn?: Enumerable<orderStatus>
    not?: NestedEnumorderStatusWithAggregatesFilter | orderStatus
    _count?: NestedIntFilter
    _min?: NestedEnumorderStatusFilter
    _max?: NestedEnumorderStatusFilter
  }

  export type IntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type EnumrequestStatusFilter = {
    equals?: requestStatus
    in?: Enumerable<requestStatus>
    notIn?: Enumerable<requestStatus>
    not?: NestedEnumrequestStatusFilter | requestStatus
  }

  export type requestOrderByRelevanceInput = {
    fields: Enumerable<requestOrderByRelevanceFieldEnum>
    sort: SortOrder
    search: string
  }

  export type requestCountOrderByAggregateInput = {
    requestID?: SortOrder
    message?: SortOrder
    quantity?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    userID?: SortOrder
    notificationID?: SortOrder
  }

  export type requestAvgOrderByAggregateInput = {
    quantity?: SortOrder
  }

  export type requestMaxOrderByAggregateInput = {
    requestID?: SortOrder
    message?: SortOrder
    quantity?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    userID?: SortOrder
    notificationID?: SortOrder
  }

  export type requestMinOrderByAggregateInput = {
    requestID?: SortOrder
    message?: SortOrder
    quantity?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    userID?: SortOrder
    notificationID?: SortOrder
  }

  export type requestSumOrderByAggregateInput = {
    quantity?: SortOrder
  }

  export type IntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type EnumrequestStatusWithAggregatesFilter = {
    equals?: requestStatus
    in?: Enumerable<requestStatus>
    notIn?: Enumerable<requestStatus>
    not?: NestedEnumrequestStatusWithAggregatesFilter | requestStatus
    _count?: NestedIntFilter
    _min?: NestedEnumrequestStatusFilter
    _max?: NestedEnumrequestStatusFilter
  }

  export type otpOrderByRelevanceInput = {
    fields: Enumerable<otpOrderByRelevanceFieldEnum>
    sort: SortOrder
    search: string
  }

  export type otpCountOrderByAggregateInput = {
    otID?: SortOrder
    otp?: SortOrder
    createdAt?: SortOrder
    expiredAt?: SortOrder
  }

  export type otpMaxOrderByAggregateInput = {
    otID?: SortOrder
    otp?: SortOrder
    createdAt?: SortOrder
    expiredAt?: SortOrder
  }

  export type otpMinOrderByAggregateInput = {
    otID?: SortOrder
    otp?: SortOrder
    createdAt?: SortOrder
    expiredAt?: SortOrder
  }

  export type productCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<productCreateWithoutUserInput>, Enumerable<productUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<productCreateOrConnectWithoutUserInput>
    createMany?: productCreateManyUserInputEnvelope
    connect?: Enumerable<productWhereUniqueInput>
  }

  export type orderCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<orderCreateWithoutUserInput>, Enumerable<orderUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<orderCreateOrConnectWithoutUserInput>
    createMany?: orderCreateManyUserInputEnvelope
    connect?: Enumerable<orderWhereUniqueInput>
  }

  export type profileCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<profileCreateWithoutUserInput>, Enumerable<profileUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<profileCreateOrConnectWithoutUserInput>
    createMany?: profileCreateManyUserInputEnvelope
    connect?: Enumerable<profileWhereUniqueInput>
  }

  export type requestCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<requestCreateWithoutUserInput>, Enumerable<requestUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<requestCreateOrConnectWithoutUserInput>
    createMany?: requestCreateManyUserInputEnvelope
    connect?: Enumerable<requestWhereUniqueInput>
  }

  export type logsCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<logsCreateWithoutUserInput>, Enumerable<logsUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<logsCreateOrConnectWithoutUserInput>
    createMany?: logsCreateManyUserInputEnvelope
    connect?: Enumerable<logsWhereUniqueInput>
  }

  export type notificationCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<notificationCreateWithoutUserInput>, Enumerable<notificationUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<notificationCreateOrConnectWithoutUserInput>
    createMany?: notificationCreateManyUserInputEnvelope
    connect?: Enumerable<notificationWhereUniqueInput>
  }

  export type companyCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<companyCreateWithoutUserInput>, Enumerable<companyUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<companyCreateOrConnectWithoutUserInput>
    createMany?: companyCreateManyUserInputEnvelope
    connect?: Enumerable<companyWhereUniqueInput>
  }

  export type productUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<productCreateWithoutUserInput>, Enumerable<productUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<productCreateOrConnectWithoutUserInput>
    createMany?: productCreateManyUserInputEnvelope
    connect?: Enumerable<productWhereUniqueInput>
  }

  export type orderUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<orderCreateWithoutUserInput>, Enumerable<orderUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<orderCreateOrConnectWithoutUserInput>
    createMany?: orderCreateManyUserInputEnvelope
    connect?: Enumerable<orderWhereUniqueInput>
  }

  export type profileUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<profileCreateWithoutUserInput>, Enumerable<profileUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<profileCreateOrConnectWithoutUserInput>
    createMany?: profileCreateManyUserInputEnvelope
    connect?: Enumerable<profileWhereUniqueInput>
  }

  export type requestUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<requestCreateWithoutUserInput>, Enumerable<requestUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<requestCreateOrConnectWithoutUserInput>
    createMany?: requestCreateManyUserInputEnvelope
    connect?: Enumerable<requestWhereUniqueInput>
  }

  export type logsUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<logsCreateWithoutUserInput>, Enumerable<logsUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<logsCreateOrConnectWithoutUserInput>
    createMany?: logsCreateManyUserInputEnvelope
    connect?: Enumerable<logsWhereUniqueInput>
  }

  export type notificationUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<notificationCreateWithoutUserInput>, Enumerable<notificationUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<notificationCreateOrConnectWithoutUserInput>
    createMany?: notificationCreateManyUserInputEnvelope
    connect?: Enumerable<notificationWhereUniqueInput>
  }

  export type companyUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<companyCreateWithoutUserInput>, Enumerable<companyUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<companyCreateOrConnectWithoutUserInput>
    createMany?: companyCreateManyUserInputEnvelope
    connect?: Enumerable<companyWhereUniqueInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type EnumroleFieldUpdateOperationsInput = {
    set?: role
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type productUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<productCreateWithoutUserInput>, Enumerable<productUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<productCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<productUpsertWithWhereUniqueWithoutUserInput>
    createMany?: productCreateManyUserInputEnvelope
    set?: Enumerable<productWhereUniqueInput>
    disconnect?: Enumerable<productWhereUniqueInput>
    delete?: Enumerable<productWhereUniqueInput>
    connect?: Enumerable<productWhereUniqueInput>
    update?: Enumerable<productUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<productUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<productScalarWhereInput>
  }

  export type orderUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<orderCreateWithoutUserInput>, Enumerable<orderUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<orderCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<orderUpsertWithWhereUniqueWithoutUserInput>
    createMany?: orderCreateManyUserInputEnvelope
    set?: Enumerable<orderWhereUniqueInput>
    disconnect?: Enumerable<orderWhereUniqueInput>
    delete?: Enumerable<orderWhereUniqueInput>
    connect?: Enumerable<orderWhereUniqueInput>
    update?: Enumerable<orderUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<orderUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<orderScalarWhereInput>
  }

  export type profileUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<profileCreateWithoutUserInput>, Enumerable<profileUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<profileCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<profileUpsertWithWhereUniqueWithoutUserInput>
    createMany?: profileCreateManyUserInputEnvelope
    set?: Enumerable<profileWhereUniqueInput>
    disconnect?: Enumerable<profileWhereUniqueInput>
    delete?: Enumerable<profileWhereUniqueInput>
    connect?: Enumerable<profileWhereUniqueInput>
    update?: Enumerable<profileUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<profileUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<profileScalarWhereInput>
  }

  export type requestUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<requestCreateWithoutUserInput>, Enumerable<requestUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<requestCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<requestUpsertWithWhereUniqueWithoutUserInput>
    createMany?: requestCreateManyUserInputEnvelope
    set?: Enumerable<requestWhereUniqueInput>
    disconnect?: Enumerable<requestWhereUniqueInput>
    delete?: Enumerable<requestWhereUniqueInput>
    connect?: Enumerable<requestWhereUniqueInput>
    update?: Enumerable<requestUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<requestUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<requestScalarWhereInput>
  }

  export type logsUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<logsCreateWithoutUserInput>, Enumerable<logsUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<logsCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<logsUpsertWithWhereUniqueWithoutUserInput>
    createMany?: logsCreateManyUserInputEnvelope
    set?: Enumerable<logsWhereUniqueInput>
    disconnect?: Enumerable<logsWhereUniqueInput>
    delete?: Enumerable<logsWhereUniqueInput>
    connect?: Enumerable<logsWhereUniqueInput>
    update?: Enumerable<logsUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<logsUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<logsScalarWhereInput>
  }

  export type notificationUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<notificationCreateWithoutUserInput>, Enumerable<notificationUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<notificationCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<notificationUpsertWithWhereUniqueWithoutUserInput>
    createMany?: notificationCreateManyUserInputEnvelope
    set?: Enumerable<notificationWhereUniqueInput>
    disconnect?: Enumerable<notificationWhereUniqueInput>
    delete?: Enumerable<notificationWhereUniqueInput>
    connect?: Enumerable<notificationWhereUniqueInput>
    update?: Enumerable<notificationUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<notificationUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<notificationScalarWhereInput>
  }

  export type companyUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<companyCreateWithoutUserInput>, Enumerable<companyUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<companyCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<companyUpsertWithWhereUniqueWithoutUserInput>
    createMany?: companyCreateManyUserInputEnvelope
    set?: Enumerable<companyWhereUniqueInput>
    disconnect?: Enumerable<companyWhereUniqueInput>
    delete?: Enumerable<companyWhereUniqueInput>
    connect?: Enumerable<companyWhereUniqueInput>
    update?: Enumerable<companyUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<companyUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<companyScalarWhereInput>
  }

  export type productUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<productCreateWithoutUserInput>, Enumerable<productUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<productCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<productUpsertWithWhereUniqueWithoutUserInput>
    createMany?: productCreateManyUserInputEnvelope
    set?: Enumerable<productWhereUniqueInput>
    disconnect?: Enumerable<productWhereUniqueInput>
    delete?: Enumerable<productWhereUniqueInput>
    connect?: Enumerable<productWhereUniqueInput>
    update?: Enumerable<productUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<productUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<productScalarWhereInput>
  }

  export type orderUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<orderCreateWithoutUserInput>, Enumerable<orderUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<orderCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<orderUpsertWithWhereUniqueWithoutUserInput>
    createMany?: orderCreateManyUserInputEnvelope
    set?: Enumerable<orderWhereUniqueInput>
    disconnect?: Enumerable<orderWhereUniqueInput>
    delete?: Enumerable<orderWhereUniqueInput>
    connect?: Enumerable<orderWhereUniqueInput>
    update?: Enumerable<orderUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<orderUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<orderScalarWhereInput>
  }

  export type profileUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<profileCreateWithoutUserInput>, Enumerable<profileUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<profileCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<profileUpsertWithWhereUniqueWithoutUserInput>
    createMany?: profileCreateManyUserInputEnvelope
    set?: Enumerable<profileWhereUniqueInput>
    disconnect?: Enumerable<profileWhereUniqueInput>
    delete?: Enumerable<profileWhereUniqueInput>
    connect?: Enumerable<profileWhereUniqueInput>
    update?: Enumerable<profileUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<profileUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<profileScalarWhereInput>
  }

  export type requestUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<requestCreateWithoutUserInput>, Enumerable<requestUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<requestCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<requestUpsertWithWhereUniqueWithoutUserInput>
    createMany?: requestCreateManyUserInputEnvelope
    set?: Enumerable<requestWhereUniqueInput>
    disconnect?: Enumerable<requestWhereUniqueInput>
    delete?: Enumerable<requestWhereUniqueInput>
    connect?: Enumerable<requestWhereUniqueInput>
    update?: Enumerable<requestUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<requestUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<requestScalarWhereInput>
  }

  export type logsUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<logsCreateWithoutUserInput>, Enumerable<logsUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<logsCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<logsUpsertWithWhereUniqueWithoutUserInput>
    createMany?: logsCreateManyUserInputEnvelope
    set?: Enumerable<logsWhereUniqueInput>
    disconnect?: Enumerable<logsWhereUniqueInput>
    delete?: Enumerable<logsWhereUniqueInput>
    connect?: Enumerable<logsWhereUniqueInput>
    update?: Enumerable<logsUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<logsUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<logsScalarWhereInput>
  }

  export type notificationUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<notificationCreateWithoutUserInput>, Enumerable<notificationUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<notificationCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<notificationUpsertWithWhereUniqueWithoutUserInput>
    createMany?: notificationCreateManyUserInputEnvelope
    set?: Enumerable<notificationWhereUniqueInput>
    disconnect?: Enumerable<notificationWhereUniqueInput>
    delete?: Enumerable<notificationWhereUniqueInput>
    connect?: Enumerable<notificationWhereUniqueInput>
    update?: Enumerable<notificationUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<notificationUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<notificationScalarWhereInput>
  }

  export type companyUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<companyCreateWithoutUserInput>, Enumerable<companyUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<companyCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<companyUpsertWithWhereUniqueWithoutUserInput>
    createMany?: companyCreateManyUserInputEnvelope
    set?: Enumerable<companyWhereUniqueInput>
    disconnect?: Enumerable<companyWhereUniqueInput>
    delete?: Enumerable<companyWhereUniqueInput>
    connect?: Enumerable<companyWhereUniqueInput>
    update?: Enumerable<companyUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<companyUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<companyScalarWhereInput>
  }

  export type UserCreateNestedOneWithoutLogsInput = {
    create?: XOR<UserCreateWithoutLogsInput, UserUncheckedCreateWithoutLogsInput>
    connectOrCreate?: UserCreateOrConnectWithoutLogsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneWithoutLogsNestedInput = {
    create?: XOR<UserCreateWithoutLogsInput, UserUncheckedCreateWithoutLogsInput>
    connectOrCreate?: UserCreateOrConnectWithoutLogsInput
    upsert?: UserUpsertWithoutLogsInput
    disconnect?: boolean
    delete?: boolean
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutLogsInput, UserUncheckedUpdateWithoutLogsInput>
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type UserCreateNestedOneWithoutCompanyInput = {
    create?: XOR<UserCreateWithoutCompanyInput, UserUncheckedCreateWithoutCompanyInput>
    connectOrCreate?: UserCreateOrConnectWithoutCompanyInput
    connect?: UserWhereUniqueInput
  }

  export type productCreateNestedManyWithoutCompanyInput = {
    create?: XOR<Enumerable<productCreateWithoutCompanyInput>, Enumerable<productUncheckedCreateWithoutCompanyInput>>
    connectOrCreate?: Enumerable<productCreateOrConnectWithoutCompanyInput>
    connect?: Enumerable<productWhereUniqueInput>
  }

  export type addressCreateNestedManyWithoutCompanyInput = {
    create?: XOR<Enumerable<addressCreateWithoutCompanyInput>, Enumerable<addressUncheckedCreateWithoutCompanyInput>>
    connectOrCreate?: Enumerable<addressCreateOrConnectWithoutCompanyInput>
    createMany?: addressCreateManyCompanyInputEnvelope
    connect?: Enumerable<addressWhereUniqueInput>
  }

  export type orderCreateNestedManyWithoutCompanyInput = {
    create?: XOR<Enumerable<orderCreateWithoutCompanyInput>, Enumerable<orderUncheckedCreateWithoutCompanyInput>>
    connectOrCreate?: Enumerable<orderCreateOrConnectWithoutCompanyInput>
    createMany?: orderCreateManyCompanyInputEnvelope
    connect?: Enumerable<orderWhereUniqueInput>
  }

  export type productUncheckedCreateNestedManyWithoutCompanyInput = {
    create?: XOR<Enumerable<productCreateWithoutCompanyInput>, Enumerable<productUncheckedCreateWithoutCompanyInput>>
    connectOrCreate?: Enumerable<productCreateOrConnectWithoutCompanyInput>
    connect?: Enumerable<productWhereUniqueInput>
  }

  export type addressUncheckedCreateNestedManyWithoutCompanyInput = {
    create?: XOR<Enumerable<addressCreateWithoutCompanyInput>, Enumerable<addressUncheckedCreateWithoutCompanyInput>>
    connectOrCreate?: Enumerable<addressCreateOrConnectWithoutCompanyInput>
    createMany?: addressCreateManyCompanyInputEnvelope
    connect?: Enumerable<addressWhereUniqueInput>
  }

  export type orderUncheckedCreateNestedManyWithoutCompanyInput = {
    create?: XOR<Enumerable<orderCreateWithoutCompanyInput>, Enumerable<orderUncheckedCreateWithoutCompanyInput>>
    connectOrCreate?: Enumerable<orderCreateOrConnectWithoutCompanyInput>
    createMany?: orderCreateManyCompanyInputEnvelope
    connect?: Enumerable<orderWhereUniqueInput>
  }

  export type UserUpdateOneRequiredWithoutCompanyNestedInput = {
    create?: XOR<UserCreateWithoutCompanyInput, UserUncheckedCreateWithoutCompanyInput>
    connectOrCreate?: UserCreateOrConnectWithoutCompanyInput
    upsert?: UserUpsertWithoutCompanyInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutCompanyInput, UserUncheckedUpdateWithoutCompanyInput>
  }

  export type productUpdateManyWithoutCompanyNestedInput = {
    create?: XOR<Enumerable<productCreateWithoutCompanyInput>, Enumerable<productUncheckedCreateWithoutCompanyInput>>
    connectOrCreate?: Enumerable<productCreateOrConnectWithoutCompanyInput>
    upsert?: Enumerable<productUpsertWithWhereUniqueWithoutCompanyInput>
    set?: Enumerable<productWhereUniqueInput>
    disconnect?: Enumerable<productWhereUniqueInput>
    delete?: Enumerable<productWhereUniqueInput>
    connect?: Enumerable<productWhereUniqueInput>
    update?: Enumerable<productUpdateWithWhereUniqueWithoutCompanyInput>
    updateMany?: Enumerable<productUpdateManyWithWhereWithoutCompanyInput>
    deleteMany?: Enumerable<productScalarWhereInput>
  }

  export type addressUpdateManyWithoutCompanyNestedInput = {
    create?: XOR<Enumerable<addressCreateWithoutCompanyInput>, Enumerable<addressUncheckedCreateWithoutCompanyInput>>
    connectOrCreate?: Enumerable<addressCreateOrConnectWithoutCompanyInput>
    upsert?: Enumerable<addressUpsertWithWhereUniqueWithoutCompanyInput>
    createMany?: addressCreateManyCompanyInputEnvelope
    set?: Enumerable<addressWhereUniqueInput>
    disconnect?: Enumerable<addressWhereUniqueInput>
    delete?: Enumerable<addressWhereUniqueInput>
    connect?: Enumerable<addressWhereUniqueInput>
    update?: Enumerable<addressUpdateWithWhereUniqueWithoutCompanyInput>
    updateMany?: Enumerable<addressUpdateManyWithWhereWithoutCompanyInput>
    deleteMany?: Enumerable<addressScalarWhereInput>
  }

  export type orderUpdateManyWithoutCompanyNestedInput = {
    create?: XOR<Enumerable<orderCreateWithoutCompanyInput>, Enumerable<orderUncheckedCreateWithoutCompanyInput>>
    connectOrCreate?: Enumerable<orderCreateOrConnectWithoutCompanyInput>
    upsert?: Enumerable<orderUpsertWithWhereUniqueWithoutCompanyInput>
    createMany?: orderCreateManyCompanyInputEnvelope
    set?: Enumerable<orderWhereUniqueInput>
    disconnect?: Enumerable<orderWhereUniqueInput>
    delete?: Enumerable<orderWhereUniqueInput>
    connect?: Enumerable<orderWhereUniqueInput>
    update?: Enumerable<orderUpdateWithWhereUniqueWithoutCompanyInput>
    updateMany?: Enumerable<orderUpdateManyWithWhereWithoutCompanyInput>
    deleteMany?: Enumerable<orderScalarWhereInput>
  }

  export type productUncheckedUpdateManyWithoutCompanyNestedInput = {
    create?: XOR<Enumerable<productCreateWithoutCompanyInput>, Enumerable<productUncheckedCreateWithoutCompanyInput>>
    connectOrCreate?: Enumerable<productCreateOrConnectWithoutCompanyInput>
    upsert?: Enumerable<productUpsertWithWhereUniqueWithoutCompanyInput>
    set?: Enumerable<productWhereUniqueInput>
    disconnect?: Enumerable<productWhereUniqueInput>
    delete?: Enumerable<productWhereUniqueInput>
    connect?: Enumerable<productWhereUniqueInput>
    update?: Enumerable<productUpdateWithWhereUniqueWithoutCompanyInput>
    updateMany?: Enumerable<productUpdateManyWithWhereWithoutCompanyInput>
    deleteMany?: Enumerable<productScalarWhereInput>
  }

  export type addressUncheckedUpdateManyWithoutCompanyNestedInput = {
    create?: XOR<Enumerable<addressCreateWithoutCompanyInput>, Enumerable<addressUncheckedCreateWithoutCompanyInput>>
    connectOrCreate?: Enumerable<addressCreateOrConnectWithoutCompanyInput>
    upsert?: Enumerable<addressUpsertWithWhereUniqueWithoutCompanyInput>
    createMany?: addressCreateManyCompanyInputEnvelope
    set?: Enumerable<addressWhereUniqueInput>
    disconnect?: Enumerable<addressWhereUniqueInput>
    delete?: Enumerable<addressWhereUniqueInput>
    connect?: Enumerable<addressWhereUniqueInput>
    update?: Enumerable<addressUpdateWithWhereUniqueWithoutCompanyInput>
    updateMany?: Enumerable<addressUpdateManyWithWhereWithoutCompanyInput>
    deleteMany?: Enumerable<addressScalarWhereInput>
  }

  export type orderUncheckedUpdateManyWithoutCompanyNestedInput = {
    create?: XOR<Enumerable<orderCreateWithoutCompanyInput>, Enumerable<orderUncheckedCreateWithoutCompanyInput>>
    connectOrCreate?: Enumerable<orderCreateOrConnectWithoutCompanyInput>
    upsert?: Enumerable<orderUpsertWithWhereUniqueWithoutCompanyInput>
    createMany?: orderCreateManyCompanyInputEnvelope
    set?: Enumerable<orderWhereUniqueInput>
    disconnect?: Enumerable<orderWhereUniqueInput>
    delete?: Enumerable<orderWhereUniqueInput>
    connect?: Enumerable<orderWhereUniqueInput>
    update?: Enumerable<orderUpdateWithWhereUniqueWithoutCompanyInput>
    updateMany?: Enumerable<orderUpdateManyWithWhereWithoutCompanyInput>
    deleteMany?: Enumerable<orderScalarWhereInput>
  }

  export type companyCreateNestedOneWithoutCompanyAddressInput = {
    create?: XOR<companyCreateWithoutCompanyAddressInput, companyUncheckedCreateWithoutCompanyAddressInput>
    connectOrCreate?: companyCreateOrConnectWithoutCompanyAddressInput
    connect?: companyWhereUniqueInput
  }

  export type companyUpdateOneWithoutCompanyAddressNestedInput = {
    create?: XOR<companyCreateWithoutCompanyAddressInput, companyUncheckedCreateWithoutCompanyAddressInput>
    connectOrCreate?: companyCreateOrConnectWithoutCompanyAddressInput
    upsert?: companyUpsertWithoutCompanyAddressInput
    disconnect?: boolean
    delete?: boolean
    connect?: companyWhereUniqueInput
    update?: XOR<companyUpdateWithoutCompanyAddressInput, companyUncheckedUpdateWithoutCompanyAddressInput>
  }

  export type UserCreateNestedOneWithoutProfileInput = {
    create?: XOR<UserCreateWithoutProfileInput, UserUncheckedCreateWithoutProfileInput>
    connectOrCreate?: UserCreateOrConnectWithoutProfileInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneWithoutProfileNestedInput = {
    create?: XOR<UserCreateWithoutProfileInput, UserUncheckedCreateWithoutProfileInput>
    connectOrCreate?: UserCreateOrConnectWithoutProfileInput
    upsert?: UserUpsertWithoutProfileInput
    disconnect?: boolean
    delete?: boolean
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutProfileInput, UserUncheckedUpdateWithoutProfileInput>
  }

  export type productCreateNestedManyWithoutNotificationInput = {
    create?: XOR<Enumerable<productCreateWithoutNotificationInput>, Enumerable<productUncheckedCreateWithoutNotificationInput>>
    connectOrCreate?: Enumerable<productCreateOrConnectWithoutNotificationInput>
    createMany?: productCreateManyNotificationInputEnvelope
    connect?: Enumerable<productWhereUniqueInput>
  }

  export type requestCreateNestedManyWithoutNotificationInput = {
    create?: XOR<Enumerable<requestCreateWithoutNotificationInput>, Enumerable<requestUncheckedCreateWithoutNotificationInput>>
    connectOrCreate?: Enumerable<requestCreateOrConnectWithoutNotificationInput>
    createMany?: requestCreateManyNotificationInputEnvelope
    connect?: Enumerable<requestWhereUniqueInput>
  }

  export type UserCreateNestedOneWithoutNotificaitonInput = {
    create?: XOR<UserCreateWithoutNotificaitonInput, UserUncheckedCreateWithoutNotificaitonInput>
    connectOrCreate?: UserCreateOrConnectWithoutNotificaitonInput
    connect?: UserWhereUniqueInput
  }

  export type productUncheckedCreateNestedManyWithoutNotificationInput = {
    create?: XOR<Enumerable<productCreateWithoutNotificationInput>, Enumerable<productUncheckedCreateWithoutNotificationInput>>
    connectOrCreate?: Enumerable<productCreateOrConnectWithoutNotificationInput>
    createMany?: productCreateManyNotificationInputEnvelope
    connect?: Enumerable<productWhereUniqueInput>
  }

  export type requestUncheckedCreateNestedManyWithoutNotificationInput = {
    create?: XOR<Enumerable<requestCreateWithoutNotificationInput>, Enumerable<requestUncheckedCreateWithoutNotificationInput>>
    connectOrCreate?: Enumerable<requestCreateOrConnectWithoutNotificationInput>
    createMany?: requestCreateManyNotificationInputEnvelope
    connect?: Enumerable<requestWhereUniqueInput>
  }

  export type EnumnotificationStatusFieldUpdateOperationsInput = {
    set?: notificationStatus
  }

  export type productUpdateManyWithoutNotificationNestedInput = {
    create?: XOR<Enumerable<productCreateWithoutNotificationInput>, Enumerable<productUncheckedCreateWithoutNotificationInput>>
    connectOrCreate?: Enumerable<productCreateOrConnectWithoutNotificationInput>
    upsert?: Enumerable<productUpsertWithWhereUniqueWithoutNotificationInput>
    createMany?: productCreateManyNotificationInputEnvelope
    set?: Enumerable<productWhereUniqueInput>
    disconnect?: Enumerable<productWhereUniqueInput>
    delete?: Enumerable<productWhereUniqueInput>
    connect?: Enumerable<productWhereUniqueInput>
    update?: Enumerable<productUpdateWithWhereUniqueWithoutNotificationInput>
    updateMany?: Enumerable<productUpdateManyWithWhereWithoutNotificationInput>
    deleteMany?: Enumerable<productScalarWhereInput>
  }

  export type requestUpdateManyWithoutNotificationNestedInput = {
    create?: XOR<Enumerable<requestCreateWithoutNotificationInput>, Enumerable<requestUncheckedCreateWithoutNotificationInput>>
    connectOrCreate?: Enumerable<requestCreateOrConnectWithoutNotificationInput>
    upsert?: Enumerable<requestUpsertWithWhereUniqueWithoutNotificationInput>
    createMany?: requestCreateManyNotificationInputEnvelope
    set?: Enumerable<requestWhereUniqueInput>
    disconnect?: Enumerable<requestWhereUniqueInput>
    delete?: Enumerable<requestWhereUniqueInput>
    connect?: Enumerable<requestWhereUniqueInput>
    update?: Enumerable<requestUpdateWithWhereUniqueWithoutNotificationInput>
    updateMany?: Enumerable<requestUpdateManyWithWhereWithoutNotificationInput>
    deleteMany?: Enumerable<requestScalarWhereInput>
  }

  export type UserUpdateOneWithoutNotificaitonNestedInput = {
    create?: XOR<UserCreateWithoutNotificaitonInput, UserUncheckedCreateWithoutNotificaitonInput>
    connectOrCreate?: UserCreateOrConnectWithoutNotificaitonInput
    upsert?: UserUpsertWithoutNotificaitonInput
    disconnect?: boolean
    delete?: boolean
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutNotificaitonInput, UserUncheckedUpdateWithoutNotificaitonInput>
  }

  export type productUncheckedUpdateManyWithoutNotificationNestedInput = {
    create?: XOR<Enumerable<productCreateWithoutNotificationInput>, Enumerable<productUncheckedCreateWithoutNotificationInput>>
    connectOrCreate?: Enumerable<productCreateOrConnectWithoutNotificationInput>
    upsert?: Enumerable<productUpsertWithWhereUniqueWithoutNotificationInput>
    createMany?: productCreateManyNotificationInputEnvelope
    set?: Enumerable<productWhereUniqueInput>
    disconnect?: Enumerable<productWhereUniqueInput>
    delete?: Enumerable<productWhereUniqueInput>
    connect?: Enumerable<productWhereUniqueInput>
    update?: Enumerable<productUpdateWithWhereUniqueWithoutNotificationInput>
    updateMany?: Enumerable<productUpdateManyWithWhereWithoutNotificationInput>
    deleteMany?: Enumerable<productScalarWhereInput>
  }

  export type requestUncheckedUpdateManyWithoutNotificationNestedInput = {
    create?: XOR<Enumerable<requestCreateWithoutNotificationInput>, Enumerable<requestUncheckedCreateWithoutNotificationInput>>
    connectOrCreate?: Enumerable<requestCreateOrConnectWithoutNotificationInput>
    upsert?: Enumerable<requestUpsertWithWhereUniqueWithoutNotificationInput>
    createMany?: requestCreateManyNotificationInputEnvelope
    set?: Enumerable<requestWhereUniqueInput>
    disconnect?: Enumerable<requestWhereUniqueInput>
    delete?: Enumerable<requestWhereUniqueInput>
    connect?: Enumerable<requestWhereUniqueInput>
    update?: Enumerable<requestUpdateWithWhereUniqueWithoutNotificationInput>
    updateMany?: Enumerable<requestUpdateManyWithWhereWithoutNotificationInput>
    deleteMany?: Enumerable<requestScalarWhereInput>
  }

  export type UserCreateNestedOneWithoutProductsInput = {
    create?: XOR<UserCreateWithoutProductsInput, UserUncheckedCreateWithoutProductsInput>
    connectOrCreate?: UserCreateOrConnectWithoutProductsInput
    connect?: UserWhereUniqueInput
  }

  export type companyCreateNestedManyWithoutProductInput = {
    create?: XOR<Enumerable<companyCreateWithoutProductInput>, Enumerable<companyUncheckedCreateWithoutProductInput>>
    connectOrCreate?: Enumerable<companyCreateOrConnectWithoutProductInput>
    connect?: Enumerable<companyWhereUniqueInput>
  }

  export type notificationCreateNestedOneWithoutProductInput = {
    create?: XOR<notificationCreateWithoutProductInput, notificationUncheckedCreateWithoutProductInput>
    connectOrCreate?: notificationCreateOrConnectWithoutProductInput
    connect?: notificationWhereUniqueInput
  }

  export type requestCreateNestedManyWithoutProductInput = {
    create?: XOR<Enumerable<requestCreateWithoutProductInput>, Enumerable<requestUncheckedCreateWithoutProductInput>>
    connectOrCreate?: Enumerable<requestCreateOrConnectWithoutProductInput>
    connect?: Enumerable<requestWhereUniqueInput>
  }

  export type orderCreateNestedManyWithoutProductInput = {
    create?: XOR<Enumerable<orderCreateWithoutProductInput>, Enumerable<orderUncheckedCreateWithoutProductInput>>
    connectOrCreate?: Enumerable<orderCreateOrConnectWithoutProductInput>
    connect?: Enumerable<orderWhereUniqueInput>
  }

  export type companyUncheckedCreateNestedManyWithoutProductInput = {
    create?: XOR<Enumerable<companyCreateWithoutProductInput>, Enumerable<companyUncheckedCreateWithoutProductInput>>
    connectOrCreate?: Enumerable<companyCreateOrConnectWithoutProductInput>
    connect?: Enumerable<companyWhereUniqueInput>
  }

  export type requestUncheckedCreateNestedManyWithoutProductInput = {
    create?: XOR<Enumerable<requestCreateWithoutProductInput>, Enumerable<requestUncheckedCreateWithoutProductInput>>
    connectOrCreate?: Enumerable<requestCreateOrConnectWithoutProductInput>
    connect?: Enumerable<requestWhereUniqueInput>
  }

  export type orderUncheckedCreateNestedManyWithoutProductInput = {
    create?: XOR<Enumerable<orderCreateWithoutProductInput>, Enumerable<orderUncheckedCreateWithoutProductInput>>
    connectOrCreate?: Enumerable<orderCreateOrConnectWithoutProductInput>
    connect?: Enumerable<orderWhereUniqueInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type EnumproductStatusFieldUpdateOperationsInput = {
    set?: productStatus
  }

  export type UserUpdateOneRequiredWithoutProductsNestedInput = {
    create?: XOR<UserCreateWithoutProductsInput, UserUncheckedCreateWithoutProductsInput>
    connectOrCreate?: UserCreateOrConnectWithoutProductsInput
    upsert?: UserUpsertWithoutProductsInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutProductsInput, UserUncheckedUpdateWithoutProductsInput>
  }

  export type companyUpdateManyWithoutProductNestedInput = {
    create?: XOR<Enumerable<companyCreateWithoutProductInput>, Enumerable<companyUncheckedCreateWithoutProductInput>>
    connectOrCreate?: Enumerable<companyCreateOrConnectWithoutProductInput>
    upsert?: Enumerable<companyUpsertWithWhereUniqueWithoutProductInput>
    set?: Enumerable<companyWhereUniqueInput>
    disconnect?: Enumerable<companyWhereUniqueInput>
    delete?: Enumerable<companyWhereUniqueInput>
    connect?: Enumerable<companyWhereUniqueInput>
    update?: Enumerable<companyUpdateWithWhereUniqueWithoutProductInput>
    updateMany?: Enumerable<companyUpdateManyWithWhereWithoutProductInput>
    deleteMany?: Enumerable<companyScalarWhereInput>
  }

  export type notificationUpdateOneWithoutProductNestedInput = {
    create?: XOR<notificationCreateWithoutProductInput, notificationUncheckedCreateWithoutProductInput>
    connectOrCreate?: notificationCreateOrConnectWithoutProductInput
    upsert?: notificationUpsertWithoutProductInput
    disconnect?: boolean
    delete?: boolean
    connect?: notificationWhereUniqueInput
    update?: XOR<notificationUpdateWithoutProductInput, notificationUncheckedUpdateWithoutProductInput>
  }

  export type requestUpdateManyWithoutProductNestedInput = {
    create?: XOR<Enumerable<requestCreateWithoutProductInput>, Enumerable<requestUncheckedCreateWithoutProductInput>>
    connectOrCreate?: Enumerable<requestCreateOrConnectWithoutProductInput>
    upsert?: Enumerable<requestUpsertWithWhereUniqueWithoutProductInput>
    set?: Enumerable<requestWhereUniqueInput>
    disconnect?: Enumerable<requestWhereUniqueInput>
    delete?: Enumerable<requestWhereUniqueInput>
    connect?: Enumerable<requestWhereUniqueInput>
    update?: Enumerable<requestUpdateWithWhereUniqueWithoutProductInput>
    updateMany?: Enumerable<requestUpdateManyWithWhereWithoutProductInput>
    deleteMany?: Enumerable<requestScalarWhereInput>
  }

  export type orderUpdateManyWithoutProductNestedInput = {
    create?: XOR<Enumerable<orderCreateWithoutProductInput>, Enumerable<orderUncheckedCreateWithoutProductInput>>
    connectOrCreate?: Enumerable<orderCreateOrConnectWithoutProductInput>
    upsert?: Enumerable<orderUpsertWithWhereUniqueWithoutProductInput>
    set?: Enumerable<orderWhereUniqueInput>
    disconnect?: Enumerable<orderWhereUniqueInput>
    delete?: Enumerable<orderWhereUniqueInput>
    connect?: Enumerable<orderWhereUniqueInput>
    update?: Enumerable<orderUpdateWithWhereUniqueWithoutProductInput>
    updateMany?: Enumerable<orderUpdateManyWithWhereWithoutProductInput>
    deleteMany?: Enumerable<orderScalarWhereInput>
  }

  export type companyUncheckedUpdateManyWithoutProductNestedInput = {
    create?: XOR<Enumerable<companyCreateWithoutProductInput>, Enumerable<companyUncheckedCreateWithoutProductInput>>
    connectOrCreate?: Enumerable<companyCreateOrConnectWithoutProductInput>
    upsert?: Enumerable<companyUpsertWithWhereUniqueWithoutProductInput>
    set?: Enumerable<companyWhereUniqueInput>
    disconnect?: Enumerable<companyWhereUniqueInput>
    delete?: Enumerable<companyWhereUniqueInput>
    connect?: Enumerable<companyWhereUniqueInput>
    update?: Enumerable<companyUpdateWithWhereUniqueWithoutProductInput>
    updateMany?: Enumerable<companyUpdateManyWithWhereWithoutProductInput>
    deleteMany?: Enumerable<companyScalarWhereInput>
  }

  export type requestUncheckedUpdateManyWithoutProductNestedInput = {
    create?: XOR<Enumerable<requestCreateWithoutProductInput>, Enumerable<requestUncheckedCreateWithoutProductInput>>
    connectOrCreate?: Enumerable<requestCreateOrConnectWithoutProductInput>
    upsert?: Enumerable<requestUpsertWithWhereUniqueWithoutProductInput>
    set?: Enumerable<requestWhereUniqueInput>
    disconnect?: Enumerable<requestWhereUniqueInput>
    delete?: Enumerable<requestWhereUniqueInput>
    connect?: Enumerable<requestWhereUniqueInput>
    update?: Enumerable<requestUpdateWithWhereUniqueWithoutProductInput>
    updateMany?: Enumerable<requestUpdateManyWithWhereWithoutProductInput>
    deleteMany?: Enumerable<requestScalarWhereInput>
  }

  export type orderUncheckedUpdateManyWithoutProductNestedInput = {
    create?: XOR<Enumerable<orderCreateWithoutProductInput>, Enumerable<orderUncheckedCreateWithoutProductInput>>
    connectOrCreate?: Enumerable<orderCreateOrConnectWithoutProductInput>
    upsert?: Enumerable<orderUpsertWithWhereUniqueWithoutProductInput>
    set?: Enumerable<orderWhereUniqueInput>
    disconnect?: Enumerable<orderWhereUniqueInput>
    delete?: Enumerable<orderWhereUniqueInput>
    connect?: Enumerable<orderWhereUniqueInput>
    update?: Enumerable<orderUpdateWithWhereUniqueWithoutProductInput>
    updateMany?: Enumerable<orderUpdateManyWithWhereWithoutProductInput>
    deleteMany?: Enumerable<orderScalarWhereInput>
  }

  export type productCreateNestedManyWithoutOrderInput = {
    create?: XOR<Enumerable<productCreateWithoutOrderInput>, Enumerable<productUncheckedCreateWithoutOrderInput>>
    connectOrCreate?: Enumerable<productCreateOrConnectWithoutOrderInput>
    connect?: Enumerable<productWhereUniqueInput>
  }

  export type companyCreateNestedOneWithoutOrderInput = {
    create?: XOR<companyCreateWithoutOrderInput, companyUncheckedCreateWithoutOrderInput>
    connectOrCreate?: companyCreateOrConnectWithoutOrderInput
    connect?: companyWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutOrderInput = {
    create?: XOR<UserCreateWithoutOrderInput, UserUncheckedCreateWithoutOrderInput>
    connectOrCreate?: UserCreateOrConnectWithoutOrderInput
    connect?: UserWhereUniqueInput
  }

  export type productUncheckedCreateNestedManyWithoutOrderInput = {
    create?: XOR<Enumerable<productCreateWithoutOrderInput>, Enumerable<productUncheckedCreateWithoutOrderInput>>
    connectOrCreate?: Enumerable<productCreateOrConnectWithoutOrderInput>
    connect?: Enumerable<productWhereUniqueInput>
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type EnumorderStatusFieldUpdateOperationsInput = {
    set?: orderStatus
  }

  export type productUpdateManyWithoutOrderNestedInput = {
    create?: XOR<Enumerable<productCreateWithoutOrderInput>, Enumerable<productUncheckedCreateWithoutOrderInput>>
    connectOrCreate?: Enumerable<productCreateOrConnectWithoutOrderInput>
    upsert?: Enumerable<productUpsertWithWhereUniqueWithoutOrderInput>
    set?: Enumerable<productWhereUniqueInput>
    disconnect?: Enumerable<productWhereUniqueInput>
    delete?: Enumerable<productWhereUniqueInput>
    connect?: Enumerable<productWhereUniqueInput>
    update?: Enumerable<productUpdateWithWhereUniqueWithoutOrderInput>
    updateMany?: Enumerable<productUpdateManyWithWhereWithoutOrderInput>
    deleteMany?: Enumerable<productScalarWhereInput>
  }

  export type companyUpdateOneRequiredWithoutOrderNestedInput = {
    create?: XOR<companyCreateWithoutOrderInput, companyUncheckedCreateWithoutOrderInput>
    connectOrCreate?: companyCreateOrConnectWithoutOrderInput
    upsert?: companyUpsertWithoutOrderInput
    connect?: companyWhereUniqueInput
    update?: XOR<companyUpdateWithoutOrderInput, companyUncheckedUpdateWithoutOrderInput>
  }

  export type UserUpdateOneRequiredWithoutOrderNestedInput = {
    create?: XOR<UserCreateWithoutOrderInput, UserUncheckedCreateWithoutOrderInput>
    connectOrCreate?: UserCreateOrConnectWithoutOrderInput
    upsert?: UserUpsertWithoutOrderInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutOrderInput, UserUncheckedUpdateWithoutOrderInput>
  }

  export type productUncheckedUpdateManyWithoutOrderNestedInput = {
    create?: XOR<Enumerable<productCreateWithoutOrderInput>, Enumerable<productUncheckedCreateWithoutOrderInput>>
    connectOrCreate?: Enumerable<productCreateOrConnectWithoutOrderInput>
    upsert?: Enumerable<productUpsertWithWhereUniqueWithoutOrderInput>
    set?: Enumerable<productWhereUniqueInput>
    disconnect?: Enumerable<productWhereUniqueInput>
    delete?: Enumerable<productWhereUniqueInput>
    connect?: Enumerable<productWhereUniqueInput>
    update?: Enumerable<productUpdateWithWhereUniqueWithoutOrderInput>
    updateMany?: Enumerable<productUpdateManyWithWhereWithoutOrderInput>
    deleteMany?: Enumerable<productScalarWhereInput>
  }

  export type productCreateNestedManyWithoutRequestInput = {
    create?: XOR<Enumerable<productCreateWithoutRequestInput>, Enumerable<productUncheckedCreateWithoutRequestInput>>
    connectOrCreate?: Enumerable<productCreateOrConnectWithoutRequestInput>
    connect?: Enumerable<productWhereUniqueInput>
  }

  export type UserCreateNestedOneWithoutRequestInput = {
    create?: XOR<UserCreateWithoutRequestInput, UserUncheckedCreateWithoutRequestInput>
    connectOrCreate?: UserCreateOrConnectWithoutRequestInput
    connect?: UserWhereUniqueInput
  }

  export type notificationCreateNestedOneWithoutRequestInput = {
    create?: XOR<notificationCreateWithoutRequestInput, notificationUncheckedCreateWithoutRequestInput>
    connectOrCreate?: notificationCreateOrConnectWithoutRequestInput
    connect?: notificationWhereUniqueInput
  }

  export type productUncheckedCreateNestedManyWithoutRequestInput = {
    create?: XOR<Enumerable<productCreateWithoutRequestInput>, Enumerable<productUncheckedCreateWithoutRequestInput>>
    connectOrCreate?: Enumerable<productCreateOrConnectWithoutRequestInput>
    connect?: Enumerable<productWhereUniqueInput>
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type EnumrequestStatusFieldUpdateOperationsInput = {
    set?: requestStatus
  }

  export type productUpdateManyWithoutRequestNestedInput = {
    create?: XOR<Enumerable<productCreateWithoutRequestInput>, Enumerable<productUncheckedCreateWithoutRequestInput>>
    connectOrCreate?: Enumerable<productCreateOrConnectWithoutRequestInput>
    upsert?: Enumerable<productUpsertWithWhereUniqueWithoutRequestInput>
    set?: Enumerable<productWhereUniqueInput>
    disconnect?: Enumerable<productWhereUniqueInput>
    delete?: Enumerable<productWhereUniqueInput>
    connect?: Enumerable<productWhereUniqueInput>
    update?: Enumerable<productUpdateWithWhereUniqueWithoutRequestInput>
    updateMany?: Enumerable<productUpdateManyWithWhereWithoutRequestInput>
    deleteMany?: Enumerable<productScalarWhereInput>
  }

  export type UserUpdateOneRequiredWithoutRequestNestedInput = {
    create?: XOR<UserCreateWithoutRequestInput, UserUncheckedCreateWithoutRequestInput>
    connectOrCreate?: UserCreateOrConnectWithoutRequestInput
    upsert?: UserUpsertWithoutRequestInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutRequestInput, UserUncheckedUpdateWithoutRequestInput>
  }

  export type notificationUpdateOneWithoutRequestNestedInput = {
    create?: XOR<notificationCreateWithoutRequestInput, notificationUncheckedCreateWithoutRequestInput>
    connectOrCreate?: notificationCreateOrConnectWithoutRequestInput
    upsert?: notificationUpsertWithoutRequestInput
    disconnect?: boolean
    delete?: boolean
    connect?: notificationWhereUniqueInput
    update?: XOR<notificationUpdateWithoutRequestInput, notificationUncheckedUpdateWithoutRequestInput>
  }

  export type productUncheckedUpdateManyWithoutRequestNestedInput = {
    create?: XOR<Enumerable<productCreateWithoutRequestInput>, Enumerable<productUncheckedCreateWithoutRequestInput>>
    connectOrCreate?: Enumerable<productCreateOrConnectWithoutRequestInput>
    upsert?: Enumerable<productUpsertWithWhereUniqueWithoutRequestInput>
    set?: Enumerable<productWhereUniqueInput>
    disconnect?: Enumerable<productWhereUniqueInput>
    delete?: Enumerable<productWhereUniqueInput>
    connect?: Enumerable<productWhereUniqueInput>
    update?: Enumerable<productUpdateWithWhereUniqueWithoutRequestInput>
    updateMany?: Enumerable<productUpdateManyWithWhereWithoutRequestInput>
    deleteMany?: Enumerable<productScalarWhereInput>
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    search?: string
    not?: NestedStringFilter | string
  }

  export type NestedEnumroleFilter = {
    equals?: role
    in?: Enumerable<role>
    notIn?: Enumerable<role>
    not?: NestedEnumroleFilter | role
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedBoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    search?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedEnumroleWithAggregatesFilter = {
    equals?: role
    in?: Enumerable<role>
    notIn?: Enumerable<role>
    not?: NestedEnumroleWithAggregatesFilter | role
    _count?: NestedIntFilter
    _min?: NestedEnumroleFilter
    _max?: NestedEnumroleFilter
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type NestedBoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    search?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    search?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedEnumnotificationStatusFilter = {
    equals?: notificationStatus
    in?: Enumerable<notificationStatus>
    notIn?: Enumerable<notificationStatus>
    not?: NestedEnumnotificationStatusFilter | notificationStatus
  }

  export type NestedEnumnotificationStatusWithAggregatesFilter = {
    equals?: notificationStatus
    in?: Enumerable<notificationStatus>
    notIn?: Enumerable<notificationStatus>
    not?: NestedEnumnotificationStatusWithAggregatesFilter | notificationStatus
    _count?: NestedIntFilter
    _min?: NestedEnumnotificationStatusFilter
    _max?: NestedEnumnotificationStatusFilter
  }

  export type NestedEnumproductStatusFilter = {
    equals?: productStatus
    in?: Enumerable<productStatus>
    notIn?: Enumerable<productStatus>
    not?: NestedEnumproductStatusFilter | productStatus
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedEnumproductStatusWithAggregatesFilter = {
    equals?: productStatus
    in?: Enumerable<productStatus>
    notIn?: Enumerable<productStatus>
    not?: NestedEnumproductStatusWithAggregatesFilter | productStatus
    _count?: NestedIntFilter
    _min?: NestedEnumproductStatusFilter
    _max?: NestedEnumproductStatusFilter
  }

  export type NestedEnumorderStatusFilter = {
    equals?: orderStatus
    in?: Enumerable<orderStatus>
    notIn?: Enumerable<orderStatus>
    not?: NestedEnumorderStatusFilter | orderStatus
  }

  export type NestedFloatWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedFloatFilter
    _min?: NestedFloatFilter
    _max?: NestedFloatFilter
  }

  export type NestedEnumorderStatusWithAggregatesFilter = {
    equals?: orderStatus
    in?: Enumerable<orderStatus>
    notIn?: Enumerable<orderStatus>
    not?: NestedEnumorderStatusWithAggregatesFilter | orderStatus
    _count?: NestedIntFilter
    _min?: NestedEnumorderStatusFilter
    _max?: NestedEnumorderStatusFilter
  }

  export type NestedEnumrequestStatusFilter = {
    equals?: requestStatus
    in?: Enumerable<requestStatus>
    notIn?: Enumerable<requestStatus>
    not?: NestedEnumrequestStatusFilter | requestStatus
  }

  export type NestedIntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type NestedFloatNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableFilter | number | null
  }

  export type NestedEnumrequestStatusWithAggregatesFilter = {
    equals?: requestStatus
    in?: Enumerable<requestStatus>
    notIn?: Enumerable<requestStatus>
    not?: NestedEnumrequestStatusWithAggregatesFilter | requestStatus
    _count?: NestedIntFilter
    _min?: NestedEnumrequestStatusFilter
    _max?: NestedEnumrequestStatusFilter
  }

  export type productCreateWithoutUserInput = {
    productID?: string
    sku: string
    title: string
    price: number
    stock: number
    status?: productStatus
    createdAt: Date | string
    Company?: companyCreateNestedManyWithoutProductInput
    notification?: notificationCreateNestedOneWithoutProductInput
    request?: requestCreateNestedManyWithoutProductInput
    order?: orderCreateNestedManyWithoutProductInput
  }

  export type productUncheckedCreateWithoutUserInput = {
    productID?: string
    sku: string
    title: string
    price: number
    stock: number
    status?: productStatus
    createdAt: Date | string
    notificationID?: string | null
    Company?: companyUncheckedCreateNestedManyWithoutProductInput
    request?: requestUncheckedCreateNestedManyWithoutProductInput
    order?: orderUncheckedCreateNestedManyWithoutProductInput
  }

  export type productCreateOrConnectWithoutUserInput = {
    where: productWhereUniqueInput
    create: XOR<productCreateWithoutUserInput, productUncheckedCreateWithoutUserInput>
  }

  export type productCreateManyUserInputEnvelope = {
    data: Enumerable<productCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type orderCreateWithoutUserInput = {
    orderID?: string
    quantity: number
    total: number
    payment: string
    status: orderStatus
    discount?: number
    createdAt?: Date | string
    Product?: productCreateNestedManyWithoutOrderInput
    Company: companyCreateNestedOneWithoutOrderInput
  }

  export type orderUncheckedCreateWithoutUserInput = {
    orderID?: string
    quantity: number
    total: number
    companyID: string
    payment: string
    status: orderStatus
    discount?: number
    createdAt?: Date | string
    Product?: productUncheckedCreateNestedManyWithoutOrderInput
  }

  export type orderCreateOrConnectWithoutUserInput = {
    where: orderWhereUniqueInput
    create: XOR<orderCreateWithoutUserInput, orderUncheckedCreateWithoutUserInput>
  }

  export type orderCreateManyUserInputEnvelope = {
    data: Enumerable<orderCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type profileCreateWithoutUserInput = {
    profileID?: string
    firstname: string
    lastname: string
    birthday: Date | string
    phone: string
  }

  export type profileUncheckedCreateWithoutUserInput = {
    profileID?: string
    firstname: string
    lastname: string
    birthday: Date | string
    phone: string
  }

  export type profileCreateOrConnectWithoutUserInput = {
    where: profileWhereUniqueInput
    create: XOR<profileCreateWithoutUserInput, profileUncheckedCreateWithoutUserInput>
  }

  export type profileCreateManyUserInputEnvelope = {
    data: Enumerable<profileCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type requestCreateWithoutUserInput = {
    requestID?: string
    message: string
    quantity?: number | null
    status?: requestStatus
    createdAt: Date | string
    Product?: productCreateNestedManyWithoutRequestInput
    notification?: notificationCreateNestedOneWithoutRequestInput
  }

  export type requestUncheckedCreateWithoutUserInput = {
    requestID?: string
    message: string
    quantity?: number | null
    status?: requestStatus
    createdAt: Date | string
    notificationID?: string | null
    Product?: productUncheckedCreateNestedManyWithoutRequestInput
  }

  export type requestCreateOrConnectWithoutUserInput = {
    where: requestWhereUniqueInput
    create: XOR<requestCreateWithoutUserInput, requestUncheckedCreateWithoutUserInput>
  }

  export type requestCreateManyUserInputEnvelope = {
    data: Enumerable<requestCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type logsCreateWithoutUserInput = {
    logsID?: string
    log: string
    createdAt: Date | string
  }

  export type logsUncheckedCreateWithoutUserInput = {
    logsID?: string
    log: string
    createdAt: Date | string
  }

  export type logsCreateOrConnectWithoutUserInput = {
    where: logsWhereUniqueInput
    create: XOR<logsCreateWithoutUserInput, logsUncheckedCreateWithoutUserInput>
  }

  export type logsCreateManyUserInputEnvelope = {
    data: Enumerable<logsCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type notificationCreateWithoutUserInput = {
    notificationID?: string
    title: string
    notificationStatus?: notificationStatus
    createdAt: Date | string
    Product?: productCreateNestedManyWithoutNotificationInput
    Request?: requestCreateNestedManyWithoutNotificationInput
  }

  export type notificationUncheckedCreateWithoutUserInput = {
    notificationID?: string
    title: string
    notificationStatus?: notificationStatus
    createdAt: Date | string
    Product?: productUncheckedCreateNestedManyWithoutNotificationInput
    Request?: requestUncheckedCreateNestedManyWithoutNotificationInput
  }

  export type notificationCreateOrConnectWithoutUserInput = {
    where: notificationWhereUniqueInput
    create: XOR<notificationCreateWithoutUserInput, notificationUncheckedCreateWithoutUserInput>
  }

  export type notificationCreateManyUserInputEnvelope = {
    data: Enumerable<notificationCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type companyCreateWithoutUserInput = {
    companyID?: string
    companyName: string
    Product?: productCreateNestedManyWithoutCompanyInput
    companyAddress?: addressCreateNestedManyWithoutCompanyInput
    order?: orderCreateNestedManyWithoutCompanyInput
  }

  export type companyUncheckedCreateWithoutUserInput = {
    companyID?: string
    companyName: string
    Product?: productUncheckedCreateNestedManyWithoutCompanyInput
    companyAddress?: addressUncheckedCreateNestedManyWithoutCompanyInput
    order?: orderUncheckedCreateNestedManyWithoutCompanyInput
  }

  export type companyCreateOrConnectWithoutUserInput = {
    where: companyWhereUniqueInput
    create: XOR<companyCreateWithoutUserInput, companyUncheckedCreateWithoutUserInput>
  }

  export type companyCreateManyUserInputEnvelope = {
    data: Enumerable<companyCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type productUpsertWithWhereUniqueWithoutUserInput = {
    where: productWhereUniqueInput
    update: XOR<productUpdateWithoutUserInput, productUncheckedUpdateWithoutUserInput>
    create: XOR<productCreateWithoutUserInput, productUncheckedCreateWithoutUserInput>
  }

  export type productUpdateWithWhereUniqueWithoutUserInput = {
    where: productWhereUniqueInput
    data: XOR<productUpdateWithoutUserInput, productUncheckedUpdateWithoutUserInput>
  }

  export type productUpdateManyWithWhereWithoutUserInput = {
    where: productScalarWhereInput
    data: XOR<productUpdateManyMutationInput, productUncheckedUpdateManyWithoutProductsInput>
  }

  export type productScalarWhereInput = {
    AND?: Enumerable<productScalarWhereInput>
    OR?: Enumerable<productScalarWhereInput>
    NOT?: Enumerable<productScalarWhereInput>
    productID?: StringFilter | string
    sku?: StringFilter | string
    title?: StringFilter | string
    price?: IntFilter | number
    stock?: IntFilter | number
    userID?: StringFilter | string
    status?: EnumproductStatusFilter | productStatus
    createdAt?: DateTimeFilter | Date | string
    notificationID?: StringNullableFilter | string | null
  }

  export type orderUpsertWithWhereUniqueWithoutUserInput = {
    where: orderWhereUniqueInput
    update: XOR<orderUpdateWithoutUserInput, orderUncheckedUpdateWithoutUserInput>
    create: XOR<orderCreateWithoutUserInput, orderUncheckedCreateWithoutUserInput>
  }

  export type orderUpdateWithWhereUniqueWithoutUserInput = {
    where: orderWhereUniqueInput
    data: XOR<orderUpdateWithoutUserInput, orderUncheckedUpdateWithoutUserInput>
  }

  export type orderUpdateManyWithWhereWithoutUserInput = {
    where: orderScalarWhereInput
    data: XOR<orderUpdateManyMutationInput, orderUncheckedUpdateManyWithoutOrderInput>
  }

  export type orderScalarWhereInput = {
    AND?: Enumerable<orderScalarWhereInput>
    OR?: Enumerable<orderScalarWhereInput>
    NOT?: Enumerable<orderScalarWhereInput>
    orderID?: StringFilter | string
    quantity?: IntFilter | number
    total?: FloatFilter | number
    companyID?: StringFilter | string
    payment?: StringFilter | string
    status?: EnumorderStatusFilter | orderStatus
    discount?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    userID?: StringFilter | string
  }

  export type profileUpsertWithWhereUniqueWithoutUserInput = {
    where: profileWhereUniqueInput
    update: XOR<profileUpdateWithoutUserInput, profileUncheckedUpdateWithoutUserInput>
    create: XOR<profileCreateWithoutUserInput, profileUncheckedCreateWithoutUserInput>
  }

  export type profileUpdateWithWhereUniqueWithoutUserInput = {
    where: profileWhereUniqueInput
    data: XOR<profileUpdateWithoutUserInput, profileUncheckedUpdateWithoutUserInput>
  }

  export type profileUpdateManyWithWhereWithoutUserInput = {
    where: profileScalarWhereInput
    data: XOR<profileUpdateManyMutationInput, profileUncheckedUpdateManyWithoutProfileInput>
  }

  export type profileScalarWhereInput = {
    AND?: Enumerable<profileScalarWhereInput>
    OR?: Enumerable<profileScalarWhereInput>
    NOT?: Enumerable<profileScalarWhereInput>
    profileID?: StringFilter | string
    firstname?: StringFilter | string
    lastname?: StringFilter | string
    birthday?: DateTimeFilter | Date | string
    phone?: StringFilter | string
    userID?: StringNullableFilter | string | null
  }

  export type requestUpsertWithWhereUniqueWithoutUserInput = {
    where: requestWhereUniqueInput
    update: XOR<requestUpdateWithoutUserInput, requestUncheckedUpdateWithoutUserInput>
    create: XOR<requestCreateWithoutUserInput, requestUncheckedCreateWithoutUserInput>
  }

  export type requestUpdateWithWhereUniqueWithoutUserInput = {
    where: requestWhereUniqueInput
    data: XOR<requestUpdateWithoutUserInput, requestUncheckedUpdateWithoutUserInput>
  }

  export type requestUpdateManyWithWhereWithoutUserInput = {
    where: requestScalarWhereInput
    data: XOR<requestUpdateManyMutationInput, requestUncheckedUpdateManyWithoutRequestInput>
  }

  export type requestScalarWhereInput = {
    AND?: Enumerable<requestScalarWhereInput>
    OR?: Enumerable<requestScalarWhereInput>
    NOT?: Enumerable<requestScalarWhereInput>
    requestID?: StringFilter | string
    message?: StringFilter | string
    quantity?: IntNullableFilter | number | null
    status?: EnumrequestStatusFilter | requestStatus
    createdAt?: DateTimeFilter | Date | string
    userID?: StringFilter | string
    notificationID?: StringNullableFilter | string | null
  }

  export type logsUpsertWithWhereUniqueWithoutUserInput = {
    where: logsWhereUniqueInput
    update: XOR<logsUpdateWithoutUserInput, logsUncheckedUpdateWithoutUserInput>
    create: XOR<logsCreateWithoutUserInput, logsUncheckedCreateWithoutUserInput>
  }

  export type logsUpdateWithWhereUniqueWithoutUserInput = {
    where: logsWhereUniqueInput
    data: XOR<logsUpdateWithoutUserInput, logsUncheckedUpdateWithoutUserInput>
  }

  export type logsUpdateManyWithWhereWithoutUserInput = {
    where: logsScalarWhereInput
    data: XOR<logsUpdateManyMutationInput, logsUncheckedUpdateManyWithoutLogsInput>
  }

  export type logsScalarWhereInput = {
    AND?: Enumerable<logsScalarWhereInput>
    OR?: Enumerable<logsScalarWhereInput>
    NOT?: Enumerable<logsScalarWhereInput>
    logsID?: StringFilter | string
    log?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    userID?: StringNullableFilter | string | null
  }

  export type notificationUpsertWithWhereUniqueWithoutUserInput = {
    where: notificationWhereUniqueInput
    update: XOR<notificationUpdateWithoutUserInput, notificationUncheckedUpdateWithoutUserInput>
    create: XOR<notificationCreateWithoutUserInput, notificationUncheckedCreateWithoutUserInput>
  }

  export type notificationUpdateWithWhereUniqueWithoutUserInput = {
    where: notificationWhereUniqueInput
    data: XOR<notificationUpdateWithoutUserInput, notificationUncheckedUpdateWithoutUserInput>
  }

  export type notificationUpdateManyWithWhereWithoutUserInput = {
    where: notificationScalarWhereInput
    data: XOR<notificationUpdateManyMutationInput, notificationUncheckedUpdateManyWithoutNotificaitonInput>
  }

  export type notificationScalarWhereInput = {
    AND?: Enumerable<notificationScalarWhereInput>
    OR?: Enumerable<notificationScalarWhereInput>
    NOT?: Enumerable<notificationScalarWhereInput>
    notificationID?: StringFilter | string
    title?: StringFilter | string
    notificationStatus?: EnumnotificationStatusFilter | notificationStatus
    createdAt?: DateTimeFilter | Date | string
    userID?: StringNullableFilter | string | null
  }

  export type companyUpsertWithWhereUniqueWithoutUserInput = {
    where: companyWhereUniqueInput
    update: XOR<companyUpdateWithoutUserInput, companyUncheckedUpdateWithoutUserInput>
    create: XOR<companyCreateWithoutUserInput, companyUncheckedCreateWithoutUserInput>
  }

  export type companyUpdateWithWhereUniqueWithoutUserInput = {
    where: companyWhereUniqueInput
    data: XOR<companyUpdateWithoutUserInput, companyUncheckedUpdateWithoutUserInput>
  }

  export type companyUpdateManyWithWhereWithoutUserInput = {
    where: companyScalarWhereInput
    data: XOR<companyUpdateManyMutationInput, companyUncheckedUpdateManyWithoutCompanyInput>
  }

  export type companyScalarWhereInput = {
    AND?: Enumerable<companyScalarWhereInput>
    OR?: Enumerable<companyScalarWhereInput>
    NOT?: Enumerable<companyScalarWhereInput>
    companyID?: StringFilter | string
    companyName?: StringFilter | string
    userID?: StringFilter | string
  }

  export type UserCreateWithoutLogsInput = {
    userID?: string
    email: string
    password: string
    role: role
    createdAt: Date | string
    locked?: boolean
    Products?: productCreateNestedManyWithoutUserInput
    Order?: orderCreateNestedManyWithoutUserInput
    Profile?: profileCreateNestedManyWithoutUserInput
    Request?: requestCreateNestedManyWithoutUserInput
    Notificaiton?: notificationCreateNestedManyWithoutUserInput
    Company?: companyCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutLogsInput = {
    userID?: string
    email: string
    password: string
    role: role
    createdAt: Date | string
    locked?: boolean
    Products?: productUncheckedCreateNestedManyWithoutUserInput
    Order?: orderUncheckedCreateNestedManyWithoutUserInput
    Profile?: profileUncheckedCreateNestedManyWithoutUserInput
    Request?: requestUncheckedCreateNestedManyWithoutUserInput
    Notificaiton?: notificationUncheckedCreateNestedManyWithoutUserInput
    Company?: companyUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutLogsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutLogsInput, UserUncheckedCreateWithoutLogsInput>
  }

  export type UserUpsertWithoutLogsInput = {
    update: XOR<UserUpdateWithoutLogsInput, UserUncheckedUpdateWithoutLogsInput>
    create: XOR<UserCreateWithoutLogsInput, UserUncheckedCreateWithoutLogsInput>
  }

  export type UserUpdateWithoutLogsInput = {
    userID?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumroleFieldUpdateOperationsInput | role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    locked?: BoolFieldUpdateOperationsInput | boolean
    Products?: productUpdateManyWithoutUserNestedInput
    Order?: orderUpdateManyWithoutUserNestedInput
    Profile?: profileUpdateManyWithoutUserNestedInput
    Request?: requestUpdateManyWithoutUserNestedInput
    Notificaiton?: notificationUpdateManyWithoutUserNestedInput
    Company?: companyUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutLogsInput = {
    userID?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumroleFieldUpdateOperationsInput | role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    locked?: BoolFieldUpdateOperationsInput | boolean
    Products?: productUncheckedUpdateManyWithoutUserNestedInput
    Order?: orderUncheckedUpdateManyWithoutUserNestedInput
    Profile?: profileUncheckedUpdateManyWithoutUserNestedInput
    Request?: requestUncheckedUpdateManyWithoutUserNestedInput
    Notificaiton?: notificationUncheckedUpdateManyWithoutUserNestedInput
    Company?: companyUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutCompanyInput = {
    userID?: string
    email: string
    password: string
    role: role
    createdAt: Date | string
    locked?: boolean
    Products?: productCreateNestedManyWithoutUserInput
    Order?: orderCreateNestedManyWithoutUserInput
    Profile?: profileCreateNestedManyWithoutUserInput
    Request?: requestCreateNestedManyWithoutUserInput
    Logs?: logsCreateNestedManyWithoutUserInput
    Notificaiton?: notificationCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutCompanyInput = {
    userID?: string
    email: string
    password: string
    role: role
    createdAt: Date | string
    locked?: boolean
    Products?: productUncheckedCreateNestedManyWithoutUserInput
    Order?: orderUncheckedCreateNestedManyWithoutUserInput
    Profile?: profileUncheckedCreateNestedManyWithoutUserInput
    Request?: requestUncheckedCreateNestedManyWithoutUserInput
    Logs?: logsUncheckedCreateNestedManyWithoutUserInput
    Notificaiton?: notificationUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutCompanyInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCompanyInput, UserUncheckedCreateWithoutCompanyInput>
  }

  export type productCreateWithoutCompanyInput = {
    productID?: string
    sku: string
    title: string
    price: number
    stock: number
    status?: productStatus
    createdAt: Date | string
    User: UserCreateNestedOneWithoutProductsInput
    notification?: notificationCreateNestedOneWithoutProductInput
    request?: requestCreateNestedManyWithoutProductInput
    order?: orderCreateNestedManyWithoutProductInput
  }

  export type productUncheckedCreateWithoutCompanyInput = {
    productID?: string
    sku: string
    title: string
    price: number
    stock: number
    userID: string
    status?: productStatus
    createdAt: Date | string
    notificationID?: string | null
    request?: requestUncheckedCreateNestedManyWithoutProductInput
    order?: orderUncheckedCreateNestedManyWithoutProductInput
  }

  export type productCreateOrConnectWithoutCompanyInput = {
    where: productWhereUniqueInput
    create: XOR<productCreateWithoutCompanyInput, productUncheckedCreateWithoutCompanyInput>
  }

  export type addressCreateWithoutCompanyInput = {
    addressID?: string
    city: string
    street: string
    province: string
    zipcode: string
  }

  export type addressUncheckedCreateWithoutCompanyInput = {
    addressID?: string
    city: string
    street: string
    province: string
    zipcode: string
  }

  export type addressCreateOrConnectWithoutCompanyInput = {
    where: addressWhereUniqueInput
    create: XOR<addressCreateWithoutCompanyInput, addressUncheckedCreateWithoutCompanyInput>
  }

  export type addressCreateManyCompanyInputEnvelope = {
    data: Enumerable<addressCreateManyCompanyInput>
    skipDuplicates?: boolean
  }

  export type orderCreateWithoutCompanyInput = {
    orderID?: string
    quantity: number
    total: number
    payment: string
    status: orderStatus
    discount?: number
    createdAt?: Date | string
    Product?: productCreateNestedManyWithoutOrderInput
    User: UserCreateNestedOneWithoutOrderInput
  }

  export type orderUncheckedCreateWithoutCompanyInput = {
    orderID?: string
    quantity: number
    total: number
    payment: string
    status: orderStatus
    discount?: number
    createdAt?: Date | string
    userID: string
    Product?: productUncheckedCreateNestedManyWithoutOrderInput
  }

  export type orderCreateOrConnectWithoutCompanyInput = {
    where: orderWhereUniqueInput
    create: XOR<orderCreateWithoutCompanyInput, orderUncheckedCreateWithoutCompanyInput>
  }

  export type orderCreateManyCompanyInputEnvelope = {
    data: Enumerable<orderCreateManyCompanyInput>
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutCompanyInput = {
    update: XOR<UserUpdateWithoutCompanyInput, UserUncheckedUpdateWithoutCompanyInput>
    create: XOR<UserCreateWithoutCompanyInput, UserUncheckedCreateWithoutCompanyInput>
  }

  export type UserUpdateWithoutCompanyInput = {
    userID?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumroleFieldUpdateOperationsInput | role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    locked?: BoolFieldUpdateOperationsInput | boolean
    Products?: productUpdateManyWithoutUserNestedInput
    Order?: orderUpdateManyWithoutUserNestedInput
    Profile?: profileUpdateManyWithoutUserNestedInput
    Request?: requestUpdateManyWithoutUserNestedInput
    Logs?: logsUpdateManyWithoutUserNestedInput
    Notificaiton?: notificationUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutCompanyInput = {
    userID?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumroleFieldUpdateOperationsInput | role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    locked?: BoolFieldUpdateOperationsInput | boolean
    Products?: productUncheckedUpdateManyWithoutUserNestedInput
    Order?: orderUncheckedUpdateManyWithoutUserNestedInput
    Profile?: profileUncheckedUpdateManyWithoutUserNestedInput
    Request?: requestUncheckedUpdateManyWithoutUserNestedInput
    Logs?: logsUncheckedUpdateManyWithoutUserNestedInput
    Notificaiton?: notificationUncheckedUpdateManyWithoutUserNestedInput
  }

  export type productUpsertWithWhereUniqueWithoutCompanyInput = {
    where: productWhereUniqueInput
    update: XOR<productUpdateWithoutCompanyInput, productUncheckedUpdateWithoutCompanyInput>
    create: XOR<productCreateWithoutCompanyInput, productUncheckedCreateWithoutCompanyInput>
  }

  export type productUpdateWithWhereUniqueWithoutCompanyInput = {
    where: productWhereUniqueInput
    data: XOR<productUpdateWithoutCompanyInput, productUncheckedUpdateWithoutCompanyInput>
  }

  export type productUpdateManyWithWhereWithoutCompanyInput = {
    where: productScalarWhereInput
    data: XOR<productUpdateManyMutationInput, productUncheckedUpdateManyWithoutProductInput>
  }

  export type addressUpsertWithWhereUniqueWithoutCompanyInput = {
    where: addressWhereUniqueInput
    update: XOR<addressUpdateWithoutCompanyInput, addressUncheckedUpdateWithoutCompanyInput>
    create: XOR<addressCreateWithoutCompanyInput, addressUncheckedCreateWithoutCompanyInput>
  }

  export type addressUpdateWithWhereUniqueWithoutCompanyInput = {
    where: addressWhereUniqueInput
    data: XOR<addressUpdateWithoutCompanyInput, addressUncheckedUpdateWithoutCompanyInput>
  }

  export type addressUpdateManyWithWhereWithoutCompanyInput = {
    where: addressScalarWhereInput
    data: XOR<addressUpdateManyMutationInput, addressUncheckedUpdateManyWithoutCompanyAddressInput>
  }

  export type addressScalarWhereInput = {
    AND?: Enumerable<addressScalarWhereInput>
    OR?: Enumerable<addressScalarWhereInput>
    NOT?: Enumerable<addressScalarWhereInput>
    addressID?: StringFilter | string
    city?: StringFilter | string
    street?: StringFilter | string
    province?: StringFilter | string
    zipcode?: StringFilter | string
    companyID?: StringNullableFilter | string | null
  }

  export type orderUpsertWithWhereUniqueWithoutCompanyInput = {
    where: orderWhereUniqueInput
    update: XOR<orderUpdateWithoutCompanyInput, orderUncheckedUpdateWithoutCompanyInput>
    create: XOR<orderCreateWithoutCompanyInput, orderUncheckedCreateWithoutCompanyInput>
  }

  export type orderUpdateWithWhereUniqueWithoutCompanyInput = {
    where: orderWhereUniqueInput
    data: XOR<orderUpdateWithoutCompanyInput, orderUncheckedUpdateWithoutCompanyInput>
  }

  export type orderUpdateManyWithWhereWithoutCompanyInput = {
    where: orderScalarWhereInput
    data: XOR<orderUpdateManyMutationInput, orderUncheckedUpdateManyWithoutOrderInput>
  }

  export type companyCreateWithoutCompanyAddressInput = {
    companyID?: string
    companyName: string
    User: UserCreateNestedOneWithoutCompanyInput
    Product?: productCreateNestedManyWithoutCompanyInput
    order?: orderCreateNestedManyWithoutCompanyInput
  }

  export type companyUncheckedCreateWithoutCompanyAddressInput = {
    companyID?: string
    companyName: string
    userID: string
    Product?: productUncheckedCreateNestedManyWithoutCompanyInput
    order?: orderUncheckedCreateNestedManyWithoutCompanyInput
  }

  export type companyCreateOrConnectWithoutCompanyAddressInput = {
    where: companyWhereUniqueInput
    create: XOR<companyCreateWithoutCompanyAddressInput, companyUncheckedCreateWithoutCompanyAddressInput>
  }

  export type companyUpsertWithoutCompanyAddressInput = {
    update: XOR<companyUpdateWithoutCompanyAddressInput, companyUncheckedUpdateWithoutCompanyAddressInput>
    create: XOR<companyCreateWithoutCompanyAddressInput, companyUncheckedCreateWithoutCompanyAddressInput>
  }

  export type companyUpdateWithoutCompanyAddressInput = {
    companyID?: StringFieldUpdateOperationsInput | string
    companyName?: StringFieldUpdateOperationsInput | string
    User?: UserUpdateOneRequiredWithoutCompanyNestedInput
    Product?: productUpdateManyWithoutCompanyNestedInput
    order?: orderUpdateManyWithoutCompanyNestedInput
  }

  export type companyUncheckedUpdateWithoutCompanyAddressInput = {
    companyID?: StringFieldUpdateOperationsInput | string
    companyName?: StringFieldUpdateOperationsInput | string
    userID?: StringFieldUpdateOperationsInput | string
    Product?: productUncheckedUpdateManyWithoutCompanyNestedInput
    order?: orderUncheckedUpdateManyWithoutCompanyNestedInput
  }

  export type UserCreateWithoutProfileInput = {
    userID?: string
    email: string
    password: string
    role: role
    createdAt: Date | string
    locked?: boolean
    Products?: productCreateNestedManyWithoutUserInput
    Order?: orderCreateNestedManyWithoutUserInput
    Request?: requestCreateNestedManyWithoutUserInput
    Logs?: logsCreateNestedManyWithoutUserInput
    Notificaiton?: notificationCreateNestedManyWithoutUserInput
    Company?: companyCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutProfileInput = {
    userID?: string
    email: string
    password: string
    role: role
    createdAt: Date | string
    locked?: boolean
    Products?: productUncheckedCreateNestedManyWithoutUserInput
    Order?: orderUncheckedCreateNestedManyWithoutUserInput
    Request?: requestUncheckedCreateNestedManyWithoutUserInput
    Logs?: logsUncheckedCreateNestedManyWithoutUserInput
    Notificaiton?: notificationUncheckedCreateNestedManyWithoutUserInput
    Company?: companyUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutProfileInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutProfileInput, UserUncheckedCreateWithoutProfileInput>
  }

  export type UserUpsertWithoutProfileInput = {
    update: XOR<UserUpdateWithoutProfileInput, UserUncheckedUpdateWithoutProfileInput>
    create: XOR<UserCreateWithoutProfileInput, UserUncheckedCreateWithoutProfileInput>
  }

  export type UserUpdateWithoutProfileInput = {
    userID?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumroleFieldUpdateOperationsInput | role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    locked?: BoolFieldUpdateOperationsInput | boolean
    Products?: productUpdateManyWithoutUserNestedInput
    Order?: orderUpdateManyWithoutUserNestedInput
    Request?: requestUpdateManyWithoutUserNestedInput
    Logs?: logsUpdateManyWithoutUserNestedInput
    Notificaiton?: notificationUpdateManyWithoutUserNestedInput
    Company?: companyUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutProfileInput = {
    userID?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumroleFieldUpdateOperationsInput | role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    locked?: BoolFieldUpdateOperationsInput | boolean
    Products?: productUncheckedUpdateManyWithoutUserNestedInput
    Order?: orderUncheckedUpdateManyWithoutUserNestedInput
    Request?: requestUncheckedUpdateManyWithoutUserNestedInput
    Logs?: logsUncheckedUpdateManyWithoutUserNestedInput
    Notificaiton?: notificationUncheckedUpdateManyWithoutUserNestedInput
    Company?: companyUncheckedUpdateManyWithoutUserNestedInput
  }

  export type productCreateWithoutNotificationInput = {
    productID?: string
    sku: string
    title: string
    price: number
    stock: number
    status?: productStatus
    createdAt: Date | string
    User: UserCreateNestedOneWithoutProductsInput
    Company?: companyCreateNestedManyWithoutProductInput
    request?: requestCreateNestedManyWithoutProductInput
    order?: orderCreateNestedManyWithoutProductInput
  }

  export type productUncheckedCreateWithoutNotificationInput = {
    productID?: string
    sku: string
    title: string
    price: number
    stock: number
    userID: string
    status?: productStatus
    createdAt: Date | string
    Company?: companyUncheckedCreateNestedManyWithoutProductInput
    request?: requestUncheckedCreateNestedManyWithoutProductInput
    order?: orderUncheckedCreateNestedManyWithoutProductInput
  }

  export type productCreateOrConnectWithoutNotificationInput = {
    where: productWhereUniqueInput
    create: XOR<productCreateWithoutNotificationInput, productUncheckedCreateWithoutNotificationInput>
  }

  export type productCreateManyNotificationInputEnvelope = {
    data: Enumerable<productCreateManyNotificationInput>
    skipDuplicates?: boolean
  }

  export type requestCreateWithoutNotificationInput = {
    requestID?: string
    message: string
    quantity?: number | null
    status?: requestStatus
    createdAt: Date | string
    Product?: productCreateNestedManyWithoutRequestInput
    User: UserCreateNestedOneWithoutRequestInput
  }

  export type requestUncheckedCreateWithoutNotificationInput = {
    requestID?: string
    message: string
    quantity?: number | null
    status?: requestStatus
    createdAt: Date | string
    userID: string
    Product?: productUncheckedCreateNestedManyWithoutRequestInput
  }

  export type requestCreateOrConnectWithoutNotificationInput = {
    where: requestWhereUniqueInput
    create: XOR<requestCreateWithoutNotificationInput, requestUncheckedCreateWithoutNotificationInput>
  }

  export type requestCreateManyNotificationInputEnvelope = {
    data: Enumerable<requestCreateManyNotificationInput>
    skipDuplicates?: boolean
  }

  export type UserCreateWithoutNotificaitonInput = {
    userID?: string
    email: string
    password: string
    role: role
    createdAt: Date | string
    locked?: boolean
    Products?: productCreateNestedManyWithoutUserInput
    Order?: orderCreateNestedManyWithoutUserInput
    Profile?: profileCreateNestedManyWithoutUserInput
    Request?: requestCreateNestedManyWithoutUserInput
    Logs?: logsCreateNestedManyWithoutUserInput
    Company?: companyCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutNotificaitonInput = {
    userID?: string
    email: string
    password: string
    role: role
    createdAt: Date | string
    locked?: boolean
    Products?: productUncheckedCreateNestedManyWithoutUserInput
    Order?: orderUncheckedCreateNestedManyWithoutUserInput
    Profile?: profileUncheckedCreateNestedManyWithoutUserInput
    Request?: requestUncheckedCreateNestedManyWithoutUserInput
    Logs?: logsUncheckedCreateNestedManyWithoutUserInput
    Company?: companyUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutNotificaitonInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutNotificaitonInput, UserUncheckedCreateWithoutNotificaitonInput>
  }

  export type productUpsertWithWhereUniqueWithoutNotificationInput = {
    where: productWhereUniqueInput
    update: XOR<productUpdateWithoutNotificationInput, productUncheckedUpdateWithoutNotificationInput>
    create: XOR<productCreateWithoutNotificationInput, productUncheckedCreateWithoutNotificationInput>
  }

  export type productUpdateWithWhereUniqueWithoutNotificationInput = {
    where: productWhereUniqueInput
    data: XOR<productUpdateWithoutNotificationInput, productUncheckedUpdateWithoutNotificationInput>
  }

  export type productUpdateManyWithWhereWithoutNotificationInput = {
    where: productScalarWhereInput
    data: XOR<productUpdateManyMutationInput, productUncheckedUpdateManyWithoutProductInput>
  }

  export type requestUpsertWithWhereUniqueWithoutNotificationInput = {
    where: requestWhereUniqueInput
    update: XOR<requestUpdateWithoutNotificationInput, requestUncheckedUpdateWithoutNotificationInput>
    create: XOR<requestCreateWithoutNotificationInput, requestUncheckedCreateWithoutNotificationInput>
  }

  export type requestUpdateWithWhereUniqueWithoutNotificationInput = {
    where: requestWhereUniqueInput
    data: XOR<requestUpdateWithoutNotificationInput, requestUncheckedUpdateWithoutNotificationInput>
  }

  export type requestUpdateManyWithWhereWithoutNotificationInput = {
    where: requestScalarWhereInput
    data: XOR<requestUpdateManyMutationInput, requestUncheckedUpdateManyWithoutRequestInput>
  }

  export type UserUpsertWithoutNotificaitonInput = {
    update: XOR<UserUpdateWithoutNotificaitonInput, UserUncheckedUpdateWithoutNotificaitonInput>
    create: XOR<UserCreateWithoutNotificaitonInput, UserUncheckedCreateWithoutNotificaitonInput>
  }

  export type UserUpdateWithoutNotificaitonInput = {
    userID?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumroleFieldUpdateOperationsInput | role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    locked?: BoolFieldUpdateOperationsInput | boolean
    Products?: productUpdateManyWithoutUserNestedInput
    Order?: orderUpdateManyWithoutUserNestedInput
    Profile?: profileUpdateManyWithoutUserNestedInput
    Request?: requestUpdateManyWithoutUserNestedInput
    Logs?: logsUpdateManyWithoutUserNestedInput
    Company?: companyUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutNotificaitonInput = {
    userID?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumroleFieldUpdateOperationsInput | role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    locked?: BoolFieldUpdateOperationsInput | boolean
    Products?: productUncheckedUpdateManyWithoutUserNestedInput
    Order?: orderUncheckedUpdateManyWithoutUserNestedInput
    Profile?: profileUncheckedUpdateManyWithoutUserNestedInput
    Request?: requestUncheckedUpdateManyWithoutUserNestedInput
    Logs?: logsUncheckedUpdateManyWithoutUserNestedInput
    Company?: companyUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutProductsInput = {
    userID?: string
    email: string
    password: string
    role: role
    createdAt: Date | string
    locked?: boolean
    Order?: orderCreateNestedManyWithoutUserInput
    Profile?: profileCreateNestedManyWithoutUserInput
    Request?: requestCreateNestedManyWithoutUserInput
    Logs?: logsCreateNestedManyWithoutUserInput
    Notificaiton?: notificationCreateNestedManyWithoutUserInput
    Company?: companyCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutProductsInput = {
    userID?: string
    email: string
    password: string
    role: role
    createdAt: Date | string
    locked?: boolean
    Order?: orderUncheckedCreateNestedManyWithoutUserInput
    Profile?: profileUncheckedCreateNestedManyWithoutUserInput
    Request?: requestUncheckedCreateNestedManyWithoutUserInput
    Logs?: logsUncheckedCreateNestedManyWithoutUserInput
    Notificaiton?: notificationUncheckedCreateNestedManyWithoutUserInput
    Company?: companyUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutProductsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutProductsInput, UserUncheckedCreateWithoutProductsInput>
  }

  export type companyCreateWithoutProductInput = {
    companyID?: string
    companyName: string
    User: UserCreateNestedOneWithoutCompanyInput
    companyAddress?: addressCreateNestedManyWithoutCompanyInput
    order?: orderCreateNestedManyWithoutCompanyInput
  }

  export type companyUncheckedCreateWithoutProductInput = {
    companyID?: string
    companyName: string
    userID: string
    companyAddress?: addressUncheckedCreateNestedManyWithoutCompanyInput
    order?: orderUncheckedCreateNestedManyWithoutCompanyInput
  }

  export type companyCreateOrConnectWithoutProductInput = {
    where: companyWhereUniqueInput
    create: XOR<companyCreateWithoutProductInput, companyUncheckedCreateWithoutProductInput>
  }

  export type notificationCreateWithoutProductInput = {
    notificationID?: string
    title: string
    notificationStatus?: notificationStatus
    createdAt: Date | string
    Request?: requestCreateNestedManyWithoutNotificationInput
    User?: UserCreateNestedOneWithoutNotificaitonInput
  }

  export type notificationUncheckedCreateWithoutProductInput = {
    notificationID?: string
    title: string
    notificationStatus?: notificationStatus
    createdAt: Date | string
    userID?: string | null
    Request?: requestUncheckedCreateNestedManyWithoutNotificationInput
  }

  export type notificationCreateOrConnectWithoutProductInput = {
    where: notificationWhereUniqueInput
    create: XOR<notificationCreateWithoutProductInput, notificationUncheckedCreateWithoutProductInput>
  }

  export type requestCreateWithoutProductInput = {
    requestID?: string
    message: string
    quantity?: number | null
    status?: requestStatus
    createdAt: Date | string
    User: UserCreateNestedOneWithoutRequestInput
    notification?: notificationCreateNestedOneWithoutRequestInput
  }

  export type requestUncheckedCreateWithoutProductInput = {
    requestID?: string
    message: string
    quantity?: number | null
    status?: requestStatus
    createdAt: Date | string
    userID: string
    notificationID?: string | null
  }

  export type requestCreateOrConnectWithoutProductInput = {
    where: requestWhereUniqueInput
    create: XOR<requestCreateWithoutProductInput, requestUncheckedCreateWithoutProductInput>
  }

  export type orderCreateWithoutProductInput = {
    orderID?: string
    quantity: number
    total: number
    payment: string
    status: orderStatus
    discount?: number
    createdAt?: Date | string
    Company: companyCreateNestedOneWithoutOrderInput
    User: UserCreateNestedOneWithoutOrderInput
  }

  export type orderUncheckedCreateWithoutProductInput = {
    orderID?: string
    quantity: number
    total: number
    companyID: string
    payment: string
    status: orderStatus
    discount?: number
    createdAt?: Date | string
    userID: string
  }

  export type orderCreateOrConnectWithoutProductInput = {
    where: orderWhereUniqueInput
    create: XOR<orderCreateWithoutProductInput, orderUncheckedCreateWithoutProductInput>
  }

  export type UserUpsertWithoutProductsInput = {
    update: XOR<UserUpdateWithoutProductsInput, UserUncheckedUpdateWithoutProductsInput>
    create: XOR<UserCreateWithoutProductsInput, UserUncheckedCreateWithoutProductsInput>
  }

  export type UserUpdateWithoutProductsInput = {
    userID?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumroleFieldUpdateOperationsInput | role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    locked?: BoolFieldUpdateOperationsInput | boolean
    Order?: orderUpdateManyWithoutUserNestedInput
    Profile?: profileUpdateManyWithoutUserNestedInput
    Request?: requestUpdateManyWithoutUserNestedInput
    Logs?: logsUpdateManyWithoutUserNestedInput
    Notificaiton?: notificationUpdateManyWithoutUserNestedInput
    Company?: companyUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutProductsInput = {
    userID?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumroleFieldUpdateOperationsInput | role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    locked?: BoolFieldUpdateOperationsInput | boolean
    Order?: orderUncheckedUpdateManyWithoutUserNestedInput
    Profile?: profileUncheckedUpdateManyWithoutUserNestedInput
    Request?: requestUncheckedUpdateManyWithoutUserNestedInput
    Logs?: logsUncheckedUpdateManyWithoutUserNestedInput
    Notificaiton?: notificationUncheckedUpdateManyWithoutUserNestedInput
    Company?: companyUncheckedUpdateManyWithoutUserNestedInput
  }

  export type companyUpsertWithWhereUniqueWithoutProductInput = {
    where: companyWhereUniqueInput
    update: XOR<companyUpdateWithoutProductInput, companyUncheckedUpdateWithoutProductInput>
    create: XOR<companyCreateWithoutProductInput, companyUncheckedCreateWithoutProductInput>
  }

  export type companyUpdateWithWhereUniqueWithoutProductInput = {
    where: companyWhereUniqueInput
    data: XOR<companyUpdateWithoutProductInput, companyUncheckedUpdateWithoutProductInput>
  }

  export type companyUpdateManyWithWhereWithoutProductInput = {
    where: companyScalarWhereInput
    data: XOR<companyUpdateManyMutationInput, companyUncheckedUpdateManyWithoutCompanyInput>
  }

  export type notificationUpsertWithoutProductInput = {
    update: XOR<notificationUpdateWithoutProductInput, notificationUncheckedUpdateWithoutProductInput>
    create: XOR<notificationCreateWithoutProductInput, notificationUncheckedCreateWithoutProductInput>
  }

  export type notificationUpdateWithoutProductInput = {
    notificationID?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    notificationStatus?: EnumnotificationStatusFieldUpdateOperationsInput | notificationStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Request?: requestUpdateManyWithoutNotificationNestedInput
    User?: UserUpdateOneWithoutNotificaitonNestedInput
  }

  export type notificationUncheckedUpdateWithoutProductInput = {
    notificationID?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    notificationStatus?: EnumnotificationStatusFieldUpdateOperationsInput | notificationStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userID?: NullableStringFieldUpdateOperationsInput | string | null
    Request?: requestUncheckedUpdateManyWithoutNotificationNestedInput
  }

  export type requestUpsertWithWhereUniqueWithoutProductInput = {
    where: requestWhereUniqueInput
    update: XOR<requestUpdateWithoutProductInput, requestUncheckedUpdateWithoutProductInput>
    create: XOR<requestCreateWithoutProductInput, requestUncheckedCreateWithoutProductInput>
  }

  export type requestUpdateWithWhereUniqueWithoutProductInput = {
    where: requestWhereUniqueInput
    data: XOR<requestUpdateWithoutProductInput, requestUncheckedUpdateWithoutProductInput>
  }

  export type requestUpdateManyWithWhereWithoutProductInput = {
    where: requestScalarWhereInput
    data: XOR<requestUpdateManyMutationInput, requestUncheckedUpdateManyWithoutRequestInput>
  }

  export type orderUpsertWithWhereUniqueWithoutProductInput = {
    where: orderWhereUniqueInput
    update: XOR<orderUpdateWithoutProductInput, orderUncheckedUpdateWithoutProductInput>
    create: XOR<orderCreateWithoutProductInput, orderUncheckedCreateWithoutProductInput>
  }

  export type orderUpdateWithWhereUniqueWithoutProductInput = {
    where: orderWhereUniqueInput
    data: XOR<orderUpdateWithoutProductInput, orderUncheckedUpdateWithoutProductInput>
  }

  export type orderUpdateManyWithWhereWithoutProductInput = {
    where: orderScalarWhereInput
    data: XOR<orderUpdateManyMutationInput, orderUncheckedUpdateManyWithoutOrderInput>
  }

  export type productCreateWithoutOrderInput = {
    productID?: string
    sku: string
    title: string
    price: number
    stock: number
    status?: productStatus
    createdAt: Date | string
    User: UserCreateNestedOneWithoutProductsInput
    Company?: companyCreateNestedManyWithoutProductInput
    notification?: notificationCreateNestedOneWithoutProductInput
    request?: requestCreateNestedManyWithoutProductInput
  }

  export type productUncheckedCreateWithoutOrderInput = {
    productID?: string
    sku: string
    title: string
    price: number
    stock: number
    userID: string
    status?: productStatus
    createdAt: Date | string
    notificationID?: string | null
    Company?: companyUncheckedCreateNestedManyWithoutProductInput
    request?: requestUncheckedCreateNestedManyWithoutProductInput
  }

  export type productCreateOrConnectWithoutOrderInput = {
    where: productWhereUniqueInput
    create: XOR<productCreateWithoutOrderInput, productUncheckedCreateWithoutOrderInput>
  }

  export type companyCreateWithoutOrderInput = {
    companyID?: string
    companyName: string
    User: UserCreateNestedOneWithoutCompanyInput
    Product?: productCreateNestedManyWithoutCompanyInput
    companyAddress?: addressCreateNestedManyWithoutCompanyInput
  }

  export type companyUncheckedCreateWithoutOrderInput = {
    companyID?: string
    companyName: string
    userID: string
    Product?: productUncheckedCreateNestedManyWithoutCompanyInput
    companyAddress?: addressUncheckedCreateNestedManyWithoutCompanyInput
  }

  export type companyCreateOrConnectWithoutOrderInput = {
    where: companyWhereUniqueInput
    create: XOR<companyCreateWithoutOrderInput, companyUncheckedCreateWithoutOrderInput>
  }

  export type UserCreateWithoutOrderInput = {
    userID?: string
    email: string
    password: string
    role: role
    createdAt: Date | string
    locked?: boolean
    Products?: productCreateNestedManyWithoutUserInput
    Profile?: profileCreateNestedManyWithoutUserInput
    Request?: requestCreateNestedManyWithoutUserInput
    Logs?: logsCreateNestedManyWithoutUserInput
    Notificaiton?: notificationCreateNestedManyWithoutUserInput
    Company?: companyCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutOrderInput = {
    userID?: string
    email: string
    password: string
    role: role
    createdAt: Date | string
    locked?: boolean
    Products?: productUncheckedCreateNestedManyWithoutUserInput
    Profile?: profileUncheckedCreateNestedManyWithoutUserInput
    Request?: requestUncheckedCreateNestedManyWithoutUserInput
    Logs?: logsUncheckedCreateNestedManyWithoutUserInput
    Notificaiton?: notificationUncheckedCreateNestedManyWithoutUserInput
    Company?: companyUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutOrderInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutOrderInput, UserUncheckedCreateWithoutOrderInput>
  }

  export type productUpsertWithWhereUniqueWithoutOrderInput = {
    where: productWhereUniqueInput
    update: XOR<productUpdateWithoutOrderInput, productUncheckedUpdateWithoutOrderInput>
    create: XOR<productCreateWithoutOrderInput, productUncheckedCreateWithoutOrderInput>
  }

  export type productUpdateWithWhereUniqueWithoutOrderInput = {
    where: productWhereUniqueInput
    data: XOR<productUpdateWithoutOrderInput, productUncheckedUpdateWithoutOrderInput>
  }

  export type productUpdateManyWithWhereWithoutOrderInput = {
    where: productScalarWhereInput
    data: XOR<productUpdateManyMutationInput, productUncheckedUpdateManyWithoutProductInput>
  }

  export type companyUpsertWithoutOrderInput = {
    update: XOR<companyUpdateWithoutOrderInput, companyUncheckedUpdateWithoutOrderInput>
    create: XOR<companyCreateWithoutOrderInput, companyUncheckedCreateWithoutOrderInput>
  }

  export type companyUpdateWithoutOrderInput = {
    companyID?: StringFieldUpdateOperationsInput | string
    companyName?: StringFieldUpdateOperationsInput | string
    User?: UserUpdateOneRequiredWithoutCompanyNestedInput
    Product?: productUpdateManyWithoutCompanyNestedInput
    companyAddress?: addressUpdateManyWithoutCompanyNestedInput
  }

  export type companyUncheckedUpdateWithoutOrderInput = {
    companyID?: StringFieldUpdateOperationsInput | string
    companyName?: StringFieldUpdateOperationsInput | string
    userID?: StringFieldUpdateOperationsInput | string
    Product?: productUncheckedUpdateManyWithoutCompanyNestedInput
    companyAddress?: addressUncheckedUpdateManyWithoutCompanyNestedInput
  }

  export type UserUpsertWithoutOrderInput = {
    update: XOR<UserUpdateWithoutOrderInput, UserUncheckedUpdateWithoutOrderInput>
    create: XOR<UserCreateWithoutOrderInput, UserUncheckedCreateWithoutOrderInput>
  }

  export type UserUpdateWithoutOrderInput = {
    userID?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumroleFieldUpdateOperationsInput | role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    locked?: BoolFieldUpdateOperationsInput | boolean
    Products?: productUpdateManyWithoutUserNestedInput
    Profile?: profileUpdateManyWithoutUserNestedInput
    Request?: requestUpdateManyWithoutUserNestedInput
    Logs?: logsUpdateManyWithoutUserNestedInput
    Notificaiton?: notificationUpdateManyWithoutUserNestedInput
    Company?: companyUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutOrderInput = {
    userID?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumroleFieldUpdateOperationsInput | role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    locked?: BoolFieldUpdateOperationsInput | boolean
    Products?: productUncheckedUpdateManyWithoutUserNestedInput
    Profile?: profileUncheckedUpdateManyWithoutUserNestedInput
    Request?: requestUncheckedUpdateManyWithoutUserNestedInput
    Logs?: logsUncheckedUpdateManyWithoutUserNestedInput
    Notificaiton?: notificationUncheckedUpdateManyWithoutUserNestedInput
    Company?: companyUncheckedUpdateManyWithoutUserNestedInput
  }

  export type productCreateWithoutRequestInput = {
    productID?: string
    sku: string
    title: string
    price: number
    stock: number
    status?: productStatus
    createdAt: Date | string
    User: UserCreateNestedOneWithoutProductsInput
    Company?: companyCreateNestedManyWithoutProductInput
    notification?: notificationCreateNestedOneWithoutProductInput
    order?: orderCreateNestedManyWithoutProductInput
  }

  export type productUncheckedCreateWithoutRequestInput = {
    productID?: string
    sku: string
    title: string
    price: number
    stock: number
    userID: string
    status?: productStatus
    createdAt: Date | string
    notificationID?: string | null
    Company?: companyUncheckedCreateNestedManyWithoutProductInput
    order?: orderUncheckedCreateNestedManyWithoutProductInput
  }

  export type productCreateOrConnectWithoutRequestInput = {
    where: productWhereUniqueInput
    create: XOR<productCreateWithoutRequestInput, productUncheckedCreateWithoutRequestInput>
  }

  export type UserCreateWithoutRequestInput = {
    userID?: string
    email: string
    password: string
    role: role
    createdAt: Date | string
    locked?: boolean
    Products?: productCreateNestedManyWithoutUserInput
    Order?: orderCreateNestedManyWithoutUserInput
    Profile?: profileCreateNestedManyWithoutUserInput
    Logs?: logsCreateNestedManyWithoutUserInput
    Notificaiton?: notificationCreateNestedManyWithoutUserInput
    Company?: companyCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutRequestInput = {
    userID?: string
    email: string
    password: string
    role: role
    createdAt: Date | string
    locked?: boolean
    Products?: productUncheckedCreateNestedManyWithoutUserInput
    Order?: orderUncheckedCreateNestedManyWithoutUserInput
    Profile?: profileUncheckedCreateNestedManyWithoutUserInput
    Logs?: logsUncheckedCreateNestedManyWithoutUserInput
    Notificaiton?: notificationUncheckedCreateNestedManyWithoutUserInput
    Company?: companyUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutRequestInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutRequestInput, UserUncheckedCreateWithoutRequestInput>
  }

  export type notificationCreateWithoutRequestInput = {
    notificationID?: string
    title: string
    notificationStatus?: notificationStatus
    createdAt: Date | string
    Product?: productCreateNestedManyWithoutNotificationInput
    User?: UserCreateNestedOneWithoutNotificaitonInput
  }

  export type notificationUncheckedCreateWithoutRequestInput = {
    notificationID?: string
    title: string
    notificationStatus?: notificationStatus
    createdAt: Date | string
    userID?: string | null
    Product?: productUncheckedCreateNestedManyWithoutNotificationInput
  }

  export type notificationCreateOrConnectWithoutRequestInput = {
    where: notificationWhereUniqueInput
    create: XOR<notificationCreateWithoutRequestInput, notificationUncheckedCreateWithoutRequestInput>
  }

  export type productUpsertWithWhereUniqueWithoutRequestInput = {
    where: productWhereUniqueInput
    update: XOR<productUpdateWithoutRequestInput, productUncheckedUpdateWithoutRequestInput>
    create: XOR<productCreateWithoutRequestInput, productUncheckedCreateWithoutRequestInput>
  }

  export type productUpdateWithWhereUniqueWithoutRequestInput = {
    where: productWhereUniqueInput
    data: XOR<productUpdateWithoutRequestInput, productUncheckedUpdateWithoutRequestInput>
  }

  export type productUpdateManyWithWhereWithoutRequestInput = {
    where: productScalarWhereInput
    data: XOR<productUpdateManyMutationInput, productUncheckedUpdateManyWithoutProductInput>
  }

  export type UserUpsertWithoutRequestInput = {
    update: XOR<UserUpdateWithoutRequestInput, UserUncheckedUpdateWithoutRequestInput>
    create: XOR<UserCreateWithoutRequestInput, UserUncheckedCreateWithoutRequestInput>
  }

  export type UserUpdateWithoutRequestInput = {
    userID?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumroleFieldUpdateOperationsInput | role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    locked?: BoolFieldUpdateOperationsInput | boolean
    Products?: productUpdateManyWithoutUserNestedInput
    Order?: orderUpdateManyWithoutUserNestedInput
    Profile?: profileUpdateManyWithoutUserNestedInput
    Logs?: logsUpdateManyWithoutUserNestedInput
    Notificaiton?: notificationUpdateManyWithoutUserNestedInput
    Company?: companyUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutRequestInput = {
    userID?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumroleFieldUpdateOperationsInput | role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    locked?: BoolFieldUpdateOperationsInput | boolean
    Products?: productUncheckedUpdateManyWithoutUserNestedInput
    Order?: orderUncheckedUpdateManyWithoutUserNestedInput
    Profile?: profileUncheckedUpdateManyWithoutUserNestedInput
    Logs?: logsUncheckedUpdateManyWithoutUserNestedInput
    Notificaiton?: notificationUncheckedUpdateManyWithoutUserNestedInput
    Company?: companyUncheckedUpdateManyWithoutUserNestedInput
  }

  export type notificationUpsertWithoutRequestInput = {
    update: XOR<notificationUpdateWithoutRequestInput, notificationUncheckedUpdateWithoutRequestInput>
    create: XOR<notificationCreateWithoutRequestInput, notificationUncheckedCreateWithoutRequestInput>
  }

  export type notificationUpdateWithoutRequestInput = {
    notificationID?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    notificationStatus?: EnumnotificationStatusFieldUpdateOperationsInput | notificationStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Product?: productUpdateManyWithoutNotificationNestedInput
    User?: UserUpdateOneWithoutNotificaitonNestedInput
  }

  export type notificationUncheckedUpdateWithoutRequestInput = {
    notificationID?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    notificationStatus?: EnumnotificationStatusFieldUpdateOperationsInput | notificationStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userID?: NullableStringFieldUpdateOperationsInput | string | null
    Product?: productUncheckedUpdateManyWithoutNotificationNestedInput
  }

  export type productCreateManyUserInput = {
    productID?: string
    sku: string
    title: string
    price: number
    stock: number
    status?: productStatus
    createdAt: Date | string
    notificationID?: string | null
  }

  export type orderCreateManyUserInput = {
    orderID?: string
    quantity: number
    total: number
    companyID: string
    payment: string
    status: orderStatus
    discount?: number
    createdAt?: Date | string
  }

  export type profileCreateManyUserInput = {
    profileID?: string
    firstname: string
    lastname: string
    birthday: Date | string
    phone: string
  }

  export type requestCreateManyUserInput = {
    requestID?: string
    message: string
    quantity?: number | null
    status?: requestStatus
    createdAt: Date | string
    notificationID?: string | null
  }

  export type logsCreateManyUserInput = {
    logsID?: string
    log: string
    createdAt: Date | string
  }

  export type notificationCreateManyUserInput = {
    notificationID?: string
    title: string
    notificationStatus?: notificationStatus
    createdAt: Date | string
  }

  export type companyCreateManyUserInput = {
    companyID?: string
    companyName: string
  }

  export type productUpdateWithoutUserInput = {
    productID?: StringFieldUpdateOperationsInput | string
    sku?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    stock?: IntFieldUpdateOperationsInput | number
    status?: EnumproductStatusFieldUpdateOperationsInput | productStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Company?: companyUpdateManyWithoutProductNestedInput
    notification?: notificationUpdateOneWithoutProductNestedInput
    request?: requestUpdateManyWithoutProductNestedInput
    order?: orderUpdateManyWithoutProductNestedInput
  }

  export type productUncheckedUpdateWithoutUserInput = {
    productID?: StringFieldUpdateOperationsInput | string
    sku?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    stock?: IntFieldUpdateOperationsInput | number
    status?: EnumproductStatusFieldUpdateOperationsInput | productStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notificationID?: NullableStringFieldUpdateOperationsInput | string | null
    Company?: companyUncheckedUpdateManyWithoutProductNestedInput
    request?: requestUncheckedUpdateManyWithoutProductNestedInput
    order?: orderUncheckedUpdateManyWithoutProductNestedInput
  }

  export type productUncheckedUpdateManyWithoutProductsInput = {
    productID?: StringFieldUpdateOperationsInput | string
    sku?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    stock?: IntFieldUpdateOperationsInput | number
    status?: EnumproductStatusFieldUpdateOperationsInput | productStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notificationID?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type orderUpdateWithoutUserInput = {
    orderID?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    payment?: StringFieldUpdateOperationsInput | string
    status?: EnumorderStatusFieldUpdateOperationsInput | orderStatus
    discount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Product?: productUpdateManyWithoutOrderNestedInput
    Company?: companyUpdateOneRequiredWithoutOrderNestedInput
  }

  export type orderUncheckedUpdateWithoutUserInput = {
    orderID?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    companyID?: StringFieldUpdateOperationsInput | string
    payment?: StringFieldUpdateOperationsInput | string
    status?: EnumorderStatusFieldUpdateOperationsInput | orderStatus
    discount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Product?: productUncheckedUpdateManyWithoutOrderNestedInput
  }

  export type orderUncheckedUpdateManyWithoutOrderInput = {
    orderID?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    companyID?: StringFieldUpdateOperationsInput | string
    payment?: StringFieldUpdateOperationsInput | string
    status?: EnumorderStatusFieldUpdateOperationsInput | orderStatus
    discount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type profileUpdateWithoutUserInput = {
    profileID?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    birthday?: DateTimeFieldUpdateOperationsInput | Date | string
    phone?: StringFieldUpdateOperationsInput | string
  }

  export type profileUncheckedUpdateWithoutUserInput = {
    profileID?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    birthday?: DateTimeFieldUpdateOperationsInput | Date | string
    phone?: StringFieldUpdateOperationsInput | string
  }

  export type profileUncheckedUpdateManyWithoutProfileInput = {
    profileID?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    birthday?: DateTimeFieldUpdateOperationsInput | Date | string
    phone?: StringFieldUpdateOperationsInput | string
  }

  export type requestUpdateWithoutUserInput = {
    requestID?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumrequestStatusFieldUpdateOperationsInput | requestStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Product?: productUpdateManyWithoutRequestNestedInput
    notification?: notificationUpdateOneWithoutRequestNestedInput
  }

  export type requestUncheckedUpdateWithoutUserInput = {
    requestID?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumrequestStatusFieldUpdateOperationsInput | requestStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notificationID?: NullableStringFieldUpdateOperationsInput | string | null
    Product?: productUncheckedUpdateManyWithoutRequestNestedInput
  }

  export type requestUncheckedUpdateManyWithoutRequestInput = {
    requestID?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumrequestStatusFieldUpdateOperationsInput | requestStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notificationID?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type logsUpdateWithoutUserInput = {
    logsID?: StringFieldUpdateOperationsInput | string
    log?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type logsUncheckedUpdateWithoutUserInput = {
    logsID?: StringFieldUpdateOperationsInput | string
    log?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type logsUncheckedUpdateManyWithoutLogsInput = {
    logsID?: StringFieldUpdateOperationsInput | string
    log?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type notificationUpdateWithoutUserInput = {
    notificationID?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    notificationStatus?: EnumnotificationStatusFieldUpdateOperationsInput | notificationStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Product?: productUpdateManyWithoutNotificationNestedInput
    Request?: requestUpdateManyWithoutNotificationNestedInput
  }

  export type notificationUncheckedUpdateWithoutUserInput = {
    notificationID?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    notificationStatus?: EnumnotificationStatusFieldUpdateOperationsInput | notificationStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Product?: productUncheckedUpdateManyWithoutNotificationNestedInput
    Request?: requestUncheckedUpdateManyWithoutNotificationNestedInput
  }

  export type notificationUncheckedUpdateManyWithoutNotificaitonInput = {
    notificationID?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    notificationStatus?: EnumnotificationStatusFieldUpdateOperationsInput | notificationStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type companyUpdateWithoutUserInput = {
    companyID?: StringFieldUpdateOperationsInput | string
    companyName?: StringFieldUpdateOperationsInput | string
    Product?: productUpdateManyWithoutCompanyNestedInput
    companyAddress?: addressUpdateManyWithoutCompanyNestedInput
    order?: orderUpdateManyWithoutCompanyNestedInput
  }

  export type companyUncheckedUpdateWithoutUserInput = {
    companyID?: StringFieldUpdateOperationsInput | string
    companyName?: StringFieldUpdateOperationsInput | string
    Product?: productUncheckedUpdateManyWithoutCompanyNestedInput
    companyAddress?: addressUncheckedUpdateManyWithoutCompanyNestedInput
    order?: orderUncheckedUpdateManyWithoutCompanyNestedInput
  }

  export type companyUncheckedUpdateManyWithoutCompanyInput = {
    companyID?: StringFieldUpdateOperationsInput | string
    companyName?: StringFieldUpdateOperationsInput | string
  }

  export type addressCreateManyCompanyInput = {
    addressID?: string
    city: string
    street: string
    province: string
    zipcode: string
  }

  export type orderCreateManyCompanyInput = {
    orderID?: string
    quantity: number
    total: number
    payment: string
    status: orderStatus
    discount?: number
    createdAt?: Date | string
    userID: string
  }

  export type productUpdateWithoutCompanyInput = {
    productID?: StringFieldUpdateOperationsInput | string
    sku?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    stock?: IntFieldUpdateOperationsInput | number
    status?: EnumproductStatusFieldUpdateOperationsInput | productStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    User?: UserUpdateOneRequiredWithoutProductsNestedInput
    notification?: notificationUpdateOneWithoutProductNestedInput
    request?: requestUpdateManyWithoutProductNestedInput
    order?: orderUpdateManyWithoutProductNestedInput
  }

  export type productUncheckedUpdateWithoutCompanyInput = {
    productID?: StringFieldUpdateOperationsInput | string
    sku?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    stock?: IntFieldUpdateOperationsInput | number
    userID?: StringFieldUpdateOperationsInput | string
    status?: EnumproductStatusFieldUpdateOperationsInput | productStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notificationID?: NullableStringFieldUpdateOperationsInput | string | null
    request?: requestUncheckedUpdateManyWithoutProductNestedInput
    order?: orderUncheckedUpdateManyWithoutProductNestedInput
  }

  export type productUncheckedUpdateManyWithoutProductInput = {
    productID?: StringFieldUpdateOperationsInput | string
    sku?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    stock?: IntFieldUpdateOperationsInput | number
    userID?: StringFieldUpdateOperationsInput | string
    status?: EnumproductStatusFieldUpdateOperationsInput | productStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notificationID?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type addressUpdateWithoutCompanyInput = {
    addressID?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    street?: StringFieldUpdateOperationsInput | string
    province?: StringFieldUpdateOperationsInput | string
    zipcode?: StringFieldUpdateOperationsInput | string
  }

  export type addressUncheckedUpdateWithoutCompanyInput = {
    addressID?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    street?: StringFieldUpdateOperationsInput | string
    province?: StringFieldUpdateOperationsInput | string
    zipcode?: StringFieldUpdateOperationsInput | string
  }

  export type addressUncheckedUpdateManyWithoutCompanyAddressInput = {
    addressID?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    street?: StringFieldUpdateOperationsInput | string
    province?: StringFieldUpdateOperationsInput | string
    zipcode?: StringFieldUpdateOperationsInput | string
  }

  export type orderUpdateWithoutCompanyInput = {
    orderID?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    payment?: StringFieldUpdateOperationsInput | string
    status?: EnumorderStatusFieldUpdateOperationsInput | orderStatus
    discount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Product?: productUpdateManyWithoutOrderNestedInput
    User?: UserUpdateOneRequiredWithoutOrderNestedInput
  }

  export type orderUncheckedUpdateWithoutCompanyInput = {
    orderID?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    payment?: StringFieldUpdateOperationsInput | string
    status?: EnumorderStatusFieldUpdateOperationsInput | orderStatus
    discount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userID?: StringFieldUpdateOperationsInput | string
    Product?: productUncheckedUpdateManyWithoutOrderNestedInput
  }

  export type productCreateManyNotificationInput = {
    productID?: string
    sku: string
    title: string
    price: number
    stock: number
    userID: string
    status?: productStatus
    createdAt: Date | string
  }

  export type requestCreateManyNotificationInput = {
    requestID?: string
    message: string
    quantity?: number | null
    status?: requestStatus
    createdAt: Date | string
    userID: string
  }

  export type productUpdateWithoutNotificationInput = {
    productID?: StringFieldUpdateOperationsInput | string
    sku?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    stock?: IntFieldUpdateOperationsInput | number
    status?: EnumproductStatusFieldUpdateOperationsInput | productStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    User?: UserUpdateOneRequiredWithoutProductsNestedInput
    Company?: companyUpdateManyWithoutProductNestedInput
    request?: requestUpdateManyWithoutProductNestedInput
    order?: orderUpdateManyWithoutProductNestedInput
  }

  export type productUncheckedUpdateWithoutNotificationInput = {
    productID?: StringFieldUpdateOperationsInput | string
    sku?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    stock?: IntFieldUpdateOperationsInput | number
    userID?: StringFieldUpdateOperationsInput | string
    status?: EnumproductStatusFieldUpdateOperationsInput | productStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Company?: companyUncheckedUpdateManyWithoutProductNestedInput
    request?: requestUncheckedUpdateManyWithoutProductNestedInput
    order?: orderUncheckedUpdateManyWithoutProductNestedInput
  }

  export type requestUpdateWithoutNotificationInput = {
    requestID?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumrequestStatusFieldUpdateOperationsInput | requestStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Product?: productUpdateManyWithoutRequestNestedInput
    User?: UserUpdateOneRequiredWithoutRequestNestedInput
  }

  export type requestUncheckedUpdateWithoutNotificationInput = {
    requestID?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumrequestStatusFieldUpdateOperationsInput | requestStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userID?: StringFieldUpdateOperationsInput | string
    Product?: productUncheckedUpdateManyWithoutRequestNestedInput
  }

  export type companyUpdateWithoutProductInput = {
    companyID?: StringFieldUpdateOperationsInput | string
    companyName?: StringFieldUpdateOperationsInput | string
    User?: UserUpdateOneRequiredWithoutCompanyNestedInput
    companyAddress?: addressUpdateManyWithoutCompanyNestedInput
    order?: orderUpdateManyWithoutCompanyNestedInput
  }

  export type companyUncheckedUpdateWithoutProductInput = {
    companyID?: StringFieldUpdateOperationsInput | string
    companyName?: StringFieldUpdateOperationsInput | string
    userID?: StringFieldUpdateOperationsInput | string
    companyAddress?: addressUncheckedUpdateManyWithoutCompanyNestedInput
    order?: orderUncheckedUpdateManyWithoutCompanyNestedInput
  }

  export type requestUpdateWithoutProductInput = {
    requestID?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumrequestStatusFieldUpdateOperationsInput | requestStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    User?: UserUpdateOneRequiredWithoutRequestNestedInput
    notification?: notificationUpdateOneWithoutRequestNestedInput
  }

  export type requestUncheckedUpdateWithoutProductInput = {
    requestID?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumrequestStatusFieldUpdateOperationsInput | requestStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userID?: StringFieldUpdateOperationsInput | string
    notificationID?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type orderUpdateWithoutProductInput = {
    orderID?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    payment?: StringFieldUpdateOperationsInput | string
    status?: EnumorderStatusFieldUpdateOperationsInput | orderStatus
    discount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Company?: companyUpdateOneRequiredWithoutOrderNestedInput
    User?: UserUpdateOneRequiredWithoutOrderNestedInput
  }

  export type orderUncheckedUpdateWithoutProductInput = {
    orderID?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    companyID?: StringFieldUpdateOperationsInput | string
    payment?: StringFieldUpdateOperationsInput | string
    status?: EnumorderStatusFieldUpdateOperationsInput | orderStatus
    discount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userID?: StringFieldUpdateOperationsInput | string
  }

  export type productUpdateWithoutOrderInput = {
    productID?: StringFieldUpdateOperationsInput | string
    sku?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    stock?: IntFieldUpdateOperationsInput | number
    status?: EnumproductStatusFieldUpdateOperationsInput | productStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    User?: UserUpdateOneRequiredWithoutProductsNestedInput
    Company?: companyUpdateManyWithoutProductNestedInput
    notification?: notificationUpdateOneWithoutProductNestedInput
    request?: requestUpdateManyWithoutProductNestedInput
  }

  export type productUncheckedUpdateWithoutOrderInput = {
    productID?: StringFieldUpdateOperationsInput | string
    sku?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    stock?: IntFieldUpdateOperationsInput | number
    userID?: StringFieldUpdateOperationsInput | string
    status?: EnumproductStatusFieldUpdateOperationsInput | productStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notificationID?: NullableStringFieldUpdateOperationsInput | string | null
    Company?: companyUncheckedUpdateManyWithoutProductNestedInput
    request?: requestUncheckedUpdateManyWithoutProductNestedInput
  }

  export type productUpdateWithoutRequestInput = {
    productID?: StringFieldUpdateOperationsInput | string
    sku?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    stock?: IntFieldUpdateOperationsInput | number
    status?: EnumproductStatusFieldUpdateOperationsInput | productStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    User?: UserUpdateOneRequiredWithoutProductsNestedInput
    Company?: companyUpdateManyWithoutProductNestedInput
    notification?: notificationUpdateOneWithoutProductNestedInput
    order?: orderUpdateManyWithoutProductNestedInput
  }

  export type productUncheckedUpdateWithoutRequestInput = {
    productID?: StringFieldUpdateOperationsInput | string
    sku?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    stock?: IntFieldUpdateOperationsInput | number
    userID?: StringFieldUpdateOperationsInput | string
    status?: EnumproductStatusFieldUpdateOperationsInput | productStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notificationID?: NullableStringFieldUpdateOperationsInput | string | null
    Company?: companyUncheckedUpdateManyWithoutProductNestedInput
    order?: orderUncheckedUpdateManyWithoutProductNestedInput
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}