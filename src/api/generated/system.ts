/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { FieldAuthorizeResolver } from "nexus/dist/plugins/fieldAuthorizePlugin"
import type { core } from "nexus"
declare global {
  interface NexusGenCustomInputMethods<TypeName extends string> {
    /**
     * A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    date<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "Date";
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    datetime<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "DateTime";
    /**
     * A field whose value conforms to the standard internet email address format as specified in RFC822: https://www.w3.org/Protocols/rfc822/.
     */
    email<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "EmailAddress";
    /**
     * A field whose value conforms to the standard E.164 format as specified in: https://en.wikipedia.org/wiki/E.164. Basically this is +17895551234.
     */
    phone<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "PhoneNumber";
  }
}
declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    /**
     * A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    date<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "Date";
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    datetime<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "DateTime";
    /**
     * A field whose value conforms to the standard internet email address format as specified in RFC822: https://www.w3.org/Protocols/rfc822/.
     */
    email<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "EmailAddress";
    /**
     * A field whose value conforms to the standard E.164 format as specified in: https://en.wikipedia.org/wiki/E.164. Basically this is +17895551234.
     */
    phone<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "PhoneNumber";
  }
}


declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  addressInput: { // input type
    city?: string | null; // String
    province?: string | null; // String
    street?: string | null; // String
    zipcode?: string | null; // String
  }
  orderInput: { // input type
    discount?: number | null; // Int
    payment?: string | null; // String
    productID?: string | null; // ID
    quantity?: number | null; // Int
    userID?: string | null; // ID
  }
  productInput: { // input type
    price?: number | null; // Int
    stock?: number | null; // Int
    title?: string | null; // String
  }
  profileInput: { // input type
    birthday: NexusGenScalars['Date']; // Date!
    firstname: string; // String!
    lastname: string; // String!
    phone: NexusGenScalars['PhoneNumber']; // PhoneNumber!
  }
  userInput: { // input type
    email: NexusGenScalars['EmailAddress']; // EmailAddress!
  }
}

export interface NexusGenEnums {
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  Date: any
  DateTime: any
  EmailAddress: any
  PhoneNumber: any
}

export interface NexusGenObjects {
  Mutation: {};
  Query: {};
  Subscription: {};
  address: { // root type
    addressID?: string | null; // ID
    city?: string | null; // String
    province?: string | null; // String
    street?: string | null; // String
    zipcode?: string | null; // String
  }
  company: { // root type
    companyID?: string | null; // ID
    companyName?: string | null; // String
  }
  logs: { // root type
    createdAt?: NexusGenScalars['DateTime'] | null; // DateTime
    log?: string | null; // String
    logsID?: string | null; // ID
  }
  notification: { // root type
    createdAt?: NexusGenScalars['DateTime'] | null; // DateTime
    notificationID?: string | null; // ID
    notificationStatus?: string | null; // String
    title?: string | null; // String
  }
  order: { // root type
    createdAt?: NexusGenScalars['DateTime'] | null; // DateTime
    discount?: number | null; // Int
    orderID?: string | null; // ID
    payment?: string | null; // String
    quantity?: number | null; // Int
    status?: string | null; // String
    total?: number | null; // Float
  }
  orderPerMonth: { // root type
    date?: NexusGenScalars['Date'] | null; // Date
    total?: number | null; // Int
  }
  ordergraph: { // root type
    createdAt?: NexusGenScalars['Date'] | null; // Date
    orderID?: string | null; // ID
    payment?: string | null; // String
    quantity?: number | null; // Int
    status?: string | null; // String
    total?: number | null; // Float
  }
  otp: { // root type
    createdAt?: NexusGenScalars['DateTime'] | null; // DateTime
    expiredAt?: NexusGenScalars['DateTime'] | null; // DateTime
    otID?: string | null; // ID
    otp?: string | null; // String
  }
  productCount: { // root type
    count?: number | null; // Int
    title?: string | null; // String
  }
  products: { // root type
    createdAt?: NexusGenScalars['Date'] | null; // Date
    price?: number | null; // Int
    productID?: string | null; // ID
    sku?: string | null; // String
    status?: string | null; // String
    stock?: number | null; // Int
    title?: string | null; // String
  }
  profile: { // root type
    birthday?: NexusGenScalars['Date'] | null; // Date
    firstname?: string | null; // String
    lastname?: string | null; // String
    phone?: NexusGenScalars['PhoneNumber'] | null; // PhoneNumber
    profileID?: string | null; // ID
  }
  request: { // root type
    createdAt?: NexusGenScalars['Date'] | null; // Date
    message?: string | null; // String
    requestID?: string | null; // ID
    status?: string | null; // String
  }
  token: { // root type
    token?: string | null; // String
  }
  user: { // root type
    createdAt?: NexusGenScalars['Date'] | null; // Date
    email?: NexusGenScalars['EmailAddress'] | null; // EmailAddress
    locked?: boolean | null; // Boolean
    password?: string | null; // String
    role?: string | null; // String
    userID?: string | null; // ID
  }
  userCount: { // root type
    count?: number | null; // Int
    createdAt?: NexusGenScalars['Date'] | null; // Date
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars

export interface NexusGenFieldTypes {
  Mutation: { // field return type
    createCompanyDetails: NexusGenRootTypes['company'] | null; // company
    createLogoutLog: NexusGenRootTypes['logs'] | null; // logs
    createOTP: NexusGenRootTypes['otp'] | null; // otp
    createOrder: Array<NexusGenRootTypes['order'] | null> | null; // [order]
    createProduct: NexusGenRootTypes['products'] | null; // products
    createProductRequest: NexusGenRootTypes['request'] | null; // request
    createUserAccount: NexusGenRootTypes['user'] | null; // user
    createUserAdmin: NexusGenRootTypes['user'] | null; // user
    deleteProduct: NexusGenRootTypes['products'] | null; // products
    deleteProductRequest: NexusGenRootTypes['request'] | null; // request
    deleteUserAccount: NexusGenRootTypes['user'] | null; // user
    getAllSales: Array<NexusGenRootTypes['order'] | null> | null; // [order]
    getRefunded: Array<NexusGenRootTypes['order'] | null> | null; // [order]
    getTotalSales: Array<NexusGenRootTypes['order'] | null> | null; // [order]
    login: NexusGenRootTypes['token'] | null; // token
    pulloutRequest: NexusGenRootTypes['request'] | null; // request
    requestProduct: NexusGenRootTypes['request'] | null; // request
    restockrequest: NexusGenRootTypes['request'] | null; // request
    updateCompanyAddress: NexusGenRootTypes['address'] | null; // address
    updateMyPassword: NexusGenRootTypes['user'] | null; // user
    updateNotificationID: NexusGenRootTypes['notification'] | null; // notification
    updateOrderStatus: NexusGenRootTypes['order'] | null; // order
    updateProduct: NexusGenRootTypes['products'] | null; // products
    updateRequest: NexusGenRootTypes['request'] | null; // request
    updateUserPassword: NexusGenRootTypes['user'] | null; // user
    updateUserProfile: NexusGenRootTypes['user'] | null; // user
    userlockedAccount: NexusGenRootTypes['user'] | null; // user
    verifyOTP: NexusGenRootTypes['otp'] | null; // otp
  }
  Query: { // field return type
    getAllActiveUser: Array<NexusGenRootTypes['user'] | null> | null; // [user]
    getAllAdmin: Array<NexusGenRootTypes['user'] | null> | null; // [user]
    getAllCompanyUser: Array<NexusGenRootTypes['company'] | null> | null; // [company]
    getAllMyRequest: Array<NexusGenRootTypes['request'] | null> | null; // [request]
    getAllOTP: Array<NexusGenRootTypes['otp'] | null> | null; // [otp]
    getAllOrders: Array<NexusGenRootTypes['order'] | null> | null; // [order]
    getAllProducts: Array<NexusGenRootTypes['products'] | null> | null; // [products]
    getAllTotalByMonth: Array<NexusGenRootTypes['orderPerMonth'] | null> | null; // [orderPerMonth]
    getAllTotalOrder: Array<NexusGenRootTypes['order'] | null> | null; // [order]
    getAllTransactionByCompany: Array<NexusGenRootTypes['order'] | null> | null; // [order]
    getAllUserByGroup: Array<NexusGenRootTypes['userCount'] | null> | null; // [userCount]
    getAllUsers: Array<NexusGenRootTypes['user'] | null> | null; // [user]
    getCompanyDetails: Array<NexusGenRootTypes['company'] | null> | null; // [company]
    getCompanyID: Array<NexusGenRootTypes['company'] | null> | null; // [company]
    getCompanyProducts: Array<NexusGenRootTypes['products'] | null> | null; // [products]
    getCurrentOrderHistory: Array<NexusGenRootTypes['order'] | null> | null; // [order]
    getLimitedTransaction: Array<NexusGenRootTypes['order'] | null> | null; // [order]
    getNotificationID: Array<NexusGenRootTypes['notification'] | null> | null; // [notification]
    getOrderID: Array<NexusGenRootTypes['order'] | null> | null; // [order]
    getProductByGroup: Array<NexusGenRootTypes['productCount'] | null> | null; // [productCount]
    getProductByVendor: Array<NexusGenRootTypes['products'] | null> | null; // [products]
    getProductID: Array<NexusGenRootTypes['products'] | null> | null; // [products]
    getProductTotal: Array<NexusGenRootTypes['order'] | null> | null; // [order]
    getProductsByUser: Array<NexusGenRootTypes['products'] | null> | null; // [products]
    getProfileById: Array<NexusGenRootTypes['profile'] | null> | null; // [profile]
    getSearchCompany: Array<NexusGenRootTypes['company'] | null> | null; // [company]
    getSearchProduct: Array<NexusGenRootTypes['products'] | null> | null; // [products]
    getSearchSKU: Array<NexusGenRootTypes['products'] | null> | null; // [products]
    getTotalRevenue: Array<NexusGenRootTypes['order'] | null> | null; // [order]
    getTotalVendorTransaction: Array<NexusGenRootTypes['order'] | null> | null; // [order]
    getUnreadNotification: Array<NexusGenRootTypes['notification'] | null> | null; // [notification]
    getUserID: Array<NexusGenRootTypes['user'] | null> | null; // [user]
    getUserLog: Array<NexusGenRootTypes['logs'] | null> | null; // [logs]
    getUserNotification: Array<NexusGenRootTypes['user'] | null> | null; // [user]
    groupOrdersByDate: Array<NexusGenRootTypes['order'] | null> | null; // [order]
    notificationQuery: Array<NexusGenRootTypes['notification'] | null> | null; // [notification]
    searchUserByName: Array<NexusGenRootTypes['user'] | null> | null; // [user]
  }
  Subscription: { // field return type
    UserSubscriptions: NexusGenRootTypes['user'] | null; // user
    createProductSub: NexusGenRootTypes['products'] | null; // products
    notificationSubscriptions: NexusGenRootTypes['notification'] | null; // notification
    userOrderSubscription: NexusGenRootTypes['order'] | null; // order
  }
  address: { // field return type
    addressID: string | null; // ID
    city: string | null; // String
    province: string | null; // String
    street: string | null; // String
    zipcode: string | null; // String
  }
  company: { // field return type
    companyAddress: Array<NexusGenRootTypes['address'] | null> | null; // [address]
    companyID: string | null; // ID
    companyName: string | null; // String
    orders: Array<NexusGenRootTypes['order'] | null> | null; // [order]
    product: Array<NexusGenRootTypes['products'] | null> | null; // [products]
    user: Array<NexusGenRootTypes['user'] | null> | null; // [user]
  }
  logs: { // field return type
    createdAt: NexusGenScalars['DateTime'] | null; // DateTime
    log: string | null; // String
    logsID: string | null; // ID
    user: Array<NexusGenRootTypes['user'] | null> | null; // [user]
  }
  notification: { // field return type
    createdAt: NexusGenScalars['DateTime'] | null; // DateTime
    notificationID: string | null; // ID
    notificationStatus: string | null; // String
    product: Array<NexusGenRootTypes['products'] | null> | null; // [products]
    request: Array<NexusGenRootTypes['request'] | null> | null; // [request]
    title: string | null; // String
    user: Array<NexusGenRootTypes['user'] | null> | null; // [user]
  }
  order: { // field return type
    createdAt: NexusGenScalars['DateTime'] | null; // DateTime
    discount: number | null; // Int
    orderID: string | null; // ID
    orderedProduct: Array<NexusGenRootTypes['products'] | null> | null; // [products]
    orderedUser: Array<NexusGenRootTypes['user'] | null> | null; // [user]
    payment: string | null; // String
    quantity: number | null; // Int
    status: string | null; // String
    total: number | null; // Float
  }
  orderPerMonth: { // field return type
    date: NexusGenScalars['Date'] | null; // Date
    total: number | null; // Int
  }
  ordergraph: { // field return type
    createdAt: NexusGenScalars['Date'] | null; // Date
    orderID: string | null; // ID
    orderedProduct: Array<NexusGenRootTypes['products'] | null> | null; // [products]
    payment: string | null; // String
    quantity: number | null; // Int
    status: string | null; // String
    total: number | null; // Float
  }
  otp: { // field return type
    createdAt: NexusGenScalars['DateTime'] | null; // DateTime
    expiredAt: NexusGenScalars['DateTime'] | null; // DateTime
    otID: string | null; // ID
    otp: string | null; // String
  }
  productCount: { // field return type
    count: number | null; // Int
    title: string | null; // String
  }
  products: { // field return type
    company: Array<NexusGenRootTypes['company'] | null> | null; // [company]
    createdAt: NexusGenScalars['Date'] | null; // Date
    orders: Array<NexusGenRootTypes['order'] | null> | null; // [order]
    price: number | null; // Int
    productID: string | null; // ID
    sku: string | null; // String
    status: string | null; // String
    stock: number | null; // Int
    title: string | null; // String
    user: Array<NexusGenRootTypes['user'] | null> | null; // [user]
  }
  profile: { // field return type
    birthday: NexusGenScalars['Date'] | null; // Date
    firstname: string | null; // String
    lastname: string | null; // String
    phone: NexusGenScalars['PhoneNumber'] | null; // PhoneNumber
    profileID: string | null; // ID
  }
  request: { // field return type
    createdAt: NexusGenScalars['Date'] | null; // Date
    message: string | null; // String
    productRequest: Array<NexusGenRootTypes['products'] | null> | null; // [products]
    requestID: string | null; // ID
    status: string | null; // String
    user: Array<NexusGenRootTypes['user'] | null> | null; // [user]
  }
  token: { // field return type
    token: string | null; // String
  }
  user: { // field return type
    company: Array<NexusGenRootTypes['company'] | null> | null; // [company]
    createdAt: NexusGenScalars['Date'] | null; // Date
    email: NexusGenScalars['EmailAddress'] | null; // EmailAddress
    locked: boolean | null; // Boolean
    notification: Array<NexusGenRootTypes['notification'] | null> | null; // [notification]
    password: string | null; // String
    products: Array<NexusGenRootTypes['products'] | null> | null; // [products]
    profile: Array<NexusGenRootTypes['profile'] | null> | null; // [profile]
    role: string | null; // String
    userID: string | null; // ID
  }
  userCount: { // field return type
    count: number | null; // Int
    createdAt: NexusGenScalars['Date'] | null; // Date
  }
}

export interface NexusGenFieldTypeNames {
  Mutation: { // field return type name
    createCompanyDetails: 'company'
    createLogoutLog: 'logs'
    createOTP: 'otp'
    createOrder: 'order'
    createProduct: 'products'
    createProductRequest: 'request'
    createUserAccount: 'user'
    createUserAdmin: 'user'
    deleteProduct: 'products'
    deleteProductRequest: 'request'
    deleteUserAccount: 'user'
    getAllSales: 'order'
    getRefunded: 'order'
    getTotalSales: 'order'
    login: 'token'
    pulloutRequest: 'request'
    requestProduct: 'request'
    restockrequest: 'request'
    updateCompanyAddress: 'address'
    updateMyPassword: 'user'
    updateNotificationID: 'notification'
    updateOrderStatus: 'order'
    updateProduct: 'products'
    updateRequest: 'request'
    updateUserPassword: 'user'
    updateUserProfile: 'user'
    userlockedAccount: 'user'
    verifyOTP: 'otp'
  }
  Query: { // field return type name
    getAllActiveUser: 'user'
    getAllAdmin: 'user'
    getAllCompanyUser: 'company'
    getAllMyRequest: 'request'
    getAllOTP: 'otp'
    getAllOrders: 'order'
    getAllProducts: 'products'
    getAllTotalByMonth: 'orderPerMonth'
    getAllTotalOrder: 'order'
    getAllTransactionByCompany: 'order'
    getAllUserByGroup: 'userCount'
    getAllUsers: 'user'
    getCompanyDetails: 'company'
    getCompanyID: 'company'
    getCompanyProducts: 'products'
    getCurrentOrderHistory: 'order'
    getLimitedTransaction: 'order'
    getNotificationID: 'notification'
    getOrderID: 'order'
    getProductByGroup: 'productCount'
    getProductByVendor: 'products'
    getProductID: 'products'
    getProductTotal: 'order'
    getProductsByUser: 'products'
    getProfileById: 'profile'
    getSearchCompany: 'company'
    getSearchProduct: 'products'
    getSearchSKU: 'products'
    getTotalRevenue: 'order'
    getTotalVendorTransaction: 'order'
    getUnreadNotification: 'notification'
    getUserID: 'user'
    getUserLog: 'logs'
    getUserNotification: 'user'
    groupOrdersByDate: 'order'
    notificationQuery: 'notification'
    searchUserByName: 'user'
  }
  Subscription: { // field return type name
    UserSubscriptions: 'user'
    createProductSub: 'products'
    notificationSubscriptions: 'notification'
    userOrderSubscription: 'order'
  }
  address: { // field return type name
    addressID: 'ID'
    city: 'String'
    province: 'String'
    street: 'String'
    zipcode: 'String'
  }
  company: { // field return type name
    companyAddress: 'address'
    companyID: 'ID'
    companyName: 'String'
    orders: 'order'
    product: 'products'
    user: 'user'
  }
  logs: { // field return type name
    createdAt: 'DateTime'
    log: 'String'
    logsID: 'ID'
    user: 'user'
  }
  notification: { // field return type name
    createdAt: 'DateTime'
    notificationID: 'ID'
    notificationStatus: 'String'
    product: 'products'
    request: 'request'
    title: 'String'
    user: 'user'
  }
  order: { // field return type name
    createdAt: 'DateTime'
    discount: 'Int'
    orderID: 'ID'
    orderedProduct: 'products'
    orderedUser: 'user'
    payment: 'String'
    quantity: 'Int'
    status: 'String'
    total: 'Float'
  }
  orderPerMonth: { // field return type name
    date: 'Date'
    total: 'Int'
  }
  ordergraph: { // field return type name
    createdAt: 'Date'
    orderID: 'ID'
    orderedProduct: 'products'
    payment: 'String'
    quantity: 'Int'
    status: 'String'
    total: 'Float'
  }
  otp: { // field return type name
    createdAt: 'DateTime'
    expiredAt: 'DateTime'
    otID: 'ID'
    otp: 'String'
  }
  productCount: { // field return type name
    count: 'Int'
    title: 'String'
  }
  products: { // field return type name
    company: 'company'
    createdAt: 'Date'
    orders: 'order'
    price: 'Int'
    productID: 'ID'
    sku: 'String'
    status: 'String'
    stock: 'Int'
    title: 'String'
    user: 'user'
  }
  profile: { // field return type name
    birthday: 'Date'
    firstname: 'String'
    lastname: 'String'
    phone: 'PhoneNumber'
    profileID: 'ID'
  }
  request: { // field return type name
    createdAt: 'Date'
    message: 'String'
    productRequest: 'products'
    requestID: 'ID'
    status: 'String'
    user: 'user'
  }
  token: { // field return type name
    token: 'String'
  }
  user: { // field return type name
    company: 'company'
    createdAt: 'Date'
    email: 'EmailAddress'
    locked: 'Boolean'
    notification: 'notification'
    password: 'String'
    products: 'products'
    profile: 'profile'
    role: 'String'
    userID: 'ID'
  }
  userCount: { // field return type name
    count: 'Int'
    createdAt: 'Date'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    createCompanyDetails: { // args
      address?: NexusGenInputs['addressInput'] | null; // addressInput
      companyID: string; // ID!
    }
    createLogoutLog: { // args
      userID: string; // ID!
    }
    createOTP: { // args
      email: NexusGenScalars['EmailAddress']; // EmailAddress!
    }
    createOrder: { // args
      orderses?: Array<NexusGenInputs['orderInput'] | null> | null; // [orderInput]
    }
    createProduct: { // args
      proudct: NexusGenInputs['productInput']; // productInput!
      userID: string; // ID!
    }
    createProductRequest: { // args
      productID: Array<string | null>; // [ID]!
      vendorID: string; // ID!
    }
    createUserAccount: { // args
      Profile: NexusGenInputs['profileInput']; // profileInput!
      companyName: string; // String!
      email?: NexusGenScalars['EmailAddress'] | null; // EmailAddress
      role: string; // String!
    }
    createUserAdmin: { // args
      Auth?: NexusGenInputs['userInput'] | null; // userInput
      Profile?: NexusGenInputs['profileInput'] | null; // profileInput
      companyName: string; // String!
    }
    deleteProduct: { // args
      productID: string; // ID!
      userID: string; // ID!
    }
    deleteProductRequest: { // args
      productID: string; // ID!
      userID: string; // ID!
    }
    deleteUserAccount: { // args
      userID: string; // ID!
    }
    getAllSales: { // args
      end: string; // String!
      start: string; // ID!
      userID: string; // ID!
    }
    getRefunded: { // args
      end: string; // String!
      start: string; // String!
      userID: string; // ID!
    }
    getTotalSales: { // args
      end: string; // String!
      start: string; // String!
      userID: string; // ID!
    }
    login: { // args
      email: string; // String!
      password: string; // String!
    }
    pulloutRequest: { // args
      productID: string; // ID!
      quantity: number; // Int!
      userID: string; // ID!
    }
    requestProduct: { // args
      productID: string; // ID!
      quantity: number; // Int!
      userID: string; // ID!
    }
    restockrequest: { // args
      productID: string; // ID!
      stock: number; // Int!
      userID: string; // ID!
    }
    updateCompanyAddress: { // args
      address?: NexusGenInputs['addressInput'] | null; // addressInput
      companyID: string; // ID!
    }
    updateMyPassword: { // args
      password: string; // String!
      retype: string; // String!
      userID: string; // ID!
    }
    updateNotificationID: { // args
      notificationID: string; // ID!
    }
    updateOrderStatus: { // args
      orderID: string; // ID!
      status: string; // String!
    }
    updateProduct: { // args
      price: number; // Int!
      productID: string; // ID!
      stock?: number | null; // Int
      title?: string | null; // String
      userID: string; // ID!
    }
    updateRequest: { // args
      requestID: string; // ID!
      status: string; // String!
      userID: string; // ID!
    }
    updateUserPassword: { // args
      userID: string; // ID!
    }
    updateUserProfile: { // args
      profile?: NexusGenInputs['profileInput'] | null; // profileInput
      userID: string; // ID!
    }
    userlockedAccount: { // args
      locked: boolean; // Boolean!
      userID: string; // ID!
    }
    verifyOTP: { // args
      otp: string; // String!
    }
  }
  Query: {
    getAllMyRequest: { // args
      userID: string; // ID!
    }
    getAllOrders: { // args
      end: string; // String!
      start: string; // String!
    }
    getAllTotalByMonth: { // args
      userID: string; // ID!
    }
    getAllTotalOrder: { // args
      userID: string; // ID!
    }
    getAllTransactionByCompany: { // args
      end?: string | null; // String
      start?: string | null; // String
      userID: string; // ID!
    }
    getAllUsers: { // args
      limit: number; // Int!
      offset: number; // Int!
    }
    getCompanyDetails: { // args
      userID: string; // ID!
    }
    getCompanyID: { // args
      companyID: string; // ID!
    }
    getCompanyProducts: { // args
      userID: string; // ID!
    }
    getCurrentOrderHistory: { // args
      start: string; // String!
    }
    getLimitedTransaction: { // args
      limit: number; // Int!
      offset: number; // Int!
      userID: string; // ID!
    }
    getNotificationID: { // args
      notificationID: string; // ID!
    }
    getOrderID: { // args
      orderID: string; // ID!
    }
    getProductByGroup: { // args
      userID: string; // ID!
    }
    getProductByVendor: { // args
      userID: string; // ID!
    }
    getProductID: { // args
      productID: string; // ID!
    }
    getProductTotal: { // args
      productID: string; // ID!
    }
    getProductsByUser: { // args
      userID: string; // ID!
    }
    getProfileById: { // args
      userID: string; // ID!
    }
    getSearchCompany: { // args
      search: string; // String!
    }
    getSearchProduct: { // args
      sku: string; // String!
      userID: string; // ID!
    }
    getSearchSKU: { // args
      sku: string; // String!
      userID: string; // ID!
    }
    getTotalRevenue: { // args
      userID: string; // ID!
    }
    getTotalVendorTransaction: { // args
      end: string; // String!
      start: string; // String!
      userID: string; // ID!
    }
    getUnreadNotification: { // args
      userID: string; // ID!
    }
    getUserID: { // args
      userID: string; // ID!
    }
    getUserLog: { // args
      first: number; // Int!
      offset: number; // Int!
      userID: string; // ID!
    }
    getUserNotification: { // args
      userID: string; // ID!
    }
    groupOrdersByDate: { // args
      end: string; // String!
      start: string; // String!
      userID: string; // ID!
    }
    notificationQuery: { // args
      userID: string; // ID!
    }
    searchUserByName: { // args
      limit: number; // Int!
      offset: number; // Int!
      search: string; // String!
    }
  }
  Subscription: {
    notificationSubscriptions: { // args
      userID: string; // ID!
    }
    userOrderSubscription: { // args
      userID: string; // ID!
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = keyof NexusGenInputs;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: any;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
    /**
     * Authorization for an individual field. Returning "true"
     * or "Promise<true>" means the field can be accessed.
     * Returning "false" or "Promise<false>" will respond
     * with a "Not Authorized" error for the field.
     * Returning or throwing an error will also prevent the
     * resolver from executing.
     */
    authorize?: FieldAuthorizeResolver<TypeName, FieldName>
    /**
     * Whether the type can be null
     * @default (depends on whether nullability is configured in type or schema)
     * @see declarativeWrappingPlugin
     */
    nullable?: boolean
    /**
     * Whether the type is list of values, or just a single value.
     * If list is true, we assume the type is a list. If list is an array,
     * we'll assume that it's a list with the depth. The boolean indicates whether
     * the type is required (non-null), where true = nonNull, false = nullable.
     * @see declarativeWrappingPlugin
     */
    list?: true | boolean[]
    /**
     * Whether the type should be non null, `required: true` = `nullable: false`
     * @default (depends on whether nullability is configured in type or schema)
     * @see declarativeWrappingPlugin
     */
    required?: boolean
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
    /**
     * Whether the type can be null
     * @default (depends on whether nullability is configured in type or schema)
     * @see declarativeWrappingPlugin
     */
    nullable?: boolean
    /**
     * Whether the type is list of values, or just a single value.
     * If list is true, we assume the type is a list. If list is an array,
     * we'll assume that it's a list with the depth. The boolean indicates whether
     * the type is required (non-null), where true = nonNull, false = nullable.
     * @see declarativeWrappingPlugin
     */
    list?: true | boolean[]
    /**
     * Whether the type should be non null, `required: true` = `nullable: false`
     * @default (depends on whether nullability is configured in type or schema)
     * @see declarativeWrappingPlugin
     */
    required?: boolean
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
    /**
     * Whether the type can be null
     * @default (depends on whether nullability is configured in type or schema)
     * @see declarativeWrappingPlugin
     */
    nullable?: boolean
    /**
     * Whether the type is list of values, or just a single value.
     * If list is true, we assume the type is a list. If list is an array,
     * we'll assume that it's a list with the depth. The boolean indicates whether
     * the type is required (non-null), where true = nonNull, false = nullable.
     * @see declarativeWrappingPlugin
     */
    list?: true | boolean[]
    /**
     * Whether the type should be non null, `required: true` = `nullable: false`
     * @default (depends on whether nullability is configured in type or schema)
     * @see declarativeWrappingPlugin
     */
    required?: boolean
  }
}