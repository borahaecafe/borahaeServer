### This file was generated by Nexus Schema
### Do not make changes to this file directly


"""
A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Date

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

"""
A field whose value conforms to the standard internet email address format as specified in RFC822: https://www.w3.org/Protocols/rfc822/.
"""
scalar EmailAddress @specifiedBy(url: "https://www.w3.org/Protocols/rfc822/")

type Mutation {
  createCompanyDetails(address: addressInput, companyID: ID!): company
  createLogoutLog(userID: ID!): logs
  createMeAnEmail(additionInfo: String!, email: EmailAddress!, firstname: String!, lastname: String!, phone: String!): contactus
  createOTP(email: EmailAddress!): otp
  createOrder(orderses: [orderInput]): [order]
  createProduct(proudct: productInput!, userID: ID!): products
  createProductRequest(productID: [ID]!, vendorID: ID!): request
  createUserAccount(Profile: profileInput!, companyName: String!, email: EmailAddress, role: String!): user
  createUserAdmin(Auth: userInput, Profile: profileInput, companyName: String!): user
  deleteProduct(productID: ID!, userID: ID!): products
  deleteProductRequest(productID: ID!, userID: ID!): request
  deleteUserAccount(userID: ID!): user
  getAllSales(end: String!, start: ID!, userID: ID!): [order]
  getRefunded(end: String!, start: String!, userID: ID!): [order]
  getTotalSales(end: String!, start: String!, userID: ID!): [order]
  login(email: String!, password: String!): token
  pulloutRequest(productID: ID!, quantity: Int!, userID: ID!): request
  requestProduct(productID: ID!, quantity: Int!, userID: ID!): request
  restockrequest(productID: ID!, stock: Int!, userID: ID!): request
  updateCompanyAddress(address: addressInput, companyID: ID!): address
  updateMyPassword(password: String!, retype: String!, userID: ID!): user
  updateNotificationID(notificationID: ID!): notification
  updateOrderStatus(orderID: ID!, status: String!): order
  updateProduct(price: Int!, productID: ID!, stock: Int, title: String, userID: ID!): products
  updateRequest(requestID: ID!, status: String!, userID: ID!): request
  updateUserPassword(userID: ID!): user
  updateUserProfile(profile: profileInput, userID: ID!): user
  userlockedAccount(locked: Boolean!, userID: ID!): user
  verifyOTP(otp: String!): otp
}

"""
A field whose value conforms to the standard E.164 format as specified in: https://en.wikipedia.org/wiki/E.164. Basically this is +17895551234.
"""
scalar PhoneNumber

type Query {
  getAllActiveUser: [user]
  getAllAdmin: [user]
  getAllCompanyUser: [company]
  getAllMyRequest(userID: ID!): [request]
  getAllOTP: [otp]
  getAllOrders(end: String!, start: String!): [order]
  getAllProducts: [products]
  getAllTotalByMonth(userID: ID!): [orderPerMonth]
  getAllTotalOrder(userID: ID!): [order]
  getAllTransactionByCompany(end: String, start: String, userID: ID!): [order]
  getAllUserByGroup: [userCount]
  getAllUsers(limit: Int!, offset: Int!): [user]
  getCompanyDetails(userID: ID!): [company]
  getCompanyID(companyID: ID!): [company]
  getCompanyProducts(userID: ID!): [products]
  getCurrentOrderHistory(start: String!): [order]
  getLimitedTransaction(limit: Int!, offset: Int!, userID: ID!): [order]
  getNotificationID(notificationID: ID!): [notification]
  getOrderID(orderID: ID!): [order]
  getProductByGroup(userID: ID!): [productCount]
  getProductByVendor(userID: ID!): [products]
  getProductID(productID: ID!): [products]
  getProductTotal(productID: ID!): [order]
  getProductsByUser(userID: ID!): [products]
  getProfileById(userID: ID!): [profile]
  getSearchCompany(search: String!): [company]
  getSearchProduct(sku: String!, userID: ID!): [products]
  getSearchSKU(sku: String!, userID: ID!): [products]
  getTotalRevenue(userID: ID!): [order]
  getUnreadNotification(userID: ID!): [notification]
  getUserID(userID: ID!): [user]
  getUserLog(first: Int!, offset: Int!, userID: ID!): [logs]
  getUserNotification(userID: ID!): [user]
  groupOrdersByDate(end: String!, start: String!, userID: ID!): [order]
  notificationQuery(userID: ID!): [notification]
  searchUserByName(limit: Int!, offset: Int!, search: String!): [user]
}

type Subscription {
  UserSubscriptions: user
  createProductSub: products
  notificationSubscriptions(userID: ID!): notification
  userOrderSubscription(userID: ID!): order
}

type address {
  addressID: ID
  city: String
  province: String
  street: String
  zipcode: String
}

input addressInput {
  city: String
  province: String
  street: String
  zipcode: String
}

type company {
  companyAddress: [address]
  companyID: ID
  companyName: String
  orders: [order]
  product: [products]
  user: [user]
}

type contactus {
  additionInfo: String
  email: EmailAddress
  firstname: String
  lastname: String
  phone: PhoneNumber
}

type logs {
  createdAt: DateTime
  log: String
  logsID: ID
  user: [user]
}

type notification {
  createdAt: DateTime
  notificationID: ID
  notificationStatus: String
  product: [products]
  request: [request]
  title: String
  user: [user]
}

type order {
  createdAt: DateTime
  discount: Int
  orderID: ID
  orderedProduct: [products]
  orderedUser: [user]
  payment: String
  quantity: Int
  status: String
  total: Float
}

input orderInput {
  discount: Int
  payment: String
  productID: ID
  quantity: Int
  userID: ID
}

type orderPerMonth {
  date: Date
  total: Int
}

type ordergraph {
  createdAt: Date
  orderID: ID
  orderedProduct: [products]
  payment: String
  quantity: Int
  status: String
  total: Float
}

type otp {
  createdAt: DateTime
  expiredAt: DateTime
  otID: ID
  otp: String
}

type productCount {
  count: Int
  title: String
}

input productInput {
  price: Int
  stock: Int
  title: String
}

type products {
  company: [company]
  createdAt: Date
  orders: [order]
  price: Int
  productID: ID
  sku: String
  status: String
  stock: Int
  title: String
  user: [user]
}

type profile {
  birthday: Date
  firstname: String
  lastname: String
  phone: PhoneNumber
  profileID: ID
}

input profileInput {
  birthday: Date!
  firstname: String!
  lastname: String!
  phone: PhoneNumber!
}

type request {
  createdAt: Date
  message: String
  productRequest: [products]
  requestID: ID
  status: String
  user: [user]
}

type token {
  token: String
}

type user {
  company: [company]
  createdAt: Date
  email: EmailAddress
  locked: Boolean
  notification: [notification]
  password: String
  products: [products]
  profile: [profile]
  role: String
  userID: ID
}

type userCount {
  count: Int
  createdAt: Date
}

input userInput {
  email: EmailAddress!
}